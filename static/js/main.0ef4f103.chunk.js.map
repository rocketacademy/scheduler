{"version":3,"sources":["components/schedules/GenerateCourseDayHeader.jsx","assets/4-MILK.png","components/schedules/DisplaySection.jsx","components/schedules/GenerateNotifications.jsx","generateSectionArray.js","components/schedules/GenerateDatetypeSections.jsx","components/schedules/GenerateCourseDayContent.jsx","components/schedules/schedule-table/TableSectionContent.jsx","components/schedules/schedule-table/TableClass.jsx","components/schedules/schedule-table/TableProjects.jsx","components/schedules/schedule-table/ScheduleTable.jsx","generateTableData.js","components/schedules/schedule-table/ContentTable.jsx","components/schedules/current-day/CurrentDaySection.jsx","components/schedules/ScheduleContent.jsx","components/schedules/sidebar/ModuleSection.jsx","components/schedules/sidebar/Modules.jsx","components/schedules/sidebar/CourseWeeks.jsx","components/schedules/sidebar/SideBar.jsx","components/schedules/BatchSchedule.jsx","components/schedules/ScheduleContainer.jsx","components/admin/main-accordion/AddItemModal.jsx","components/admin/main-accordion/inner-accordion/ShiftItemModal.jsx","components/admin/main-accordion/inner-accordion/ClassItem.jsx","components/admin/main-accordion/inner-accordion/SectionClass.jsx","components/admin/main-accordion/inner-accordion/Section.jsx","components/admin/main-accordion/MainAccordion.jsx","download.js","generateCourseDates.js","components/admin/GenerateDataShiftContent.jsx","components/admin/data-shift/ActiveCourses.jsx","generateBasicsMarkdown.js","components/admin/data-shift/DatePicker.jsx","components/admin/data-shift/DataShift.jsx","components/admin/Tabs.jsx","App.js","index.js"],"names":["localDate","formattedDate","meetingTime","timeZone","timeOffset","holiday","NormalCourseDay","todaySectionHeader","day","timeZoneSet","id","DateTime","fromISO","meetingDateTimeUTC","zone","toFormat","className","courseWeek","courseDay","dateTypes","module","HolidayCourseDay","fromFormat","courseDate","holidayType","name","location","GenerateCourseDayHeader","coursetype","DisplaySection","heading","sectionType","map","item","index","dayNumber","url","href","target","rel","GenerateNotifications","status","projectdue","ipdue","projectstart","items","generateSectionArray","datetype","classType","sectionArray","Object","keys","forEach","section","classTypeSection","preClass","inClass","postClass","x","length","push","GenerateDatetypeSections","GenerateCourseDayContent","projects","projectDue","projectStart","ip","ipDue","undefined","TableSectionContent","TableClass","sectionClass","classArray","TableProjects","ScheduleTable","weekNumbers","tableData","today","Accordion","Header","now","num","Body","Table","bordered","hover","size","date","onClick","scroller","scrollTo","smooth","offset","duration","generateTableData","scheduleData","setWeekNumbers","setTableData","firstDay","moveDate","lastDay","firstDayMonth","lastDayMonth","moveDateMonth","startOf","endOf","weekDatesArray","plus","days","monthDatesArray","currentWeekData","currentMonthData","i","includes","ContentTable","startDay","useState","useEffect","CurrentDaySection","nextDay","previousDayId","currentDayId","firstDayOfCourse","previousDay","dayBefore","weekday","weeks","set","minus","findPreviousDay","findNextDay","ScheduleContent","nextToday","title","months","defaultActiveKey","Item","eventKey","ModuleSection","sectionNames","info","Modules","moduleNameArray","scheduleUrls","scheduleObjs","filter","classtype","itemUrlArray","split","generatingDataArrays","accessingRequiredItems","sort","Nav","moduleName","general","poce","ice","urlObj","splitName","dataObj","sortScheduleObjs","CourseWeeks","CurrentWeekDiv","ref","currentWeekRef","current","scrollIntoView","block","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","useRef","variant","navbarScroll","Link","week","navId","sidebarId","SideBar","BatchSchedule","data","JSON","parse","stringify","courseType","courseDatesArray","a","b","ScheduleContainer","batchArray","Navbar","bg","Brand","src","logo","alt","batch","as","to","toUpperCase","exact","path","content","AddItemModal","show","onHide","bootcampdata","coursedate","setDaysInBatchFile","setDaysInMainFile","setTitle","setUrl","setSection","setSectionClass","Modal","centered","closeButton","Title","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","e","Select","Button","preventDefault","newItem","constructor","Array","handleAddItem","Footer","ShiftItemModal","shiftitem","sectiontype","setbootcampdata","classindex","selectedDate","setSelectedDate","dates","selectedItem","splice","targetDay","handleSubmitDate","shiftOneDay","direction","bootcampData","dayIndex","classIndex","bootcampDataArray","holidayDates","holidayData","ClassItem","setBootcampData","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","datesArray","addDates","indexOf","addIndex","SectionClass","sectionclass","sectionIndex","handleClassShift","selectedSection","element","shiftSection","Section","classExists","MainAccordion","setShowInputModal","setCourseDate","accordionKey","handleCloseAll","setAccordionKey","console","log","handlePlusClick","download","filename","dataStr","encodeURIComponent","dlAnchorElem","document","createElement","setAttribute","click","publicHolidays","PH","publicHolidayArray","key","companyHolidays","company","companyHolidayArray","winterBreak","phWithoutCh","getLocalDateTime","utc","timeString","changedFormat","toUTC","toISO","generateHolidayObject","dateString","dateObj","generateCourseDayObject","weekDay","basicsData","getFilename","startDate","endDate","batchNum","displayDate","generateDataObject","input","lessonDays","basicsTimeslots","ftbcDataJson","ptbcDataJson","dateWeek","classDatesCount","courseDayCount","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","startIndex","generateTopLevelObject","dayArray","courseName","differenceInDays","datesToAdd","newDate","newWeekday","newDateObjectsArray","k","addedCourseday","dateInfo","courseday","featureFreezeDay","lastCourseDay","j","targetWeekday","addDateObjToSchedule","copyToClipboard","selBox","style","position","left","top","opacity","body","appendChild","focus","select","execCommand","removeChild","GenerateDataShiftContent","mainFile","setMainFile","batchFile","setMainDays","mainDays","showInputModal","displayDataFile","dataFile","handleDownloadMainClick","handleEditInGithub","gitbookUrl","repoUrls","edit","window","open","handleBatchEdit","slice","fulltimeDataFile","partTimeDataFile","ActiveCourses","lastWeek","setBatchFile","handleSelectClick","generateSectionList","sectionName","sectionString","classList","mdText","generateClassList","dayNames","dayNumbers","weekDates","weekCount","tableRows","generateBasicsMarkdown","Set","number","l","n","displayWeek","m","p","generateCourseArrays","output","r","q","generateCourseDaysTable","localTime","generalDateTypes","projectDateTypes","sectionTypes","t","generateCourseData","DatePicker","setStartDate","setCourseName","setCourseType","setFirstDay","secondDay","setSecondDay","handleRender","handleDownload","addToGitHubRepo","generateMarkdown","DataShift","TabsContainer","setKey","batchDays","setBatchDays","Tabs","activeKey","onSelect","Tab","App","ptbc1","ptbc2","ptbc3","ftbc6","ftbc7","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0ef4f103.chunk.js","sourcesContent":["import React from \"react\";\nimport { DateTime } from \"luxon\";\n\n// helper function that generates course day header for a normal course day\nconst NormalCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  meetingTime = localDate.toFormat(\"t\");\n  timeOffset = localDate.toFormat(\"ZZZZ\");\n  timeZone = localDate.toFormat(\"z\");\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header-div\">\n          <div className=\"main-header\">\n            {!todaySectionHeader ? (\n              <h3 className=\"day-header\">\n                {formattedDate}, Week {day.courseWeek}, Course Day{\" \"}\n                {day.courseDay}\n              </h3>\n            ) : (\n              <h3 className=\"day-header\">{formattedDate}</h3>\n            )}\n          </div>\n          <p>\n            Meeting Time: {meetingTime} SGT ({timeOffset})\n          </p>\n          {day.courseDay > 0 && (\n            <p>{day.dateTypes.module}</p>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\n// helper function that generates courseday header for a holiday\nconst HolidayCourseDay = ({ day, timeZoneSet, id }) => {\n  localDate = DateTime.fromFormat(day.courseDate, \"dd-MM-yyyy\");\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  timeZone = localDate.toFormat(\"z\");\n  // depending on if the holiday is a public/company holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === \"public holiday\") {\n    holiday = `Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = `Company Holiday (${day.dateTypes.name})`;\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>\n            {formattedDate}: {day.dateTypes.location} {holiday}\n          </h2>\n        </div>\n      )}\n    </>\n  );\n};\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nconst GenerateCourseDayHeader = ({ todaySectionHeader, day, coursetype }) => {\n  // this is the timezone of the area we are in\n  const timeZoneSet = \"Asia/Singapore\";\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  } else {\n    return (\n      <HolidayCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  }\n};\n\nexport default GenerateCourseDayHeader;\n","export default __webpack_public_path__ + \"static/media/4-MILK.46ae71aa.png\";","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h6 className=\"class-header\">{heading}</h6>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function of sidebar modules\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          } else if (heading === \"In Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gic-${index}`;\n          } else {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpostc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\n\n// if sections project due/ project start/ ip due exist in a course day,\n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({\n  status,\n  projectdue,\n  ipdue,\n  projectstart,\n  day,\n}) => {\n  let heading;\n\n  // generates header for the section\n  if (status) {\n    if (status.items) {\n      if (status === projectdue) {\n        heading = \"Project Due\";\n      } else if (status === projectstart) {\n        heading = \"Project Start\";\n      } else if (status === ipdue) {\n        heading = \"Inteview Prep due\";\n      }\n    }\n  }\n\n  return (\n    <>\n      {status && status.items && (\n        status.items.map((item) => {\n          return (\n            <li>\n              <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"notification-item\"><h6>{item.name}</h6></a>\n            </li>\n          )\n        })\n        // <div className=\"notifications\">\n        //   <DisplaySection\n        //     heading={heading}\n        //     sectionType={status.items}\n        //     day={day}\n        //   />\n        // </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateNotifications;\n","const generateSectionArray = (datetype, classType, sectionArray) => {\n  Object.keys(datetype).forEach((section) => {\n    let classTypeSection;\n    // classTypeSection is determined by what classType is\n    if (classType === 'preClass') {\n      classTypeSection = datetype[section].preClass;\n    } else if (classType === 'inClass') {\n      classTypeSection = datetype[section].inClass;\n    } else {\n      classTypeSection = datetype[section].postClass;\n    }\n\n    if (classTypeSection) {\n      // if there are items in classTypeSection, the items are pushed into sectionArray\n      if (classTypeSection.items) {\n        for (let x = 0; x < classTypeSection.items.length; x += 1) {\n          sectionArray.push(classTypeSection.items[x]);\n        }\n      }\n    }\n  });\n  return sectionArray;\n};\n\nexport default generateSectionArray;\n","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  let projectdue;\n  let projectstart;\n  let ipdue;\n  if (!day.dateTypes.holidayType) {\n    if (day.dateTypes.projects) {\n      projectdue = day.dateTypes.projects.projectDue;\n      projectstart = day.dateTypes.projects.projectStart;\n    }\n\n    if (day.dateTypes.ip) {\n      ipdue = day.dateTypes.ip.ipDue;\n    }\n  }\n \n\n  return (\n    <>\n      {/* project due notification  */}\n      {projectdue !== undefined && (\n        <GenerateNotifications\n        status={projectdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n      {/* career prep due notification  */}\n      {ipdue !== undefined && (\n        <GenerateNotifications\n        status={ipdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      {projectstart !== undefined && (\n        <GenerateNotifications\n        status={projectstart}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../../../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from '../GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    \n    let projectdue;\n    let projectstart;\n    let ipdue;\n\n    if(!day.dateTypes.holidayType) {\n        if (day.dateTypes.projects) {\n        projectdue = day.dateTypes.projects.projectDue;\n        projectstart = day.dateTypes.projects.projectStart;\n        }\n\n        if (day.dateTypes.ip) {\n        ipdue = day.dateTypes.ip.ipDue;\n        }\n    }\n    \n    return (\n        <div className=\"table-projects\">\n            {projectdue !== undefined && (\n                <GenerateNotifications\n                status={projectdue}\n                ipdue={ipdue}\n                projectdue={projectdue}\n                projectstart={projectstart}\n                day={day}\n            />\n            )}\n            {projectstart !== undefined && (\n                <GenerateNotifications\n                status={projectstart}\n                ipdue={ipdue}\n                projectdue={projectdue}\n                projectstart={projectstart}\n                day={day}\n            />\n            )}\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction ScheduleTable({ weekNumbers, tableData, coursetype, today }) {\n  return (\n    <>\n      <Accordion.Header>\n        <h5>\n          {/* header shows different info depending on date and coursetype  */}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Current Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") !==\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Next Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"pt\" && (\n              <>Current Month's Schedule</>\n            )}\n        </h5>\n      </Accordion.Header>\n      <Accordion.Body>\n        <Table bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Projects</th>\n              <th>Pre Class</th>\n              <th>In Class</th>\n              <th>Post Class</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((date, index) => {\n              // getting the formatted date that will be shown in the table\n              const formattedDate = DateTime.fromFormat(\n                date.courseDate,\n                \"dd-MM-yyyy\"\n              ).toFormat(\"EEE d MMM\");\n              // getting the id that links formattedDate to element in main content page\n              const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n              return (\n                <tr\n                  className={\n                    today.toFormat(\"dd-MM-yyyy\") ===\n                      DateTime.now().toFormat(\"dd-MM-yyyy\") &&\n                    date.courseDate === today.toFormat(\"dd-MM-yyyy\")\n                      ? \"table-secondary\"\n                      : null\n                  }\n                >\n                  <td\n                    // library react-scroll used to scroll to an element with matching id on main page\n                    className=\"table-date\"\n                  >\n                    <h6\n                      onClick={() =>\n                        scroller.scrollTo(id, {\n                          smooth: true,\n                          offset: -70,\n                          duration: 100,\n                        })\n                      }\n                    >\n                      {formattedDate}\n                    </h6>\n                    <p>\n                      Week {date.courseWeek}\n                      <br></br>Course Day {date.courseDay}\n                    </p>\n                  </td>\n                  {/* getting data for projects section of table */}\n                  <td>\n                    <TableProjects day={tableData[index]} />\n                  </td>\n                  {/* getting data for preclass and inclass section of table */}\n                  <TableClass day={tableData[index]} sectionClass=\"preClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"inClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"postClass\" />\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Accordion.Body>\n    </>\n  );\n}\n\nexport default ScheduleTable;\n","// function that generates data required for rendering schedule table\nconst generateTableData = (scheduleData, coursetype, weekNumbers, tableData, setWeekNumbers, setTableData, today) => {\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let firstDayMonth;\n  let lastDayMonth;\n  let moveDateMonth;\n  weekNumbers = [];\n  // shows current month for part time bootcamp\n  firstDayMonth = today.startOf('month');\n  lastDayMonth = today.endOf('month');\n\n  // shows current week for full time bootcamp\n  firstDay = today.startOf('week');\n  lastDay = today.endOf('week');\n\n  moveDate = firstDay;\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day of week inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat('dd-MM-yyyy'));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  moveDateMonth = firstDayMonth;\n\n  const monthDatesArray = [];\n  if (coursetype === 'pt') {\n    // getting all the dates between first day and last day of week inclusive and storing them in an array\n    while (moveDateMonth <= lastDayMonth) {\n      monthDatesArray.push(moveDateMonth.toFormat('dd-MM-yyyy'));\n      moveDateMonth = moveDateMonth.plus({ days: 1 });\n    }\n  }\n\n  const currentWeekData = [];\n  const currentMonthData = [];\n\n  // getting the data (object) for each individual day of the month (used for pt schedule table)\n  if (coursetype === 'pt') {\n    for (let i = 0; i < monthDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === monthDatesArray[i]) {\n          currentMonthData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentMonthData);\n  } else {\n    // getting the data (object) for each individual day of the week\n    for (let i = 0; i < weekDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === weekDatesArray[i]) {\n          currentWeekData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentWeekData);\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  weekDatesArray.forEach((date) => {\n    if (\n      scheduleData[date]\n      && !weekNumbers.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumbers.push(scheduleData[date].courseWeek);\n    }\n  });\n  setWeekNumbers(weekNumbers);\n};\n\nexport default generateTableData;\n","import React, { useEffect, useState } from \"react\";\nimport ScheduleTable from \"./ScheduleTable\";\nimport generateTableData from \"../../../generateTableData\";\n\nconst ContentTable = ({ scheduleData, coursetype, startDay }) => {\n  const [weekNumbers, setWeekNumbers] = useState();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    generateTableData(\n      scheduleData,\n      coursetype,\n      weekNumbers,\n      tableData,\n      setWeekNumbers,\n      setTableData,\n      startDay\n    );\n  }, [scheduleData]);\n\n  return (\n    <div className=\"schedule-table\">\n      {/* table which displays current week's/ month's content based on course type */}\n      {weekNumbers && tableData && (\n        <ScheduleTable\n          weekNumbers={weekNumbers}\n          tableData={tableData}\n          coursetype={coursetype}\n          today={startDay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContentTable;\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayHeader from \"../GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"../GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"../GenerateDatetypeSections\";\nimport { DateTime } from \"luxon\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let dayBefore;\n\n  if (coursetype === \"ft\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 1) {\n      dayBefore = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      dayBefore = today.plus({ days: -2 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.plus({ days: -1 }).toFormat('dd-MM-yyyy');\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 2) {\n      dayBefore = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 2 && today.weekday <= 6) {\n      dayBefore = today.set({ weekday: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[dayBefore] && scheduleData[dayBefore].dateTypes.holidayType) {\n    dayBefore = DateTime.fromFormat(dayBefore, 'dd-MM-yyyy').minus({ days: 2 }).toFormat('dd-MM-yyyy');\n  }\n\n  return dayBefore;\n};\n\n//helper function that finds next course day\nconst findNextDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let nextDay;\n\n  if (coursetype === \"ft\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      nextDay = today.plus({ days: 1}).toFormat('dd-MM-yyyy');\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 2) {\n      nextDay = today.toFormat('dd-MM-yyyy');\n    } else if (today.weekday > 2 && today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[nextDay] && scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = DateTime.fromFormat(nextDay, 'dd-MM-yyyy').plus({ days: 1 }).toFormat('dd-MM-yyyy');\n    // console.log('next day', nextDay);\n    // nextDay = findNextDay(scheduleData, nextDay, coursetype, firstDayOfCourse);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentDaySection({ scheduleData, coursetype, today, firstDayOfCourse }) {\n\n  // indicates whether or not courseweek and course day is shown on the courseday header\n  const todaySectionHeader = true;\n  let previousDay = null;\n  let nextDay;\n  let previousDayId;\n  let currentDayId; \n\n  // finds previous course day, only applicable if course has already started\n  if (DateTime.now() > firstDayOfCourse) {\n    previousDay = findPreviousDay(scheduleData, today, coursetype, firstDayOfCourse);\n    nextDay = findNextDay(scheduleData, today, coursetype, firstDayOfCourse);\n\n    if(scheduleData[previousDay]) {\n      previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n    }\n\n    if(scheduleData[nextDay]) {\n      currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n    }\n  } else {\n    nextDay = firstDayOfCourse.toFormat('dd-MM-yyyy');\n  }\n\n  return (\n    <div>\n      <div className=\"today-date\">\n        {scheduleData[nextDay] && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"main-header-course-day\">\n              <h5>\n                Current Course Day:{\" \"}\n                {/* shows either today's content or next course day's content depending on if today's content exists  */}\n                {scheduleData[today.toFormat(\"dd-MM-yyyy\")] ? (\n                  <span>\n                    {scheduleData[today.toFormat(\"dd-MM-yyyy\")].courseDay}\n                  </span>\n                ) : (\n                  <span> {scheduleData[nextDay].courseDay}</span>\n                )}\n              </h5>\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(currentDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Current Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(previousDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Previous Course Day:\n                  </h5>\n                  <br></br>\n                  {scheduleData[previousDay] && (\n                    <GenerateDatetypeSections\n                    datetype={scheduleData[previousDay].dateTypes}\n                    classType=\"postClass\"\n                    day={scheduleData[previousDay]}\n                  />\n                  )}\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDaySection;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport ContentTable from \"./schedule-table/ContentTable\";\nimport { scroller } from \"react-scroll\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport CurrentDaySection from \"./current-day/CurrentDaySection\";\nimport { DateTime } from \"luxon\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title, today, firstDayOfCourse }) {\n  // used by scrollTo function to identify where to scroll to from the up arrow at the bottom of the screen\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  // let today = DateTime.now();\n\n  // // checking if first day of course is after today, if so today = first day of course, so that current day\n  // // section and tables and display first day/ weeks info\n  // const courseDatesArray = [];\n  // Object.keys(scheduleData).map((day) => {\n  //   courseDatesArray.push(day);\n  // });\n  // courseDatesArray.sort(function(a, b){return a-b});\n  // const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  // if (today < firstDayOfCourse) {\n  //   today = firstDayOfCourse;\n  // }\n\n  let nextToday;\n  if (coursetype === \"ft\") {\n    nextToday = today.plus({ weeks: 1 });\n  } else {\n    nextToday = today.plus({ months: 1 });\n  }\n  \n  return (\n    <div className=\"content\">\n      {/* button that takes user back to the top of the page  */}\n      <div\n        className=\"up-arrow\"\n        onClick={() =>\n          scroller.scrollTo(id, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        <ExpandLessIcon />\n      </div>\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n     \n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentDaySection\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n      <div className=\"schedule-accordion-container\">\n        <Accordion className=\"current-week-accordion\" defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <ContentTable\n              scheduleData={scheduleData}\n              coursetype={coursetype}\n              startDay={today}\n            />\n          </Accordion.Item>\n        </Accordion>\n        <Accordion className=\"current-week-accordion\">\n          {coursetype === \"ft\" && (\n            <Accordion.Item eventKey=\"0\">\n              <ContentTable\n                scheduleData={scheduleData}\n                coursetype={coursetype}\n                startDay={nextToday}\n              />\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </div>\n      <div className=\"schedule-list\">\n        <h1>Full Schedule</h1>\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { scroller } from 'react-scroll';\n\nfunction ModuleSection({ \n                    section, \n                    index, \n                    sectionNames, \n                    coursetype, \n                    scheduleData \n                }) {\n    return (\n        <>\n        {section.length > 1 && (\n        <Accordion.Item eventKey={index}>\n            <Accordion.Header>{sectionNames[index]}</Accordion.Header>\n            <Accordion.Body>\n            {section.map((info) => {\n            const id = `${coursetype}-week-${scheduleData[info.date].courseWeek}-day-${scheduleData[info.date].dayNumber}`;\n    \n                return (\n                <p onClick={() =>\n                scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                })\n                }\n                >\n                {info.name}\n                </p>\n                )\n            })}\n            </Accordion.Body>\n        </Accordion.Item>\n        )}\n        </>\n    )\n}\n\nexport default ModuleSection\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport ModuleSection from \"./ModuleSection\";\n\n// helper function for generating scheduleObjs array and moduleNameArray\nconst generatingDataArrays = (\n                              scheduleData, \n                              day, \n                              section, \n                              classtype, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes[section][classtype].items) {\n    scheduleData[day].dateTypes[section][classtype].items.map((item) => {\n      // if the item has a url\n      if(item.url && !scheduleUrls.includes(item.url)) {\n        // push the url into scheduleUrls\n        scheduleUrls.push(item.url);\n        // push item name, url and date into scheduleObjs\n        scheduleObjs.push({name: item.name, url: item.url, date: day});\n      }\n      if (item.url) {\n        const itemUrlArray = item.url.split('/');\n        // itemUrlArray[3] is used as the heading of each module section\n        // we're filtering out everythign that does not come from the gitbook \n        if (!moduleNameArray.includes(itemUrlArray[3]) && itemUrlArray[2] === 'bootcamp.rocketacademy.co') {\n          moduleNameArray.push(itemUrlArray[3]);\n        }\n      }\n    })\n  }\n}\n\n// helper finction for accessing required items (items in each class of each section of each day)\nconst accessingRequiredItems = (\n                              scheduleData, \n                              day, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes.module) {\n    Object.keys(scheduleData[day].dateTypes)\n    // filtering out module key\n    .filter(section => section !== 'module')\n    .map((section) => {\n      Object.keys(scheduleData[day].dateTypes[section])\n      // filtering out type key\n      .filter(classtype => classtype !== 'type')\n      .map((classtype) => {\n        // if there item array exists in a section, call the function that gets the required data\n        generatingDataArrays(scheduleData, \n                            day, \n                            section, \n                            classtype, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray);\n        \n      })\n    })\n  }\n}\n\nconst sortScheduleObjs = (urlObj, moduleName, general, ice, poce) => {\n  const urlModule = urlObj.url.split('/');\n  // this is the part of the url which we used to get the moduleName\n  const urlModuleName = urlModule[3];\n  // if the module name in the url is the current moduleName\n  if (urlModuleName === moduleName) {\n    const splitName = urlObj.name.split('.');\n    const dataObj = { name: urlObj.name, date: urlObj.date }\n    // push the object into the relevant array\n    if (splitName[1] === 'ICE') {\n      ice.push(dataObj);\n    } else if (splitName[1] === 'POCE') {\n      poce.push(dataObj);\n    } else {\n      general.push(dataObj);\n    }\n  }\n}\n \n// ###################################################################\n// ###################################################################\n\nfunction Modules({ scheduleData, coursetype }) {\n  const moduleNameArray = [];\n  const scheduleUrls = [];\n  const scheduleObjs = [];\n\n  // looking through entire data file \n  Object.keys(scheduleData).map((day) => {\n    accessingRequiredItems (\n                            scheduleData, \n                            day, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray\n                            );\n  })\n\n  moduleNameArray.sort();\n\n  return (\n    <div className=\"sidebar-modules\">\n      <h4>Modules</h4>\n      <Nav className=\"flex-column\">\n        {moduleNameArray.map((moduleName) => {\n          // creating array to store items of each section\n          const general = [];\n          const poce = [];\n          const ice = [];\n\n          // sort each object in scheduleObjs into one of 3 arrays, general, ice, poce\n          scheduleObjs.forEach((urlObj) => {\n            sortScheduleObjs(urlObj, moduleName, general, ice, poce);\n          })\n\n          const sectionArray = [];\n          sectionArray.push(general);\n          sectionArray.push(ice);\n          sectionArray.push(poce);\n\n          // names of each section \n          const sectionNames = ['General', 'In Class', 'Post Class'];\n\n          return (\n            <>\n            <h6 className=\"sidebar-subheading\">{moduleName}</h6>\n            <Accordion className=\"modules-accordion\">\n            {sectionArray.map((section, index) => {\n              return (\n              <ModuleSection\n                        section={section} \n                        index={index} \n                        sectionNames={sectionNames} \n                        coursetype={coursetype} \n                        scheduleData={scheduleData} \n                        />\n              )\n            })}\n            </Accordion>\n            </>\n            )\n          }\n        )}\n      </Nav>\n    </div>\n  );\n}\n\nexport default Modules;\n\n\n","import React, { useEffect, useRef } from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport { scroller } from 'react-scroll';\nimport { DateTime } from 'luxon';\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\nimport Modules from './Modules';\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype, firstDayOfCourse }) {\n  const weeks = [];\n  // used to scroll to current week on page load\n  const executeScroll = () => currentWeekRef.current.scrollIntoView({ block: 'center' });\n\n  useEffect(() => {\n    if (DateTime.now() > firstDayOfCourse) {\n      executeScroll();\n    }\n  }, []);\n\n  function CurrentWeekDiv() {\n    return (\n      <div ref={currentWeekRef} />\n    );\n  }\n\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf('week');\n  const lastDayOfWeek = DateTime.now().endOf('week');\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat('dd-MM-yyyy'));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  const currentWeekRef = useRef(null);\n\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date]\n      && !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"0\"\n            // uses react-scroll library for scroll function\n            onClick={() => scroller.scrollTo(`${coursetype}-top`, {\n              smooth: true,\n              offset: -70,\n              duration: 100,\n            })}\n          >\n            Current Day\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `${index + 1}`;\n          let id;\n          if (coursetype === 'pt') {\n            id = `${coursetype}-week-${week}-day-2`;\n          } else {\n            id = `${coursetype}-week-${week}-day-1`;\n          }\n          const sidebarId = `${coursetype}-sidebar-week-${week}`;\n\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() => scroller.scrollTo(id, {\n                  smooth: true,\n                  offset: -70,\n                  duration: 100,\n                })}\n              >\n                {week === weekNumber[0] && DateTime.now() > firstDayOfCourse && <CurrentWeekDiv />}\n                <div>\n                  {week === null ? 'Break' : `Week ${week}`}\n                  {/* week indicator that indicates that a certain week is the current week  */}\n                  {weeks[index] === weekNumber[0] && (\n                    <span id={sidebarId} className=\"current-wk-indicator\">\n                      <KeyboardBackspaceIcon />\n                      {'  '}\n                      this week\n                    </span>\n                  )}\n                </div>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n      <Modules scheduleData={scheduleData} coursetype={coursetype} />\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype, firstDayOfCourse }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks \n        scheduleData={scheduleData} \n        coursetype={coursetype} \n        firstDayOfCourse={firstDayOfCourse}  />\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./sidebar/SideBar\";\nimport { DateTime } from 'luxon';\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"PTBC\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  let today = DateTime.now();\n\n  // checking if first day of course is after today, if so today = first day of course, so that current day\n  // section and tables and display first day/ weeks info\n  const courseDatesArray = [];\n  Object.keys(scheduleData).map((day) => {\n    courseDatesArray.push(day);\n  });\n  courseDatesArray.sort(function(a, b){return a-b});\n  const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  if (today < firstDayOfCourse) {\n    today = firstDayOfCourse;\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar \n        scheduleData={scheduleData} \n        coursetype={coursetype}  \n        firstDayOfCourse={firstDayOfCourse} \n        />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React from 'react';\nimport {\n  Route, Switch, Link, useRouteMatch, Redirect,\n} from 'react-router-dom';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport logo from '../../assets/4-MILK.png';\nimport BatchSchedule from './BatchSchedule';\n\nfunction ScheduleContainer({ batchArray }) {\n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      <Navbar variant=\"dark\" bg=\"secondary\">\n        <Navbar.Brand href=\"#home\">\n          <img src={logo} alt=\"company logo\" />\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          {batchArray.map((batch) => (\n            <Nav.Link as={Link} to={`/${batch.name}`}>\n              {batch.name.toUpperCase()}\n            </Nav.Link>\n          ))}\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to={`/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => (\n\n          <Route path={`/${batch.name}`}>\n            <BatchSchedule\n              data={batch.content}\n              title={batch.name.toUpperCase()}\n            />\n          </Route>\n        ))}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdata,\n  coursedate,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n  // input fields for a entry of a new item into the main data file\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  // function that adds new item to main data file\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    // new item that will be added to main data file\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    // if the section that the new item is to be added to is empty, an empty array called items is added to it\n    if (!bootcampdata[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdata[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    // the new item is then pushed into items array\n    bootcampdata[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n\n    // the new content is saved in state\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({ ...bootcampdata });\n  };\n\n  return (\n    // modal that takes in user input for the creation of a new item\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"ip\">ip</option>\n            <option value=\"algos\">algorithms</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"ip\" && <option value=\"ipDue\">ipDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\n// moves items to a specific date in the schedule\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdata,\n  setbootcampdata,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n    // finding the selected item in the data file\n    let selectedItem = sectiontype[classtype].items[classindex];\n    // removing it from it's original position\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n    // this is where we want to move the item to\n    const targetDay = bootcampdata[selectedDate].dateTypes[section];\n\n    // checking to see if items array exists at destination, if not, an empty array called items is added\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    // selected item is push into items array at destination\n    targetDay[classtype].items.push(selectedItem);\n\n    // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({...bootcampdata})\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">Moving item ...</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdata[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from \"react\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport ShiftItemModal from \"./ShiftItemModal\";\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\nimport holidayData from '../../../../data/2021-sg-stat-holidays.json';\n\n// helper functions that populates dateArray\n// ##########################################################\nconst addDates = (datesArray, date) => {\n  if (!datesArray.includes(date)) {\n    datesArray.push(date);\n  }\n  return datesArray;\n};\n\nconst addIndex = (bootcampData, datesArray, date) => {\n  if (!datesArray.includes(bootcampData.indexOf(date))) {\n    datesArray.push(bootcampData.indexOf(date));\n  }\n  return datesArray;\n};\n\n// helper function that shifts items 1 day\nconst shiftOneDay = (\n  direction, \n  bootcampData, \n  dayIndex, \n  sectionType, \n  classType, \n  classIndex, \n  section,\n  setDaysInMainFile,\n  setDaysInBatchFile\n  ) => {\n\n      let bootcampDataArray;\n      let target; \n       if(bootcampData.constructor === Object) {\n         const holidayDates = [];\n         Object.keys(holidayData).forEach((type) => {\n          Object.keys(holidayData[type]).forEach((date) => {\n            holidayDates.push(date);\n          })\n         })\n         bootcampDataArray = Object.keys(bootcampData);\n\n         if(direction === 'up') {\n           target = bootcampData[bootcampDataArray[dayIndex - 1]].courseDate;\n           if (holidayDates.includes(target)) {\n            target = bootcampData[bootcampDataArray[(dayIndex - 1) -1]].courseDate;\n           }         \n          \n         } else {\n           target = bootcampData[bootcampDataArray[dayIndex + 1]].courseDate;\n           if (holidayDates.includes(target)) {\n            target = bootcampData[bootcampDataArray[(dayIndex + 1) +1]].courseDate;\n           }\n           \n         }\n      } else {\n        if (direction === 'up') {\n          target = dayIndex - 1\n        } else {\n          target = dayIndex + 1\n        }\n      }\n      // finding the selected item in the data file\n      let selectedItem = sectionType[classType].items[classIndex];\n      // removing it from it's original position\n      sectionType[classType].items.splice(classIndex, 1);\n\n      // if items array is empty after removing selected item, remove empty items array\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      // this is where we want to move the item to\n      const targetDay = bootcampData[target].dateTypes[section];\n      // checking to see if items array exists at destination, if not, an empty array called items is added\n      if (!targetDay[classType].items) {\n        targetDay[classType].items = [];\n      }\n\n      // selected item is push into items array at destination\n      targetDay[classType].items.push(selectedItem);\n\n      // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n      bootcampData.constructor === Array\n        ? setDaysInMainFile([...bootcampData])\n        : setDaysInBatchFile({...bootcampData})\n\n    }\n// ############################################################\n\nfunction ClassItem({\n  setBootcampData,\n  section,\n  bootcampData,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n  setDaysInMainFile,\n  setDaysInBatchFile\n}) {\n  // toggle visibility of buttons\n  const [modalShow, setModalShow] = useState(false);\n  // object shift item is initialised with keys direction and dates to store data that will be passed into the nect component\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  // function that handles moving data from one day to another\n  const handleShift = (direction, dayIndex, classIndex) => {\n    // array that contains all the dates either before or after a selected date depending on direction chosen by user\n    let datesArray = [];\n\n    \n\n    // item is being moved backwards in the schedule\n    if (direction === \"any\") {\n      // if bootcampData either an object or an array depending on wether the user is editing the main or individual schedule files, and needs to be processed accordingly\n      bootcampData.constructor === Object\n        ? Object.keys(bootcampData)\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampData\n            .map((date) => {\n              datesArray = addIndex(bootcampData, datesArray, date);\n            });\n\n      // data is put into object shift item\n      setShiftItem({\n        ...shiftItem,\n        dates: datesArray,\n      });\n      // modal that takes user input to move item is shown\n      setModalShow(true);\n      // item is being moved forward in the schedule\n    } else if (direction === \"down\") {\n     shiftOneDay(\n        'down', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n\n    } else if (direction === \"up\") {\n      shiftOneDay(\n        'up', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n    } else {\n      // here the item is being deleted from the schedule\n      sectionType[classType].items.splice(classIndex, 1);\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n      bootcampData.constructor === Array\n        ? setDaysInMainFile([...bootcampData])\n        : setDaysInBatchFile({...bootcampData})\n\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n      >\n        {item.name}\n        \n          <div>\n            {/* remove item  */}\n            <button className=\"trash-can\" onClick={() => handleShift(\"delete\", dayIndex, classIndex)}>\n              <DeleteOutlinedIcon />\n            </button>\n            {/* move item backwards in the schedule  */}\n            <button onClick={() => handleShift(\"up\", dayIndex, classIndex)}>\n              <ExpandLessIcon />\n            </button>\n            {/* move item forward in the schedule  */}\n            <button onClick={() => handleShift(\"down\", dayIndex, classIndex)}>\n              <ExpandMoreIcon />\n            </button>\n            <button className=\"select\" onClick={() => handleShift('any', dayIndex, classIndex)}>\n              <DragIndicatorIcon />\n            </button>\n          </div>\n        \n        {modalShow && (\n          // modal that is shown when the user clicks either of the above buttons\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdata={bootcampData}\n            setbootcampdata={setBootcampData}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n            setDaysInMainFile={setDaysInMainFile}\n            setDaysInBatchFile={setDaysInBatchFile}\n            />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampData,\n  setBootcampData,\n  section,\n  dayIndex,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampData) => {\n    sectionArray.forEach((element, index) => {\n      if (element !== null && bootcampData.constructor === Object) {\n        if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section] &&\n          bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]) {\n          if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]\n              .items) {\n            sectionArray[index].forEach((item) => {\n              bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n                sectionclass\n              ].items.push(item);\n            });\n          } else {\n            bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      } else if (element !== null && bootcampData.constructor === Array) {\n          if (bootcampData[startDay + index].dateTypes[section][sectionclass]\n            .items) {\n          sectionArray[index].forEach((item) => {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n          } else {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      });\n    return bootcampData;\n  };\n\n  let bootcampDataArray;\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    \n    if (bootcampData.constructor === Object) {\n      bootcampDataArray = Object.keys(bootcampData);\n\n        for (let i = dayIndex; i < bootcampDataArray.length - 1; i += 1) {\n          if(bootcampData[bootcampDataArray[i]].dateTypes[section] && bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass]) {\n            if (bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items) {\n            const selectedSection =\n              bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n              sectionArray.push(selectedSection);\n              delete bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n            } else {\n              sectionArray.push(null);\n            }\n          }\n          \n        }\n      \n    } else {\n      for (let i = dayIndex; i < bootcampData.length - 1; i += 1) {\n        if (bootcampData[i].dateTypes[section][sectionclass].items) {\n          const selectedSection =\n            bootcampData[i].dateTypes[section][sectionclass].items;\n          sectionArray.push(selectedSection);\n          delete bootcampData[i].dateTypes[section][sectionclass].items;\n        } else {\n          sectionArray.push(null);\n        }\n      }\n    }\n    \n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n    }\n\n    bootcampData = shiftSection(sectionArray, startDay, bootcampData);\n    \n     // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampData.constructor === Array\n      ? setDaysInMainFile([...bootcampData])\n      : setDaysInBatchFile({...bootcampData})\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampData={bootcampData}\n                  setBootcampData={setBootcampData}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                  setDaysInBatchFile={setDaysInBatchFile}\n                  setDaysInMainFile={setDaysInMainFile}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n  \n          >\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n          \n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampData,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampData,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"ip\" && sectionType.ipDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampData={bootcampData}\n                            setBootcampData={setBootcampData}\n                            section={section}\n                            dayIndex={dayIndex}\n                            setDaysInBatchFile={setDaysInBatchFile}\n                            setDaysInMainFile={setDaysInMainFile}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Section from \"./inner-accordion/Section\";\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampData,\n  setBootcampData,\n  day,\n  setShowInputModal,\n  setCourseDate,\n  handleCloseAll,\n  setAccordionKey,\n  accordionKey,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  \n\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampData[day].dateTypes.module && (\n        <Accordion key={accordionKey}>\n          <Accordion.Item eventKey={dayIndex}>\n            <div\n                className=\"course-day-symbol\"\n                onClick={() => handlePlusClick(day)}\n              >\n                {\" \"}\n                <AddIcon />\n            </div>\n            <Accordion.Header>\n              <div className=\"course-day-header\">\n                {bootcampData.constructor === Object ? (\n                  <>\n                    {day}, Week: {bootcampData[day].courseWeek}, Course Day:{\" \"}\n                    {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                ) : (\n                  <>\n                    Course Day: {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampData[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampData={setBootcampData}\n                        section={section}\n                        sectionType={bootcampData[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampData={bootcampData}\n                        setDaysInBatchFile={setDaysInBatchFile}\n                        setDaysInMainFile={setDaysInMainFile}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","const download = (data, filename) => {\n  // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n  const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(data))}`;\n  const dlAnchorElem = document.createElement('a');\n  dlAnchorElem.setAttribute('href', dataStr);\n  dlAnchorElem.setAttribute('download', filename);\n  dlAnchorElem.click();\n};\n\nexport default download;\n","import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/schedule-templates/basics-schedule-template.json';\n// import ftbcDataJson from './data/schedule-templates/ftbc1.0-schedule-template.json';\nimport ftbcDataJson from './data/schedule-templates/ftbc2.0-schedule-template.json';\n// import ftbcDataJson from './data/schedule-templates/ftbc3.0-schedule-template.json';\n// import ptbcDataJson from './data/schedule-templates/ptbc1.0-schedule-template.json';\nimport ptbcDataJson from './data/schedule-templates/ptbc2.0-schedule-template.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n  publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n  companyHolidayArray.push(key);\n  // get array of winter break dates\n  if (companyHolidays[key].name === 'winter break') {\n    winterBreak.push(companyHolidays[key].date);\n  }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n  if (!companyHolidayArray.includes(holiday)) {\n    phWithoutCh.push(holiday);\n  }\n});\n\nlet bootcampData;\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseType, date) => {\n  const changedFormat = date.toFormat('yyyy-MM-dd');\n  if (courseType === 'Basics') {\n    utc = DateTime.fromISO(changedFormat + timeString, { zone: 'Singapore' }).toUTC().toISO();\n  } else if ((courseType === 'FTBC') || (courseType === 'PTBC' && (date.weekday === 6))) {\n    utc = DateTime.fromISO(`${changedFormat}T10:00`, { zone: 'Singapore' }).toUTC().toISO();\n  } else if (courseType === 'PTBC' && (date.weekday === 2)) {\n    utc = DateTime.fromISO(`${changedFormat}T19:30`, { zone: 'Singapore' }).toUTC().toISO();\n  }\n  return utc;\n};\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject, lessonDays) => {\n  if (courseType === 'Basics') {\n    topLevelObject = {\n      daysOfWeek: lessonDays,\n      courseStartIndex: basicsData.courseStartIndex,\n      totalCourseDays: basicsData.totalCourseDays,\n      ...topLevelObject,\n    };\n  } else {\n    const bootcampDays = bootcampData.daysOfWeek;\n    const startIndex = bootcampData.courseStartIndex;\n\n    topLevelObject = {\n      daysOfWeek: bootcampDays,\n      courseStartIndex: startIndex,\n      totalCourseDays: bootcampData.totalCourseDays,\n      ...topLevelObject,\n    };\n  }\n\n  return topLevelObject;\n};\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj, courseType) => {\n  let weekOfCourse;\n  if (courseType.includes('Bootcamp') && companyHolidayArray.includes(dateString)) {\n    weekOfCourse = null;\n  } else {\n    weekOfCourse = week;\n  }\n\n  dateObj = {\n    courseDay: null,\n    courseDate: dateString,\n    courseWeek: weekOfCourse,\n    dayNumber: date.weekday,\n    dateTypes: {},\n  };\n\n  if (phWithoutCh.includes(dateString)) {\n    dateObj.dateTypes = publicHolidays[dateString];\n  } else {\n    dateObj.dateTypes = companyHolidays[dateString];\n  }\n\n  return dateObj;\n};\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n  // get whatever index of basicsData that is specified by courseDayCount\n\n  dateObj = {\n    courseDate: dateString,\n    courseWeek: week,\n    weekDay,\n    dayNumber: date.weekday,\n    meetingDateTimeUTC: utc,\n  };\n\n  // data is different for basics and bootcamp\n  if (courseType === 'Basics') {\n    dateObj = {\n      ...dateObj, ...basicsData.days[courseDay],\n    };\n  } else if (courseType === 'FTBC' || courseType === 'PTBC') {\n    dateObj = {\n      ...dateObj, ...bootcampData.days[courseDay],\n    };\n  }\n  return dateObj;\n};\n\n// helper function for generating filename\nconst getFilename = (startDate, endDate, courseType, batchNum) => {\n  const displayDate = DateTime.fromFormat(startDate, 'yyyy-MM-dd');\n  const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${endDate}_${courseType}${batchNum}`;\n  return displayName;\n};\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, batchNum, courseType, input, lessonDays) => {\n  // used if we are generating batch schedule straight after making changes to main json file\n  if (input) {\n    bootcampData = input;\n  } else if (courseType === 'FTBC') {\n    bootcampData = ftbcDataJson;\n  } else if (courseType === 'PTBC') {\n    bootcampData = ptbcDataJson;\n  }\n\n  console.log('lesson days', lessonDays);\n  // used to set the time for basics course\n  let basicsTimeslots;\n  if (lessonDays) {\n    if (lessonDays[0] === 1 && lessonDays[1] === 4) {\n      basicsTimeslots = ['T19:30', 'T19:30'];\n    } else if (lessonDays[0] === 7 && lessonDays[1] === 4) {\n      basicsTimeslots = ['T19:00', 'T19:30'];\n    } else {\n      basicsTimeslots = ['T19:30', 'T13:00'];\n    }\n  }\n\n  // random times, basicsTimeslots is only used for basics course\n  if (basicsTimeslots === undefined) {\n    basicsTimeslots = ['T19:30', 'T13:00'];\n  }\n\n  let date = DateTime.fromFormat(startDate, 'yyyy-MM-dd');\n  let utc;\n  utc = getLocalDateTime(utc, 'T16:00', courseType, date);\n  let dateWeek = DateTime.fromFormat(startDate, 'yyyy-MM-dd');\n  let classDatesCount = 1;\n  let week;\n  if (courseType === 'Basics') {\n    week = 0;\n  } else {\n    week = 1;\n  }\n  let weekDay = 1;\n  let data;\n  let courseDayCount;\n  // starts from 0 because it's tracking the index of the json data file\n  let courseDay = 0;\n\n  const topLevelObject = {\n    courseType,\n    days: {},\n  };\n\n  data = generateTopLevelObject(courseType, topLevelObject, lessonDays, batchNum);\n\n  // set the number of course days based on course type\n  if (courseType === 'Basics') {\n    courseDayCount = basicsData.days.length;\n  } else if (courseType === 'FTBC') {\n    courseDayCount = ftbcDataJson.days.length;\n  } else if (courseType === 'PTBC') {\n    courseDayCount = ptbcDataJson.days.length;\n  }\n\n  const dayArray = data.daysOfWeek;\n  console.log('day array', dayArray);\n  let dayIndex = data.courseStartIndex;\n\n  while (courseDayCount > 0) {\n    const dateString = date.toFormat('dd-MM-yyyy');\n\n    // setting filename from start date, end date, courseType (FTBC/PTBC/Basics), batchNum\n    // if this condition is met, dateString will be the end date of course\n    if (courseDay + 1 === data.totalCourseDays) {\n      // start date\n      data.courseName = getFilename(startDate, dateString, courseType, batchNum);\n    }\n\n    let dateObj;\n    // if date is a public holiday\n    if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n      dateObj = generateHolidayObject(dateString, week, date, dateObj, courseType);\n      // if date is not a holiday\n    } else {\n      dateObj = generateCourseDayObject(dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n      // increase course days on days that classes are held,\n      // DO NOT increase course days on holidays\n      courseDayCount -= 1;\n      courseDay += 1;\n    }\n    data.days[dateString] = dateObj;\n\n    // Check for first day of Basics course\n    const firstDay = DateTime.fromFormat(startDate, 'yyyy-MM-dd').toFormat('dd-MM-yyyy');\n    const formattedDate = date.toFormat('dd-MM-yyyy');\n\n    if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n      date = date.plus({ weeks: 1 }).set({ weekday: 1 });\n      utc = getLocalDateTime(utc, 'T19:30', courseType, date);\n      weekDay += 1;\n      week += 1;\n\n      // If last day of FTBC is not Friday, add days to schedule to end on Friday\n    } else if (courseType === 'FTBC' && data.days[date.toFormat('dd-MM-yyyy')].courseDay === 112 && date.weekday !== 2) {\n      // Get number of days to Friday\n      let differenceInDays;\n      if (date.weekday === 1) {\n        differenceInDays = 5 - date.weekday;\n      } else if (date.weekday === 5) {\n        differenceInDays = 7;\n        week += 1;\n      } else if (date.weekday === 4) {\n        differenceInDays = 8;\n      } else {\n        differenceInDays = 9;\n      }\n\n      // Get extra dates to Friday\n      const datesToAdd = [];\n      for (let i = 1; i <= differenceInDays; i += 1) {\n        const newDate = date.plus({ days: i }).toFormat('dd-MM-yyyy');\n        const newWeekday = DateTime.fromFormat(newDate, 'dd-MM-yyyy').weekday;\n        console.log('new ', newWeekday);\n        if (newWeekday < 6) {\n          datesToAdd.push(newDate);\n        }\n      }\n\n      // Put all dates to add to schedule in combinedDates array\n      // Consider possibility of public holiday occuring during those days\n      const newDateObjectsArray = [];\n      for (let k = 0; k < datesToAdd.length; k += 1) {\n        let addedCourseday;\n        if (phWithoutCh.includes(datesToAdd[k])) {\n          addedCourseday = null;\n        } else {\n          addedCourseday = 113 + k;\n        }\n        const dateInfo = {\n          date: datesToAdd[k],\n          courseday: addedCourseday,\n        };\n        newDateObjectsArray.push(dateInfo);\n      }\n      // Third-last courseday is feature freeze day\n      // Move forward if day falls on public holiday\n      let featureFreezeDay;\n      if (phWithoutCh.includes(newDateObjectsArray[newDateObjectsArray.length - 3].date)) {\n        featureFreezeDay = newDateObjectsArray[newDateObjectsArray.length - 4].date;\n      } else {\n        featureFreezeDay = newDateObjectsArray[newDateObjectsArray.length - 3].date;\n      }\n\n      // End date is project presentation day\n      // Move forward if day falls on public holiday\n      let endDate;\n      if (phWithoutCh.includes(newDateObjectsArray[newDateObjectsArray.length - 1].date)) {\n        endDate = newDateObjectsArray[newDateObjectsArray.length - 2].date;\n      } else {\n        endDate = newDateObjectsArray[newDateObjectsArray.length - 1].date;\n      }\n\n      // Find total course days after adding days\n      let lastCourseDay;\n      // Generate new dateObj\n      for (let j = 0; j < newDateObjectsArray.length; j += 1) {\n        const targetWeekday = DateTime.fromFormat(newDateObjectsArray[j].date, 'dd-MM-yyyy').weekday;\n        const newDate = DateTime.fromFormat(newDateObjectsArray[j].date, 'dd-MM-yyyy');\n        utc = getLocalDateTime(utc, 'T13:00', courseType, newDate);\n        // Helper function to add dateObj to schedule data\n        const addDateObjToSchedule = (dateObj) => {\n          data.days[newDateObjectsArray[j].date] = dateObj;\n          data.days[newDateObjectsArray[j].date].courseDay = newDateObjectsArray[j].courseday;\n        };\n\n        if (newDateObjectsArray[j].date === featureFreezeDay) {\n          dateObj = generateCourseDayObject(dateObj, newDateObjectsArray[j].date, week, targetWeekday, newDate, utc, courseType, 113);\n          addDateObjToSchedule(dateObj);\n        } else if (newDateObjectsArray[j].date === endDate) {\n          dateObj = generateCourseDayObject(dateObj, newDateObjectsArray[j].date, week, targetWeekday, newDate, utc, courseType, 115);\n          addDateObjToSchedule(dateObj);\n          lastCourseDay = dateObj.courseDay;\n          // content is the same for all other days, except if the day is a public holiday\n        } else if (phWithoutCh.includes(newDateObjectsArray[j].date)) {\n          dateObj = generateHolidayObject(newDateObjectsArray[j].date, week, newDate, dateObj, courseType);\n          addDateObjToSchedule(dateObj);\n        } else {\n          dateObj = generateCourseDayObject(dateObj, newDateObjectsArray[j].date, week, targetWeekday, newDate, utc, courseType, 114);\n          addDateObjToSchedule(dateObj);\n        }\n      }\n      data.courseName = getFilename(startDate, endDate, courseType, batchNum);\n      data.totalCourseDays = lastCourseDay;\n      break;\n    } else {\n      // First Basics class is pre-course briefing on Saturday (not included in daysOfWeek)\n      // This end of dayArray (last day of week)\n      if ((dayIndex === dayArray.length - 1)\n                || (formattedDate === firstDay && courseType === 'Basics')) {\n        weekDay = 1;\n        // Return to beginning of array (return to beginning of week)\n        dayIndex = 0;\n        date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] });\n        dateWeek = dateWeek.plus({ weeks: 1 });\n        if (!companyHolidayArray.includes(dateString)) {\n          week += 1;\n        }\n        utc = getLocalDateTime(utc, basicsTimeslots[0], courseType, date);\n      } else {\n        // Day within week\n        dayIndex += 1;\n        date = date.set({ weekday: dayArray[dayIndex] });\n        if (!phWithoutCh.includes(dateString)) {\n          weekDay += 1;\n        }\n        utc = getLocalDateTime(utc, basicsTimeslots[1], courseType, date);\n      }\n    }\n    // Increase classDatesCount regardless of whether day is public holiday\n    classDatesCount += 1;\n  }\n  console.log('data', data);\n  return data;\n};\n\nexport default generateDataObject;\n","import React, { useState } from \"react\";\nimport AddItemModal from \"./main-accordion/AddItemModal\";\nimport MainAccordion from \"./main-accordion/MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../../download\";\nimport generateDataObject from \"../../generateCourseDates\";\nimport { DateTime } from \"luxon\";\nimport fulltimeDataFile from \"../../data/schedule-templates/ftbc1.0-schedule-template.json\";\nimport partTimeDataFile from \"../../data/schedule-templates/ptbc1.0-schedule-template.json\";\n\n// helper function for cpoying data to clipboard\nconst copyToClipboard = (data) => {\n  // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n  let selBox = document.createElement(\"textarea\");\n  selBox.style.position = \"fixed\";\n  selBox.style.left = \"0\";\n  selBox.style.top = \"0\";\n  selBox.style.opacity = \"0\";\n  // this copies the JSON data to clipboard with original formatting\n  selBox.value = JSON.stringify(data, undefined, 2);\n  document.body.appendChild(selBox);\n  selBox.focus();\n  selBox.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(selBox);\n};\n\n// ############################################################################\n// ############################################################################\nconst GenerateDataShiftContent = ({\n  bootcampData,\n  setBootcampData,\n  mainFile,\n  setMainFile,\n  batchFile,\n  mainDays,\n  setMainDays,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n  batchArray,\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n  // used in the close all functionality\n  const [accordionKey, setAccordionKey] = useState(1234);\n\n  const displayDataFile = (dataFile) => {\n    console.log(\"data file\", dataFile);\n\n    setMainFile(dataFile);\n    setMainDays(dataFile.days);\n  };\n\n  // function that handles download of main data file after edits\n  const handleDownloadMainClick = async () => {\n    download(mainFile, \"modified-main-data-file.json\");\n  };\n\n  // function that handles download of individual batch data file after edits\n  const handleBatchDownloadClick = () => {\n    download(batchFile, `modified-${batchFile.courseName}-file.json`);\n  };\n\n  // state set so that rerender occurs\n  const handleCloseAll = () => {\n    const newAccordionKeyValue = accordionKey + 1;\n    setAccordionKey(newAccordionKeyValue);\n  };\n\n  // copys json data file to clipboard\n  const handleEditInGithub = (data) => {\n    copyToClipboard(data);\n\n    let gitbookUrl;\n    if (data.repoUrls) {\n      gitbookUrl = mainFile.repoUrls.edit;\n    } else {\n      gitbookUrl = `https://github.com/rocketacademy/scheduler/edit/main/src/data/${batchFile.courseName}.json`;\n    }\n    // opens a new window in the browser at specified address(gitbook edit page)\n    console.log(\"gitbook url\", gitbookUrl);\n\n    window.open(gitbookUrl, \"_blank\");\n  };\n\n  const handleBatchEdit = async (index) => {\n    try {\n      const batch = batchArray[index];\n      const startDate = DateTime.fromFormat(\n        batch.content.courseName.slice(0, 10),\n        \"dd-MM-yyyy\"\n      ).toFormat(\"yyyy-MM-dd\");\n      let courseType;\n      if (batch.name.includes(\"pt\")) {\n        courseType = \"PTBC\";\n      } else {\n        courseType = \"FTBC\";\n      }\n      const courseName =\n        batch.content.courseName[batch.content.courseName.length - 1];\n      const data = await generateDataObject(\n        startDate,\n        courseName,\n        courseType,\n        mainFile\n      );\n      copyToClipboard(data);\n      window.open(\n        `https://github.com/rocketacademy/scheduler/edit/main/src/data/${data.courseName}.json`,\n        \"_blank\"\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      {/* renders batch schedule data file  */}\n      {bootcampData &&\n        bootcampData.constructor === Object &&\n        Object.keys(bootcampData).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={() => handleEditInGithub(batchFile)}\n              >\n                Edit in GitHub Repo\n              </Button>{\" \"}\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download Modified Batch File\n              </Button>\n            </div>\n            <div className=\"close-all-container\">\n              <Button onClick={handleCloseAll}>close all</Button>\n            </div>\n            {Object.keys(bootcampData).map((day, dayIndex) => {\n              return (\n                <>\n                  <div>\n                    <MainAccordion\n                      dayIndex={dayIndex}\n                      bootcampData={bootcampData}\n                      setBootcampData={setBootcampData}\n                      day={day}\n                      setShowInputModal={setShowInputModal}\n                      setCourseDate={setCourseDate}\n                      handleCloseAll={handleCloseAll}\n                      accordionKey={accordionKey}\n                      setAccordionKey={setAccordionKey}\n                      setDaysInBatchFile={setDaysInBatchFile}\n                      setDaysInMainFile={setDaysInMainFile}\n                    />\n                  </div>\n                </>\n              );\n            })}\n            {/* modal that takes in user input to create a new item in the schedule  */}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdata={bootcampData}\n                setbootcampdata={setBootcampData}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n                setDaysInBatchFile={setDaysInBatchFile}\n                setDaysInMainFile={setDaysInMainFile}\n              />\n            )}\n          </div>\n        )}\n      {/* displays fulltime or part time data file  */}\n      <div className=\"data-button-container\">\n        <Button\n          className=\"btn btn-primary\"\n          onClick={() => displayDataFile(fulltimeDataFile)}\n        >\n          Full Time\n        </Button>\n        <Button\n          className=\"btn btn-primary\"\n          onClick={() => displayDataFile(partTimeDataFile)}\n        >\n          Part Time\n        </Button>\n      </div>\n      {bootcampData && bootcampData.constructor === Array && mainFile && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <Button\n              className=\"btn btn-primary\"\n              onClick={() => handleEditInGithub(mainFile)}\n            >\n              Edit in GitHub Repo\n            </Button>\n            <Button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </Button>\n          </div>\n          <div className=\"batchfile-edit-container\">\n            {batchArray.map((batch, index) => {\n              // different batches are shown depending on whether the data file rendered is the part time or full time one\n              if (mainFile.daysOfWeek.length < 5) {\n                return (\n                  <>\n                    {batch.name.includes(\"pt\") && (\n                      <Button\n                        className=\"batch-update\"\n                        onClick={() => handleBatchEdit(index)}\n                      >\n                        Update {batch.name}\n                      </Button>\n                    )}\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    {batch.name.includes(\"ft\") && (\n                      <Button\n                        className=\"batch-update\"\n                        onClick={() => handleBatchEdit(index)}\n                      >\n                        Update {batch.name}\n                      </Button>\n                    )}\n                  </>\n                );\n              }\n            })}\n          </div>\n          <div className=\"close-all-container\">\n            <Button onClick={handleCloseAll}>Close All</Button>\n          </div>\n          {bootcampData.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampData={bootcampData}\n                setBootcampData={setBootcampData}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n                handleCloseAll={handleCloseAll}\n                accordionKey={accordionKey}\n                setAccordionKey={setAccordionKey}\n                setDaysInMainFile={setDaysInMainFile}\n                setDaysInBatchFile={setDaysInBatchFile}\n              />\n            );\n          })}\n          {showInputModal && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdata={bootcampData}\n              setbootcampdata={setBootcampData}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n              setDaysInMainFile={setDaysInMainFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\n\n// side navbar that displays links to all batch schedules in batchArray\nfunction ActiveCourses({ batchArray, setBootcampData, setBatchFile }) {\n  const handleSelectClick = (batch) => {\n    setBootcampData(\n      JSON.parse(JSON.stringify(batch.content.days)),\n    );\n    setBatchFile(\n      JSON.parse(JSON.stringify(batch.content)),\n    );\n  };\n\n  return (\n    <div>\n      <h4>Batches</h4>\n      <Nav variant=\"pills\" className=\"flex-column \">\n        {/* a link is rendered for each element in batchArray */}\n        {batchArray.map((batch, index) => (\n          <Nav.Link\n              // when a link is clicked , the content of the selected batch file is rendered\n            onClick={() => handleSelectClick(batch)}\n            eventKey={index}\n          >\n            {batch.name}\n          </Nav.Link>\n        ))}\n      </Nav>\n    </div>\n  );\n}\n\nexport default ActiveCourses;\n","import { DateTime } from 'luxon';\n\n// timezone is manually set to 'Asia/Singapore' because we are located here\nconst timeZoneSet = 'Asia/Singapore';\n\n// helper function , generates list for pre-class, in-class, post-class\nconst generateClassList = (classList, classType) => {\n  if (classType.mdText) {\n    classList += classType.mdText;\n  }\n\n  if (classType.items.length > 0) {\n    for (let j = 0; j < classType.items.length; j += 1) {\n      if (classType.items[j].url) {\n        classList += `* [${classType.items[j].name}](${classType.items[j].url})\\n`;\n      } else {\n        classList += `* ${classType.items[j].name}\\n`;\n      }\n    }\n    classList += '\\n';\n  }\n  return classList;\n};\n\n// helper function, generates content list for each section\nconst generateSectionList = (sectionName, sectionType) => {\n  let sectionString = '';\n  if (sectionType.items.length > 0) {\n    if (sectionName === 'preclass') {\n      sectionString = '### Pre Class\\n';\n    } else if (sectionName === 'inclass') {\n      sectionString = '### In Class\\n';\n    } else if (sectionName === 'postclass') {\n      sectionString = '### Post Class\\n';\n    }\n  }\n\n  sectionString = generateClassList(sectionString, sectionType);\n  return sectionString;\n};\n\n// helper function to get arrays needed to generate markdown\nconst generateCourseArrays = (data) => {\n  // get all course dates\n  Object.keys(data.days).forEach((date) => {\n    dates.push(date);\n  });\n\n  // all possible day numbers that course days fall on\n  dates.forEach((date) => {\n    dayNumbers.push(data.days[date].dayNumber);\n  });\n  dayNumbers = [...new Set(dayNumbers)].sort();\n\n  // all possible names of days of week courdays fall on (this is the table header)\n  dayNumbers.forEach((number) => {\n    daysOfWeek.push(dayNames[number]);\n  });\n\n  // getting last week of course, + 1 because course week starts at 0\n  lastWeek = data.days[dates[dates.length - 1]].courseWeek + 1;\n\n  // getting the dates the coursedays fall on for each week\n  for (let l = 0; l < lastWeek; l += 1) {\n    const week = [];\n    for (let k = 0; k < dates.length; k += 1) {\n      console.log(data.days[dates[k]].courseWeek);\n      if (data.days[dates[k]].courseWeek === weekCount) {\n        week.push(data.days[dates[k]].courseDate);\n      }\n    }\n    weekDates.push(week);\n    weekCount += 1;\n  }\n\n  // getting rows of table\n  // for each subarray in the weekDates array, displayWeek is initialised to ['-', '-', '-']\n  for (let n = 0; n < weekDates.length; n += 1) {\n    const displayWeek = [];\n    dayNumbers.forEach((day) => {\n      displayWeek.push('-');\n    });\n\n    // each element in each subarray of weekDates is compared to the element in the same index\n    // position in dayNumbers array\n    console.log(dayNumbers);\n    for (let m = 0; m < weekDates[n].length; m += 1) {\n      for (let p = 0; p < dayNumbers.length; p += 1) {\n        console.log(data.days[weekDates[n][m]].dayNumber === dayNumbers[p]);\n        // if element.dayNumber === element at the same index position in dayNumbers array\n        if (data.days[weekDates[n][m]].dayNumber === dayNumbers[p]) {\n          if (data.days[weekDates[n][m]].dateTypes.title) {\n            // the '-' in displayWeek is replaced by the dateString\n            const dateString = DateTime.fromISO(data.days[weekDates[n][m]].meetingDateTimeUTC, { zone: timeZoneSet }).toFormat('d MMM');\n            displayWeek[p] = `[${dateString}](#course-day-${data.days[weekDates[n][m]].courseDay})`;\n          } else {\n            // if title of the day does not exist, it means it's a public holiday\n            console.log('public holiday', data.days[weekDates[n][m]].dateTypes.holidayType);\n            displayWeek[p] = `${data.days[weekDates[n][m]].dateTypes.holidayType} (${data.days[weekDates[n][m]].dateTypes.location})`;\n          }\n        }\n      }\n    }\n    tableRows.push(displayWeek);\n  }\n};\n\n// helper function that generates course days table marksown\nconst generateCourseDaysTable = (output) => {\n  // schedule table header\n  output += '| Week |';\n  for (let p = 0; p < daysOfWeek.length; p += 1) {\n    output += ` ${daysOfWeek[p]} |`;\n  }\n\n  output += '\\n| :---: |';\n  for (let r = 0; r < daysOfWeek.length; r += 1) {\n    output += ' :---: |';\n  }\n\n  output += '\\n';\n\n  // schedule table content\n  for (let q = 0; q < tableRows.length; q += 1) {\n    output += `| ${q} |`;\n    for (let r = 0; r < tableRows[q].length; r += 1) {\n      output += ` ${tableRows[q][r]} |`;\n    }\n    output += '\\n';\n  }\n  return output;\n};\n\n// helper function that produces the main content of the page (in markdown)\nconst generateCourseData = (output, data) => {\n  // loop that generates the main part of the page\n  for (let i = 0; i < Object.keys(data.days).length; i += 1) {\n    let localDate;\n    // course day\n    if (data.days[dates[i]].meetingDateTimeUTC) {\n      // getting the date/time from utc string, timezone is manually set\n      localDate = DateTime.fromISO(data.days[dates[i]].meetingDateTimeUTC, { zone: timeZoneSet });\n      const formattedDate = localDate.toFormat('EEE d MMM');\n      output += `# ${formattedDate}, Week ${data.days[dates[i]].courseWeek}, Course Day ${data.days[dates[i]].courseDay}<a href=\"course-day-${data.days[dates[i]].courseDay}\" id=\"course-day-${data.days[dates[i]].courseDay}\"></a>:`;\n      // adding title to heading\n      output += ` ${data.days[dates[i]].dateTypes.title}\\n`;\n      // getting meeting time\n      const localTime = localDate.toFormat('t');\n      output += `Meeting time: ${localTime} `;\n      const timeZone = localDate.toFormat('z');\n      // luxon does not provide abbreviated localised timezones\n      if (timeZone === 'Asia/Singapore') {\n        output += 'SGT ';\n      }\n      const timeOffset = localDate.toFormat('ZZZZ');\n      output += `(${timeOffset})\\n\\n`;\n    } else {\n      // public holiday, as public holiday has no meeting time\n      localDate = DateTime.fromFormat(data.days[dates[i]].courseDate, 'dd-MM-yyyy').toFormat('EEE, d MMM');\n      output += `# ${localDate}: `;\n      if (data.days[dates[i]].dateTypes.location === 'SG') {\n        output += 'Singapore ';\n      }\n      output += `${data.days[dates[i]].dateTypes.holidayType}, ${data.days[dates[i]].dateTypes.name}`;\n    }\n\n    // generate day's course material\n    const generalDateTypes = data.days[dates[i]].dateTypes.general;\n    const projectDateTypes = data.days[dates[i]].dateTypes.projects;\n\n    if (projectDateTypes) {\n      if (projectDateTypes.projectDue.items) {\n        output += '### Project Due\\n';\n        output += `[${projectDateTypes.projectDue.items[0].name}](${projectDateTypes.projectDue.items[0].url})\\n\\n`;\n      }\n    }\n\n    if (generalDateTypes) {\n      const sectionNames = ['preclass', 'inclass', 'postclass'];\n      const sectionTypes = [generalDateTypes.preClass, generalDateTypes.inClass, generalDateTypes.postClass];\n      for (let t = 0; t < sectionNames.length; t += 1) {\n        output += generateSectionList(sectionNames[t], sectionTypes[t]);\n      }\n    }\n\n    if (projectDateTypes) {\n      if (projectDateTypes.projectStart.items) {\n        if (projectDateTypes.projectStart.items.length > 0) {\n          output += '### Project Start\\n';\n          output += `[${projectDateTypes.projectStart.items[0].name}](${projectDateTypes.projectStart.items[0].url})\\n\\n`;\n        }\n      }\n    }\n    output += '\\n\\n';\n  }\n  return output;\n};\n\nconst dayNames = {\n  1: 'Monday',\n  2: 'Tuesday',\n  3: 'Wednesday',\n  4: 'Thursday',\n  5: 'Friday',\n  6: 'Saturday',\n  7: 'Sunday',\n};\n\n/* ###################################################\n######################################################\n################################################### */\n\nconst dates = [];\nlet dayNumbers = [];\nconst daysOfWeek = [];\nconst weekDates = [];\nlet weekCount = 0;\nlet lastWeek;\nconst tableRows = [];\n\nconst generateBasicsMarkdown = (data) => {\n  // generate all arrays needed to produce markdown\n  generateCourseArrays(data);\n\n  // initialize output\n  let output = '---\\ndescription: What and when we will learn\\n---\\n# Course Dates\\n';\n\n  // add course table to output\n  output = generateCourseDaysTable(output);\n  output += '\\n';\n\n  // add course data to output\n  output = generateCourseData(output, data);\n\n  // add further reading section to the end of page\n  output += '# Further Reading\\n### Past Projects\\n * [Drawing With Emojis](https://basics.rocketacademy.co/past-projects/drawing-with-emojis)\\n * [Guess The Word](https://basics.rocketacademy.co/past-projects/guess-the-word)';\n\n  console.log(output);\n  return output;\n};\n\nexport default generateBasicsMarkdown;\n","import React, { useState } from \"react\";\nimport generateDataObject from \"../../../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../../../download.js\";\nimport generateBasicsMarkdown from \"../../../generateBasicsMarkdown.js\";\n\nconst DatePicker = ({ \n  setBootcampData, \n  setBatchFile\n }) => {\n    // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n  const [firstDay, setFirstDay] = useState(null);\n  const [secondDay, setSecondDay] = useState(null);\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = () => {\n    const data = generateDataObject(startDate, courseName, courseType, null, null);\n    download(data, `${data.courseName}.json`);\n  };\n\n  // function that generates and renders schedule data when button is clicked\n  const handleRender = () => {\n    const data = generateDataObject(startDate, courseName, courseType, null, null);\n    console.log('batch 4 data', data);\n    setBootcampData(JSON.parse(JSON.stringify(data.days)));\n    setBatchFile(JSON.parse(JSON.stringify(data)))\n  };\n\n  const addToGitHubRepo = () => {\n      const data = generateDataObject(startDate, courseName, courseType, null, null);\n      console.log('data', data);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      // this copies the JSON data to clipboard with original formatting\n      selBox.value = JSON.stringify(data, undefined, 2);\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/scheduler/new/main/src/data', \"_blank\");\n  }\n\n  const generateMarkdown = () => {\n      const dayNumbers = {\n        'Monday': 1,\n        'Tuesday': 2,\n        'Wednesday': 3,\n        'Thursday': 4,\n        'Friday': 5,\n        'Saturday': 6,\n        'Sunday': 7\n      };\n\n      const lessonDays = [dayNumbers[firstDay], dayNumbers[secondDay]];\n      let data = generateDataObject(startDate, courseName, courseType, null, lessonDays);\n      data = generateBasicsMarkdown(data);\n      console.log('data', data);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      selBox.value = data;\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/basics-docs/new/master/course-logistics', \"_blank\")\n    }\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <div className=\"input-fields\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"course-type\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"FTBC\">FTBC</option>\n                <option value=\"PTBC\">PTBC</option>\n              </Form.Select>\n            </Form.Group>\n            </div>\n            {courseType === 'Basics' && (\n              <div className=\"basics-days\">\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>1st Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-1\"\n                    onChange={(e) => setFirstDay(e.target.value)}\n                  >\n                    <option>Select day</option>\n                    <option value=\"Monday\">Monday</option>\n                    <option value=\"Tuesday\">Tuesday</option>\n                    <option value=\"Wednesday\">Wednesday</option>\n                    <option value=\"Thursday\">Thursday</option>\n                    <option value=\"Friday\">Friday</option>\n                    <option value=\"Saturday\">Saturday</option>\n                    <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>2nd Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-2\"\n                    onChange={(e) => setSecondDay(e.target.value)}\n                  >\n                  <option>Select day</option>\n                  <option value=\"Monday\">Monday</option>\n                  <option value=\"Tuesday\">Tuesday</option>\n                  <option value=\"Wednesday\">Wednesday</option>\n                  <option value=\"Thursday\">Thursday</option>\n                  <option value=\"Friday\">Friday</option>\n                  <option value=\"Saturday\">Saturday</option>\n                  <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n              </div>\n            )}\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                handleRender();\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                handleDownload();\n              }}\n            >\n              Download Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                addToGitHubRepo();\n              }}\n            >\n              Add to GitHub Repo\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                generateMarkdown();\n              }}\n            >\n              Basics Markdown\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport GenerateDataShiftContent from \"../GenerateDataShiftContent\";\nimport ActiveCourses from \"./ActiveCourses.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ \n  batchArray, \n  bootcampData, \n  setBootcampData, \n  setBatchFile, \n  batchFile, \n  setDaysInBatchFile, \n  setDaysInMainFile\n }) => {\n \n  return (\n    <>\n      <div className=\"datashift-container\">\n        <div className=\"all-courses-navbar\">\n          {/* this component contains links to indivudual batch schedules to be rendered and edited */}\n          <ActiveCourses\n            batchArray={batchArray}\n            setBootcampData={setBootcampData}\n            setBatchFile={setBatchFile}\n          />\n        </div>\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            {/* this component generates a course schedule based on start date and course type from the main json data file */}\n            <DatePicker\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              setBatchFile={setBatchFile}\n            />\n            {/* this component allows the user to edit the schedule rendered */}\n            <GenerateDataShiftContent\n              batchArray={batchArray}\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              batchFile={batchFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n              setDaysInMainFile={setDaysInMainFile}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DataShift from \"./data-shift/DataShift\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = ({ batchArray }) => {\n  const [key, setKey] = useState(\"datePicker\");\n\n  // remains empty until user picks/ generates schedule to edit. this is the days section of the batch data file\n  const [batchDays, setBatchDays] = useState({});\n  // this is the whole data file\n  const [batchFile, setBatchFile] = useState({});\n\n  // this is the main bootcamp data json file that has not been mapped onto any dates\n  const [mainFile, setMainFile] = useState();\n  // this is the course days section of the bootcamp data json file\n  const [mainDays, setMainDays] = useState();\n  // helper function for setting state (mainFile)\n  const setDaysInMainFile = (mainDays) => {\n    setMainFile({ ...mainFile, days: mainDays });\n  };\n\n  // helper function for setting state (batchFile)\n  const setDaysInBatchFile = (batchDays) => {\n    setBatchFile({ ...batchFile, days: batchDays });\n  };\n\n  return (\n    <div className=\"container\">\n      <Tabs\n        id=\"controlled-tab-example\"\n        activeKey={key}\n        onSelect={(k) => setKey(k)}\n        className=\"\"\n      >\n        {/* this tab contains the component for editing the main data file */}\n        <Tab eventKey=\"datePicker\" title=\"Main\">\n          <GenerateDataShiftContent\n            bootcampData={mainDays}\n            setBootcampData={setMainDays}\n            mainFile={mainFile}\n            setMainFile={setMainFile}\n            mainDays={mainDays}\n            setMainDays={setMainDays}\n            setDaysInBatchFile={setDaysInBatchFile}\n            setDaysInMainFile={setDaysInMainFile}\n            batchArray={batchArray}\n          />\n        </Tab>\n        {/* this tab contains the component for generating/ editing individual batch schedules */}\n        <Tab eventKey=\"dataShift\" title=\"Batch\">\n          <DataShift\n            batchArray={batchArray}\n            bootcampData={batchDays}\n            setBootcampData={setBatchDays}\n            setBatchFile={setBatchFile}\n            batchFile={batchFile}\n            setDaysInBatchFile={setDaysInBatchFile}\n            setDaysInMainFile={setDaysInMainFile}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default TabsContainer;\n","import React from 'react';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport ftbc6 from './data/10-01-2022_01-07-2022_FTBC6.json';\nimport ftbc7 from './data/28-03-2022_15-09-2022_FTBC7.json';\nimport ptbc1 from './data/17-08-2021_13-08-2022_PTBC1.json';\nimport ptbc2 from './data/16-11-2021_12-11-2022_PTBC2.json';\nimport ptbc3 from './data/12-03-2022_18-02-2023_PTBC3.json';\n\nimport ScheduleContainer from './components/schedules/ScheduleContainer';\nimport TabsContainer from './components/admin/Tabs';\n\nfunction App() {\n  // Create array of batch data for components for /schedule and /admin\n  const batchArray = [\n    { name: 'ptbc1', content: ptbc1 },\n    { name: 'ptbc2', content: ptbc2 },\n    { name: 'ptbc3', content: ptbc3 },\n    // { name: 'ptbc3New', content: ptbc3New },\n    { name: 'ftbc6', content: ftbc6 },\n    { name: 'ftbc7', content: ftbc7 }];\n  // { name: 'ftbc7New', content: ftbc7New }];\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          {/* route that takes user to part of app that edits course schedules */}\n          <Route path=\"/admin\">\n            <TabsContainer batchArray={batchArray} />\n          </Route>\n          {/* route that takes user to part of app that displays batch schedules for student use */}\n          <Route path=\"/\">\n            <ScheduleContainer batchArray={batchArray} />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}