{"version":3,"sources":["components/schedules/GenerateCourseDayHeader.jsx","assets/4-MILK.png","components/schedules/DisplaySection.jsx","components/schedules/GenerateNotifications.jsx","generateSectionArray.js","components/schedules/GenerateDatetypeSections.jsx","components/schedules/GenerateCourseDayContent.jsx","components/schedules/schedule-table/TableSectionContent.jsx","components/schedules/schedule-table/TableClass.jsx","components/schedules/schedule-table/TableProjects.jsx","components/schedules/schedule-table/ScheduleTable.jsx","generateTableData.js","components/schedules/schedule-table/ContentTable.jsx","components/schedules/current-day/CurrentDaySection.jsx","components/schedules/ScheduleContent.jsx","components/schedules/sidebar/ModuleSection.jsx","components/schedules/sidebar/Modules.jsx","components/schedules/sidebar/CourseWeeks.jsx","components/schedules/sidebar/SideBar.jsx","components/schedules/BatchSchedule.jsx","components/schedules/ScheduleContainer.jsx","components/admin/main-accordion/AddItemModal.jsx","components/admin/main-accordion/inner-accordion/ShiftItemModal.jsx","components/admin/main-accordion/inner-accordion/ClassItem.jsx","components/admin/main-accordion/inner-accordion/SectionClass.jsx","components/admin/main-accordion/inner-accordion/Section.jsx","components/admin/main-accordion/MainAccordion.jsx","download.js","generateCourseDates.js","components/admin/GenerateDataShiftContent.jsx","components/admin/data-shift/ActiveCourses.jsx","generateBasicsMarkdown.js","components/admin/data-shift/DatePicker.jsx","components/admin/data-shift/DataShift.jsx","components/admin/Tabs.jsx","App.js","index.js"],"names":["localDate","formattedDate","meetingTime","timeZone","timeOffset","holiday","NormalCourseDay","todaySectionHeader","day","timeZoneSet","DateTime","fromISO","meetingDateTimeUTC","zone","toFormat","className","courseWeek","courseDay","dateTypes","module","HolidayCourseDay","fromFormat","courseDate","holidayType","location","name","GenerateCourseDayHeader","DisplaySection","heading","sectionType","map","item","index","id","dayNumber","url","href","target","rel","GenerateNotifications","status","projectdue","ipdue","projectstart","items","generateSectionArray","datetype","classType","sectionArray","Object","keys","forEach","section","classTypeSection","preClass","inClass","postClass","x","length","push","GenerateDatetypeSections","GenerateCourseDayContent","projects","projectDue","projectStart","ip","ipDue","undefined","TableSectionContent","TableClass","sectionClass","classArray","TableProjects","ScheduleTable","weekNumbers","tableData","coursetype","today","Accordion","Header","now","num","Body","Table","bordered","hover","size","date","onClick","scroller","scrollTo","smooth","offset","duration","generateTableData","scheduleData","setWeekNumbers","setTableData","firstDay","moveDate","lastDay","firstDayMonth","lastDayMonth","moveDateMonth","startOf","endOf","weekDatesArray","plus","days","monthDatesArray","currentWeekData","currentMonthData","i","includes","ContentTable","startDay","useState","useEffect","CurrentDaySection","nextDay","previousDayId","currentDayId","firstDayOfCourse","previousDay","dayBefore","weekday","weeks","set","minus","findPreviousDay","findNextDay","ScheduleContent","nextToday","title","months","defaultActiveKey","Item","eventKey","ModuleSection","sectionNames","info","Modules","moduleNameArray","scheduleUrls","scheduleObjs","filter","classtype","itemUrlArray","split","generatingDataArrays","accessingRequiredItems","sort","Nav","moduleName","general","poce","ice","urlObj","splitName","dataObj","sortScheduleObjs","CourseWeeks","CurrentWeekDiv","ref","currentWeekRef","current","scrollIntoView","block","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","useRef","variant","navbarScroll","Link","week","navId","sidebarId","SideBar","BatchSchedule","data","JSON","parse","stringify","courseType","courseDatesArray","a","b","ScheduleContainer","batchArray","Navbar","bg","Brand","src","logo","alt","batch","as","to","toUpperCase","exact","path","content","AddItemModal","show","onHide","bootcampdata","coursedate","setDaysInBatchFile","setDaysInMainFile","setTitle","setUrl","setSection","setSectionClass","Modal","centered","closeButton","Title","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","e","Select","Button","preventDefault","newItem","constructor","Array","handleAddItem","Footer","ShiftItemModal","shiftitem","sectiontype","setbootcampdata","classindex","selectedDate","setSelectedDate","dates","selectedItem","splice","targetDay","handleSubmitDate","shiftOneDay","direction","bootcampData","dayIndex","classIndex","bootcampDataArray","holidayDates","holidayData","ClassItem","setBootcampData","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","datesArray","addDates","indexOf","addIndex","SectionClass","sectionclass","sectionIndex","handleClassShift","selectedSection","element","shiftSection","Section","classExists","MainAccordion","setShowInputModal","setCourseDate","accordionKey","handleCloseAll","setAccordionKey","console","log","handlePlusClick","download","filename","dataStr","encodeURIComponent","dlAnchorElem","document","createElement","setAttribute","click","publicHolidays","publicHolidayArray","key","schoolHolidays","schoolHolidayArray","winterBreak","publicHolidaysNotSchoolHolidays","getLocalDateTime","utc","timeString","changedFormat","toUTC","toISO","generateHolidayObject","dateString","dateObj","generateCourseDayObject","weekDay","basicsData","getFilename","startDate","endDate","batchNum","displayDate","generateDataObject","input","lessonDays","ftbcDataJson","ptbcDataJson","basicsTimeslots","currDate","courseDayCount","dateWeek","classDatesCount","topLevelObject","daysOfWeek","courseStartDaysOfWeekIndex","totalCourseDays","generateTopLevelObject","dayArray","courseName","differenceInDays","datesToAdd","newDate","newDateObjectsArray","k","addedCourseday","dateInfo","courseday","featureFreezeDay","lastCourseDay","j","targetWeekday","addDateObjToSchedule","copyToClipboard","selBox","style","position","left","top","opacity","body","appendChild","focus","select","execCommand","removeChild","GenerateDataShiftContent","mainFile","setMainFile","batchFile","setMainDays","mainDays","showInputModal","displayDataFile","dataFile","handleDownloadMainClick","handleEditInGithub","gitbookUrl","repoUrls","edit","window","open","handleBatchEdit","slice","fulltimeDataFile","partTimeDataFile","ActiveCourses","lastWeek","setBatchFile","handleSelectClick","generateSectionList","sectionName","sectionString","classList","mdText","generateClassList","dayNames","dayNumbers","weekDates","weekCount","tableRows","generateBasicsMarkdown","Set","number","l","n","displayWeek","m","p","generateCourseArrays","output","r","q","generateCourseDaysTable","localTime","generalDateTypes","projectDateTypes","sectionTypes","t","generateCourseData","DatePicker","setStartDate","setCourseName","setCourseType","setFirstDay","secondDay","setSecondDay","handleRender","handleDownload","addToGitHubRepo","generateMarkdown","DataShift","TabsContainer","setKey","batchDays","setBatchDays","Tabs","activeKey","onSelect","Tab","App","ftbc6","ftbc7","ptbc1","ptbc2","ptbc4","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.337b9aea.chunk.js","sourcesContent":["import React from 'react';\nimport { DateTime } from 'luxon';\n\n// Generate course day header for normal course day\nfunction NormalCourseDay({ todaySectionHeader, day, timeZoneSet }) {\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat('EEE d MMM');\n  meetingTime = localDate.toFormat('t');\n  timeOffset = localDate.toFormat('ZZZZ');\n  timeZone = localDate.toFormat('z');\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header-div\">\n          <div className=\"main-header\">\n            {!todaySectionHeader ? (\n              <h3 className=\"day-header\">\n                {formattedDate}\n                , Week\n                {' '}\n                {day.courseWeek}\n                , Course Day\n                {' '}\n                {day.courseDay}\n              </h3>\n            ) : (\n              <h3 className=\"day-header\">{formattedDate}</h3>\n            )}\n          </div>\n          <p>\n            Meeting Time:\n            {' '}\n            {meetingTime}\n            {' '}\n            SGT (\n            {timeOffset}\n            )\n          </p>\n          {day.courseDay > 0 && (\n            <p>{day.dateTypes.module}</p>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\n// helper function that generates courseday header for a holiday\nfunction HolidayCourseDay({ day, timeZoneSet }) {\n  localDate = DateTime.fromFormat(day.courseDate, 'dd-MM-yyyy');\n  formattedDate = localDate.toFormat('EEE d MMM');\n  timeZone = localDate.toFormat('z');\n  // depending on if the holiday is a public/school holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === 'public holiday') {\n    holiday = `${day.dateTypes.location} Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = 'School Holiday';\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>\n            {`${formattedDate}: ${holiday}`}\n          </h2>\n        </div>\n      )}\n    </>\n  );\n}\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nfunction GenerateCourseDayHeader({ todaySectionHeader, day }) {\n  // this is the timezone of the area we are in\n  const timeZoneSet = 'Asia/Singapore';\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  }\n  return (\n    <HolidayCourseDay\n      todaySectionHeader={todaySectionHeader}\n      day={day}\n      timeZoneSet={timeZoneSet}\n    />\n  );\n}\n\nexport default GenerateCourseDayHeader;\n","export default __webpack_public_path__ + \"static/media/4-MILK.46ae71aa.png\";","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h6 className=\"class-header\">{heading}</h6>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function of sidebar modules\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          } else if (heading === \"In Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gic-${index}`;\n          } else {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpostc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\n\n// if sections project due/ project start/ ip due exist in a course day,\n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({\n  status,\n  projectdue,\n  ipdue,\n  projectstart,\n  day,\n}) => {\n  let heading;\n\n  // generates header for the section\n  if (status) {\n    if (status.items) {\n      if (status === projectdue) {\n        heading = \"Project Due\";\n      } else if (status === projectstart) {\n        heading = \"Project Start\";\n      } else if (status === ipdue) {\n        heading = \"Inteview Prep due\";\n      }\n    }\n  }\n\n  return (\n    <>\n      {status && status.items && (\n        status.items.map((item) => {\n          return (\n            <li>\n              <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"notification-item\"><h6>{item.name}</h6></a>\n            </li>\n          )\n        })\n        // <div className=\"notifications\">\n        //   <DisplaySection\n        //     heading={heading}\n        //     sectionType={status.items}\n        //     day={day}\n        //   />\n        // </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateNotifications;\n","const generateSectionArray = (datetype, classType, sectionArray) => {\n  Object.keys(datetype).forEach((section) => {\n    let classTypeSection;\n    // classTypeSection is determined by what classType is\n    if (classType === 'preClass') {\n      classTypeSection = datetype[section].preClass;\n    } else if (classType === 'inClass') {\n      classTypeSection = datetype[section].inClass;\n    } else {\n      classTypeSection = datetype[section].postClass;\n    }\n\n    if (classTypeSection) {\n      // if there are items in classTypeSection, the items are pushed into sectionArray\n      if (classTypeSection.items) {\n        for (let x = 0; x < classTypeSection.items.length; x += 1) {\n          sectionArray.push(classTypeSection.items[x]);\n        }\n      }\n    }\n  });\n  return sectionArray;\n};\n\nexport default generateSectionArray;\n","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  let projectdue;\n  let projectstart;\n  let ipdue;\n  if (!day.dateTypes.holidayType) {\n    if (day.dateTypes.projects) {\n      projectdue = day.dateTypes.projects.projectDue;\n      projectstart = day.dateTypes.projects.projectStart;\n    }\n\n    if (day.dateTypes.ip) {\n      ipdue = day.dateTypes.ip.ipDue;\n    }\n  }\n \n\n  return (\n    <>\n      {/* project due notification  */}\n      {projectdue !== undefined && (\n        <GenerateNotifications\n        status={projectdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n      {/* career prep due notification  */}\n      {ipdue !== undefined && (\n        <GenerateNotifications\n        status={ipdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      {projectstart !== undefined && (\n        <GenerateNotifications\n        status={projectstart}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../../../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from '../GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    \n    let projectdue;\n    let projectstart;\n    let ipdue;\n\n    if(!day.dateTypes.holidayType) {\n        if (day.dateTypes.projects) {\n        projectdue = day.dateTypes.projects.projectDue;\n        projectstart = day.dateTypes.projects.projectStart;\n        }\n\n        if (day.dateTypes.ip) {\n        ipdue = day.dateTypes.ip.ipDue;\n        }\n    }\n    \n    return (\n        <div className=\"table-projects\">\n            {projectdue !== undefined && (\n                <GenerateNotifications\n                status={projectdue}\n                ipdue={ipdue}\n                projectdue={projectdue}\n                projectstart={projectstart}\n                day={day}\n            />\n            )}\n            {projectstart !== undefined && (\n                <GenerateNotifications\n                status={projectstart}\n                ipdue={ipdue}\n                projectdue={projectdue}\n                projectstart={projectstart}\n                day={day}\n            />\n            )}\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React from 'react';\nimport { scroller } from 'react-scroll';\nimport Table from 'react-bootstrap/Table';\nimport { DateTime } from 'luxon';\nimport Accordion from 'react-bootstrap/Accordion';\nimport TableClass from './TableClass';\nimport TableProjects from './TableProjects';\n\nfunction ScheduleTable({\n  weekNumbers, tableData, coursetype, today,\n}) {\n  return (\n    <>\n      <Accordion.Header>\n        <h5>\n          {/* header shows different info depending on date and coursetype  */}\n          {coursetype === 'ft'\n            && today.toFormat('dd-MM-yyyy')\n              === DateTime.now().toFormat('dd-MM-yyyy') && (\n              <>\n                Current Course Week:\n                {' '}\n                {weekNumbers.map((num) => <span>{num}</span>)}\n              </>\n          )}\n          {coursetype === 'ft'\n            && today.toFormat('dd-MM-yyyy')\n              !== DateTime.now().toFormat('dd-MM-yyyy') && (\n              <>\n                Next Course Week:\n                {' '}\n                {weekNumbers.map((num) => <span>{num}</span>)}\n              </>\n          )}\n          {coursetype === 'pt' && (\n          <>Current Month's Schedule</>\n          )}\n        </h5>\n      </Accordion.Header>\n      <Accordion.Body>\n        <Table bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th />\n              <th>Projects</th>\n              <th>Pre Class</th>\n              <th>In Class</th>\n              <th>Post Class</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((date, index) => {\n              // getting the formatted date that will be shown in the table\n              const formattedDate = DateTime.fromFormat(\n                date.courseDate,\n                'dd-MM-yyyy',\n              ).toFormat('EEE d MMM');\n              // getting the id that links formattedDate to element in main content page\n              const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n              return (\n                <tr\n                  className={\n                    today.toFormat('dd-MM-yyyy')\n                      === DateTime.now().toFormat('dd-MM-yyyy')\n                    && date.courseDate === today.toFormat('dd-MM-yyyy')\n                      ? 'table-secondary'\n                      : null\n                  }\n                >\n                  <td\n                    // library react-scroll used to scroll to an element with matching id on main page\n                    className=\"table-date\"\n                  >\n                    <h6\n                      onClick={() => scroller.scrollTo(id, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })}\n                    >\n                      {formattedDate}\n                    </h6>\n                    <p>\n                      Week\n                      {' '}\n                      {date.courseWeek}\n                      <br />\n                      Course Day\n                      {' '}\n                      {date.courseDay}\n                    </p>\n                  </td>\n                  {/* getting data for projects section of table */}\n                  <td>\n                    <TableProjects day={tableData[index]} />\n                  </td>\n                  {/* getting data for preclass and inclass section of table */}\n                  <TableClass day={tableData[index]} sectionClass=\"preClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"inClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"postClass\" />\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Accordion.Body>\n    </>\n  );\n}\n\nexport default ScheduleTable;\n","// function that generates data required for rendering schedule table\nconst generateTableData = (scheduleData, coursetype, weekNumbers, tableData, setWeekNumbers, setTableData, today) => {\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let firstDayMonth;\n  let lastDayMonth;\n  let moveDateMonth;\n  weekNumbers = [];\n  // shows current month for part time bootcamp\n  firstDayMonth = today.startOf('month');\n  lastDayMonth = today.endOf('month');\n\n  // shows current week for full time bootcamp\n  firstDay = today.startOf('week');\n  lastDay = today.endOf('week');\n\n  moveDate = firstDay;\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day of week inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat('dd-MM-yyyy'));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  moveDateMonth = firstDayMonth;\n\n  const monthDatesArray = [];\n  if (coursetype === 'pt') {\n    // getting all the dates between first day and last day of week inclusive and storing them in an array\n    while (moveDateMonth <= lastDayMonth) {\n      monthDatesArray.push(moveDateMonth.toFormat('dd-MM-yyyy'));\n      moveDateMonth = moveDateMonth.plus({ days: 1 });\n    }\n  }\n\n  const currentWeekData = [];\n  const currentMonthData = [];\n\n  // getting the data (object) for each individual day of the month (used for pt schedule table)\n  if (coursetype === 'pt') {\n    for (let i = 0; i < monthDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === monthDatesArray[i]) {\n          currentMonthData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentMonthData);\n  } else {\n    // getting the data (object) for each individual day of the week\n    for (let i = 0; i < weekDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === weekDatesArray[i]) {\n          currentWeekData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentWeekData);\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  weekDatesArray.forEach((date) => {\n    if (\n      scheduleData[date]\n      && !weekNumbers.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumbers.push(scheduleData[date].courseWeek);\n    }\n  });\n  setWeekNumbers(weekNumbers);\n};\n\nexport default generateTableData;\n","import React, { useEffect, useState } from \"react\";\nimport ScheduleTable from \"./ScheduleTable\";\nimport generateTableData from \"../../../generateTableData\";\n\nconst ContentTable = ({ scheduleData, coursetype, startDay }) => {\n  const [weekNumbers, setWeekNumbers] = useState();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    generateTableData(\n      scheduleData,\n      coursetype,\n      weekNumbers,\n      tableData,\n      setWeekNumbers,\n      setTableData,\n      startDay\n    );\n  }, [scheduleData]);\n\n  return (\n    <div className=\"schedule-table\">\n      {/* table which displays current week's/ month's content based on course type */}\n      {weekNumbers && tableData && (\n        <ScheduleTable\n          weekNumbers={weekNumbers}\n          tableData={tableData}\n          coursetype={coursetype}\n          today={startDay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContentTable;\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayHeader from \"../GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"../GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"../GenerateDatetypeSections\";\nimport { DateTime } from \"luxon\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let dayBefore;\n\n  if (coursetype === \"ft\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 1) {\n      dayBefore = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      dayBefore = today.plus({ days: -2 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.plus({ days: -1 }).toFormat('dd-MM-yyyy');\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 2) {\n      dayBefore = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 2 && today.weekday <= 6) {\n      dayBefore = today.set({ weekday: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[dayBefore] && scheduleData[dayBefore].dateTypes.holidayType) {\n    dayBefore = DateTime.fromFormat(dayBefore, 'dd-MM-yyyy').minus({ days: 2 }).toFormat('dd-MM-yyyy');\n  }\n\n  return dayBefore;\n};\n\n//helper function that finds next course day\nconst findNextDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let nextDay;\n\n  if (coursetype === \"ft\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      nextDay = today.plus({ days: 1}).toFormat('dd-MM-yyyy');\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 2) {\n      nextDay = today.toFormat('dd-MM-yyyy');\n    } else if (today.weekday > 2 && today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[nextDay] && scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = DateTime.fromFormat(nextDay, 'dd-MM-yyyy').plus({ days: 1 }).toFormat('dd-MM-yyyy');\n    // console.log('next day', nextDay);\n    // nextDay = findNextDay(scheduleData, nextDay, coursetype, firstDayOfCourse);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentDaySection({ scheduleData, coursetype, today, firstDayOfCourse }) {\n\n  // indicates whether or not courseweek and course day is shown on the courseday header\n  const todaySectionHeader = true;\n  let previousDay = null;\n  let nextDay;\n  let previousDayId;\n  let currentDayId; \n\n  // finds previous course day, only applicable if course has already started\n  if (DateTime.now() > firstDayOfCourse) {\n    previousDay = findPreviousDay(scheduleData, today, coursetype, firstDayOfCourse);\n    nextDay = findNextDay(scheduleData, today, coursetype, firstDayOfCourse);\n\n    if(scheduleData[previousDay]) {\n      previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n    }\n\n    if(scheduleData[nextDay]) {\n      currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n    }\n  } else {\n    nextDay = firstDayOfCourse.toFormat('dd-MM-yyyy');\n  }\n\n  return (\n    <div>\n      <div className=\"today-date\">\n        {scheduleData[nextDay] && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"main-header-course-day\">\n              <h5>\n                Current Course Day:{\" \"}\n                {/* shows either today's content or next course day's content depending on if today's content exists  */}\n                {scheduleData[today.toFormat(\"dd-MM-yyyy\")] ? (\n                  <span>\n                    {scheduleData[today.toFormat(\"dd-MM-yyyy\")].courseDay}\n                  </span>\n                ) : (\n                  <span> {scheduleData[nextDay].courseDay}</span>\n                )}\n              </h5>\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(currentDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Current Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(previousDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Previous Course Day:\n                  </h5>\n                  <br></br>\n                  {scheduleData[previousDay] && (\n                    <GenerateDatetypeSections\n                    datetype={scheduleData[previousDay].dateTypes}\n                    classType=\"postClass\"\n                    day={scheduleData[previousDay]}\n                  />\n                  )}\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDaySection;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport ContentTable from \"./schedule-table/ContentTable\";\nimport { scroller } from \"react-scroll\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport CurrentDaySection from \"./current-day/CurrentDaySection\";\nimport { DateTime } from \"luxon\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title, today, firstDayOfCourse }) {\n  // used by scrollTo function to identify where to scroll to from the up arrow at the bottom of the screen\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  // let today = DateTime.now();\n\n  // // checking if first day of course is after today, if so today = first day of course, so that current day\n  // // section and tables and display first day/ weeks info\n  // const courseDatesArray = [];\n  // Object.keys(scheduleData).map((day) => {\n  //   courseDatesArray.push(day);\n  // });\n  // courseDatesArray.sort(function(a, b){return a-b});\n  // const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  // if (today < firstDayOfCourse) {\n  //   today = firstDayOfCourse;\n  // }\n\n  let nextToday;\n  if (coursetype === \"ft\") {\n    nextToday = today.plus({ weeks: 1 });\n  } else {\n    nextToday = today.plus({ months: 1 });\n  }\n  \n  return (\n    <div className=\"content\">\n      {/* button that takes user back to the top of the page  */}\n      <div\n        className=\"up-arrow\"\n        onClick={() =>\n          scroller.scrollTo(id, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        <ExpandLessIcon />\n      </div>\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n     \n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentDaySection\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n      <div className=\"schedule-accordion-container\">\n        <Accordion className=\"current-week-accordion\" defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <ContentTable\n              scheduleData={scheduleData}\n              coursetype={coursetype}\n              startDay={today}\n            />\n          </Accordion.Item>\n        </Accordion>\n        <Accordion className=\"current-week-accordion\">\n          {coursetype === \"ft\" && (\n            <Accordion.Item eventKey=\"0\">\n              <ContentTable\n                scheduleData={scheduleData}\n                coursetype={coursetype}\n                startDay={nextToday}\n              />\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </div>\n      <div className=\"schedule-list\">\n        <h1>Full Schedule</h1>\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { scroller } from 'react-scroll';\n\nfunction ModuleSection({ \n                    section, \n                    index, \n                    sectionNames, \n                    coursetype, \n                    scheduleData \n                }) {\n    return (\n        <>\n        {section.length > 1 && (\n        <Accordion.Item eventKey={index}>\n            <Accordion.Header>{sectionNames[index]}</Accordion.Header>\n            <Accordion.Body>\n            {section.map((info) => {\n            const id = `${coursetype}-week-${scheduleData[info.date].courseWeek}-day-${scheduleData[info.date].dayNumber}`;\n    \n                return (\n                <p onClick={() =>\n                scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                })\n                }\n                >\n                {info.name}\n                </p>\n                )\n            })}\n            </Accordion.Body>\n        </Accordion.Item>\n        )}\n        </>\n    )\n}\n\nexport default ModuleSection\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport ModuleSection from \"./ModuleSection\";\n\n// helper function for generating scheduleObjs array and moduleNameArray\nconst generatingDataArrays = (\n                              scheduleData, \n                              day, \n                              section, \n                              classtype, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes[section][classtype].items) {\n    scheduleData[day].dateTypes[section][classtype].items.map((item) => {\n      // if the item has a url\n      if(item.url && !scheduleUrls.includes(item.url)) {\n        // push the url into scheduleUrls\n        scheduleUrls.push(item.url);\n        // push item name, url and date into scheduleObjs\n        scheduleObjs.push({name: item.name, url: item.url, date: day});\n      }\n      if (item.url) {\n        const itemUrlArray = item.url.split('/');\n        // itemUrlArray[3] is used as the heading of each module section\n        // we're filtering out everythign that does not come from the gitbook \n        if (!moduleNameArray.includes(itemUrlArray[3]) && itemUrlArray[2] === 'bootcamp.rocketacademy.co') {\n          moduleNameArray.push(itemUrlArray[3]);\n        }\n      }\n    })\n  }\n}\n\n// helper finction for accessing required items (items in each class of each section of each day)\nconst accessingRequiredItems = (\n                              scheduleData, \n                              day, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes.module) {\n    Object.keys(scheduleData[day].dateTypes)\n    // filtering out module key\n    .filter(section => section !== 'module')\n    .map((section) => {\n      Object.keys(scheduleData[day].dateTypes[section])\n      // filtering out type key\n      .filter(classtype => classtype !== 'type')\n      .map((classtype) => {\n        // if there item array exists in a section, call the function that gets the required data\n        generatingDataArrays(scheduleData, \n                            day, \n                            section, \n                            classtype, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray);\n        \n      })\n    })\n  }\n}\n\nconst sortScheduleObjs = (urlObj, moduleName, general, ice, poce) => {\n  const urlModule = urlObj.url.split('/');\n  // this is the part of the url which we used to get the moduleName\n  const urlModuleName = urlModule[3];\n  // if the module name in the url is the current moduleName\n  if (urlModuleName === moduleName) {\n    const splitName = urlObj.name.split('.');\n    const dataObj = { name: urlObj.name, date: urlObj.date }\n    // push the object into the relevant array\n    if (splitName[1] === 'ICE') {\n      ice.push(dataObj);\n    } else if (splitName[1] === 'POCE') {\n      poce.push(dataObj);\n    } else {\n      general.push(dataObj);\n    }\n  }\n}\n \n// ###################################################################\n// ###################################################################\n\nfunction Modules({ scheduleData, coursetype }) {\n  const moduleNameArray = [];\n  const scheduleUrls = [];\n  const scheduleObjs = [];\n\n  // looking through entire data file \n  Object.keys(scheduleData).map((day) => {\n    accessingRequiredItems (\n                            scheduleData, \n                            day, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray\n                            );\n  })\n\n  moduleNameArray.sort();\n\n  return (\n    <div className=\"sidebar-modules\">\n      <h4>Modules</h4>\n      <Nav className=\"flex-column\">\n        {moduleNameArray.map((moduleName) => {\n          // creating array to store items of each section\n          const general = [];\n          const poce = [];\n          const ice = [];\n\n          // sort each object in scheduleObjs into one of 3 arrays, general, ice, poce\n          scheduleObjs.forEach((urlObj) => {\n            sortScheduleObjs(urlObj, moduleName, general, ice, poce);\n          })\n\n          const sectionArray = [];\n          sectionArray.push(general);\n          sectionArray.push(ice);\n          sectionArray.push(poce);\n\n          // names of each section \n          const sectionNames = ['General', 'In Class', 'Post Class'];\n\n          return (\n            <>\n            <h6 className=\"sidebar-subheading\">{moduleName}</h6>\n            <Accordion className=\"modules-accordion\">\n            {sectionArray.map((section, index) => {\n              return (\n              <ModuleSection\n                        section={section} \n                        index={index} \n                        sectionNames={sectionNames} \n                        coursetype={coursetype} \n                        scheduleData={scheduleData} \n                        />\n              )\n            })}\n            </Accordion>\n            </>\n            )\n          }\n        )}\n      </Nav>\n    </div>\n  );\n}\n\nexport default Modules;\n\n\n","import React, { useEffect, useRef } from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport { scroller } from 'react-scroll';\nimport { DateTime } from 'luxon';\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\nimport Modules from './Modules';\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype, firstDayOfCourse }) {\n  const weeks = [];\n  // used to scroll to current week on page load\n  const executeScroll = () => currentWeekRef.current.scrollIntoView({ block: 'center' });\n\n  useEffect(() => {\n    if (DateTime.now() > firstDayOfCourse) {\n      executeScroll();\n    }\n  }, []);\n\n  function CurrentWeekDiv() {\n    return (\n      <div ref={currentWeekRef} />\n    );\n  }\n\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf('week');\n  const lastDayOfWeek = DateTime.now().endOf('week');\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat('dd-MM-yyyy'));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  const currentWeekRef = useRef(null);\n\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date]\n      && !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"0\"\n            // uses react-scroll library for scroll function\n            onClick={() => scroller.scrollTo(`${coursetype}-top`, {\n              smooth: true,\n              offset: -70,\n              duration: 100,\n            })}\n          >\n            Current Day\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `${index + 1}`;\n          let id;\n          if (coursetype === 'pt') {\n            id = `${coursetype}-week-${week}-day-2`;\n          } else {\n            id = `${coursetype}-week-${week}-day-1`;\n          }\n          const sidebarId = `${coursetype}-sidebar-week-${week}`;\n\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() => scroller.scrollTo(id, {\n                  smooth: true,\n                  offset: -70,\n                  duration: 100,\n                })}\n              >\n                {week === weekNumber[0] && DateTime.now() > firstDayOfCourse && <CurrentWeekDiv />}\n                <div>\n                  {week === null ? 'Break' : `Week ${week}`}\n                  {/* week indicator that indicates that a certain week is the current week  */}\n                  {weeks[index] === weekNumber[0] && (\n                    <span id={sidebarId} className=\"current-wk-indicator\">\n                      <KeyboardBackspaceIcon />\n                      {'  '}\n                      this week\n                    </span>\n                  )}\n                </div>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n      <Modules scheduleData={scheduleData} coursetype={coursetype} />\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype, firstDayOfCourse }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks \n        scheduleData={scheduleData} \n        coursetype={coursetype} \n        firstDayOfCourse={firstDayOfCourse}  />\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./sidebar/SideBar\";\nimport { DateTime } from 'luxon';\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"PTBC\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  let today = DateTime.now();\n\n  // checking if first day of course is after today, if so today = first day of course, so that current day\n  // section and tables and display first day/ weeks info\n  const courseDatesArray = [];\n  Object.keys(scheduleData).map((day) => {\n    courseDatesArray.push(day);\n  });\n  courseDatesArray.sort(function(a, b){return a-b});\n  const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  if (today < firstDayOfCourse) {\n    today = firstDayOfCourse;\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar \n        scheduleData={scheduleData} \n        coursetype={coursetype}  \n        firstDayOfCourse={firstDayOfCourse} \n        />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React from \"react\";\nimport { Route, Switch, Link, useRouteMatch, Redirect } from \"react-router-dom\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport logo from \"../../assets/4-MILK.png\";\nimport BatchSchedule from \"./BatchSchedule\";\n\nfunction ScheduleContainer({ batchArray }) {\n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      <Navbar variant=\"dark\" bg=\"secondary\">\n        <Navbar.Brand href=\"#home\">\n          <img src={logo} alt=\"company logo\" />\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          {batchArray.map((batch) => (\n            <Nav.Link as={Link} to={`/${batch.name}`}>\n              {batch.name.toUpperCase()}\n            </Nav.Link>\n          ))}\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to={`/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => (\n          <Route path={`/${batch.name}`}>\n            <BatchSchedule\n              data={batch.content}\n              title={batch.name.toUpperCase()}\n            />\n          </Route>\n        ))}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdata,\n  coursedate,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n  // input fields for a entry of a new item into the main data file\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  // function that adds new item to main data file\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    // new item that will be added to main data file\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    // if the section that the new item is to be added to is empty, an empty array called items is added to it\n    if (!bootcampdata[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdata[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    // the new item is then pushed into items array\n    bootcampdata[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n\n    // the new content is saved in state\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({ ...bootcampdata });\n  };\n\n  return (\n    // modal that takes in user input for the creation of a new item\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"ip\">ip</option>\n            <option value=\"algos\">algorithms</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"ip\" && <option value=\"ipDue\">ipDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\n// moves items to a specific date in the schedule\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdata,\n  setbootcampdata,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n    // finding the selected item in the data file\n    let selectedItem = sectiontype[classtype].items[classindex];\n    // removing it from it's original position\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n    // this is where we want to move the item to\n    const targetDay = bootcampdata[selectedDate].dateTypes[section];\n\n    // checking to see if items array exists at destination, if not, an empty array called items is added\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    // selected item is push into items array at destination\n    targetDay[classtype].items.push(selectedItem);\n\n    // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({...bootcampdata})\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">Moving item ...</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdata[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from 'react';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\nimport ShiftItemModal from './ShiftItemModal';\nimport holidayData from '../../../../data/holidays.json';\n\n// Populate dateArray\nconst addDates = (datesArray, date) => {\n  if (!datesArray.includes(date)) {\n    datesArray.push(date);\n  }\n  return datesArray;\n};\n\nconst addIndex = (bootcampData, datesArray, date) => {\n  if (!datesArray.includes(bootcampData.indexOf(date))) {\n    datesArray.push(bootcampData.indexOf(date));\n  }\n  return datesArray;\n};\n\n// Shift items 1 day\nconst shiftOneDay = (\n  direction,\n  bootcampData,\n  dayIndex,\n  sectionType,\n  classType,\n  classIndex,\n  section,\n  setDaysInMainFile,\n  setDaysInBatchFile,\n) => {\n  let bootcampDataArray;\n  let target;\n  if (bootcampData.constructor === Object) {\n    const holidayDates = [];\n    Object.keys(holidayData).forEach((type) => {\n      Object.keys(holidayData[type]).forEach((date) => {\n        holidayDates.push(date);\n      });\n    });\n    bootcampDataArray = Object.keys(bootcampData);\n\n    if (direction === 'up') {\n      target = bootcampData[bootcampDataArray[dayIndex - 1]].courseDate;\n      if (holidayDates.includes(target)) {\n        target = bootcampData[bootcampDataArray[(dayIndex - 1) - 1]].courseDate;\n      }\n    } else {\n      target = bootcampData[bootcampDataArray[dayIndex + 1]].courseDate;\n      if (holidayDates.includes(target)) {\n        target = bootcampData[bootcampDataArray[(dayIndex + 1) + 1]].courseDate;\n      }\n    }\n  } else if (direction === 'up') {\n    target = dayIndex - 1;\n  } else {\n    target = dayIndex + 1;\n  }\n  // finding the selected item in the data file\n  const selectedItem = sectionType[classType].items[classIndex];\n  // removing it from it's original position\n  sectionType[classType].items.splice(classIndex, 1);\n\n  // if items array is empty after removing selected item, remove empty items array\n  if (sectionType[classType].items.length === 0) {\n    delete sectionType[classType].items;\n  }\n  // this is where we want to move the item to\n  const targetDay = bootcampData[target].dateTypes[section];\n  // checking to see if items array exists at destination, if not, an empty array called items is added\n  if (!targetDay[classType].items) {\n    targetDay[classType].items = [];\n  }\n\n  // selected item is push into items array at destination\n  targetDay[classType].items.push(selectedItem);\n\n  // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n  bootcampData.constructor === Array\n    ? setDaysInMainFile([...bootcampData])\n    : setDaysInBatchFile({ ...bootcampData });\n};\n// ############################################################\n\nfunction ClassItem({\n  setBootcampData,\n  section,\n  bootcampData,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n  setDaysInMainFile,\n  setDaysInBatchFile,\n}) {\n  // toggle visibility of buttons\n  const [modalShow, setModalShow] = useState(false);\n  // object shift item is initialised with keys direction and dates to store data that will be passed into the nect component\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  // function that handles moving data from one day to another\n  const handleShift = (direction, dayIndex, classIndex) => {\n    // array that contains all the dates either before or after a selected date depending on direction chosen by user\n    let datesArray = [];\n\n    // item is being moved backwards in the schedule\n    if (direction === 'any') {\n      // if bootcampData either an object or an array depending on wether the user is editing the main or individual schedule files, and needs to be processed accordingly\n      bootcampData.constructor === Object\n        ? Object.keys(bootcampData)\n          .map((date) => {\n            datesArray = addDates(datesArray, date);\n          })\n        : bootcampData\n          .map((date) => {\n            datesArray = addIndex(bootcampData, datesArray, date);\n          });\n\n      // data is put into object shift item\n      setShiftItem({\n        ...shiftItem,\n        dates: datesArray,\n      });\n      // modal that takes user input to move item is shown\n      setModalShow(true);\n      // item is being moved forward in the schedule\n    } else if (direction === 'down') {\n      shiftOneDay(\n        'down',\n        bootcampData,\n        dayIndex,\n        sectionType,\n        classType,\n        classIndex,\n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile,\n      );\n    } else if (direction === 'up') {\n      shiftOneDay(\n        'up',\n        bootcampData,\n        dayIndex,\n        sectionType,\n        classType,\n        classIndex,\n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile,\n      );\n    } else {\n      // here the item is being deleted from the schedule\n      sectionType[classType].items.splice(classIndex, 1);\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n      bootcampData.constructor === Array\n        ? setDaysInMainFile([...bootcampData])\n        : setDaysInBatchFile({ ...bootcampData });\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n      >\n        {item.name}\n\n        <div>\n          {/* remove item  */}\n          <button className=\"trash-can\" onClick={() => handleShift('delete', dayIndex, classIndex)}>\n            <DeleteOutlinedIcon />\n          </button>\n          {/* move item backwards in the schedule  */}\n          <button onClick={() => handleShift('up', dayIndex, classIndex)}>\n            <ExpandLessIcon />\n          </button>\n          {/* move item forward in the schedule  */}\n          <button onClick={() => handleShift('down', dayIndex, classIndex)}>\n            <ExpandMoreIcon />\n          </button>\n          <button className=\"select\" onClick={() => handleShift('any', dayIndex, classIndex)}>\n            <DragIndicatorIcon />\n          </button>\n        </div>\n\n        {modalShow && (\n          // modal that is shown when the user clicks either of the above buttons\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdata={bootcampData}\n            setbootcampdata={setBootcampData}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n            setDaysInMainFile={setDaysInMainFile}\n            setDaysInBatchFile={setDaysInBatchFile}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampData,\n  setBootcampData,\n  section,\n  dayIndex,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampData) => {\n    sectionArray.forEach((element, index) => {\n      if (element !== null && bootcampData.constructor === Object) {\n        if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section] &&\n          bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]) {\n          if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]\n              .items) {\n            sectionArray[index].forEach((item) => {\n              bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n                sectionclass\n              ].items.push(item);\n            });\n          } else {\n            bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      } else if (element !== null && bootcampData.constructor === Array) {\n          if (bootcampData[startDay + index].dateTypes[section][sectionclass]\n            .items) {\n          sectionArray[index].forEach((item) => {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n          } else {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      });\n    return bootcampData;\n  };\n\n  let bootcampDataArray;\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    \n    if (bootcampData.constructor === Object) {\n      bootcampDataArray = Object.keys(bootcampData);\n\n        for (let i = dayIndex; i < bootcampDataArray.length - 1; i += 1) {\n          if(bootcampData[bootcampDataArray[i]].dateTypes[section] && bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass]) {\n            if (bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items) {\n            const selectedSection =\n              bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n              sectionArray.push(selectedSection);\n              delete bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n            } else {\n              sectionArray.push(null);\n            }\n          }\n          \n        }\n      \n    } else {\n      for (let i = dayIndex; i < bootcampData.length - 1; i += 1) {\n        if (bootcampData[i].dateTypes[section][sectionclass].items) {\n          const selectedSection =\n            bootcampData[i].dateTypes[section][sectionclass].items;\n          sectionArray.push(selectedSection);\n          delete bootcampData[i].dateTypes[section][sectionclass].items;\n        } else {\n          sectionArray.push(null);\n        }\n      }\n    }\n    \n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n    }\n\n    bootcampData = shiftSection(sectionArray, startDay, bootcampData);\n    \n     // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampData.constructor === Array\n      ? setDaysInMainFile([...bootcampData])\n      : setDaysInBatchFile({...bootcampData})\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampData={bootcampData}\n                  setBootcampData={setBootcampData}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                  setDaysInBatchFile={setDaysInBatchFile}\n                  setDaysInMainFile={setDaysInMainFile}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n  \n          >\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n          \n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampData,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampData,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"ip\" && sectionType.ipDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampData={bootcampData}\n                            setBootcampData={setBootcampData}\n                            section={section}\n                            dayIndex={dayIndex}\n                            setDaysInBatchFile={setDaysInBatchFile}\n                            setDaysInMainFile={setDaysInMainFile}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport AddIcon from '@material-ui/icons/Add';\nimport Section from './inner-accordion/Section';\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampData,\n  setBootcampData,\n  day,\n  setShowInputModal,\n  setCourseDate,\n  handleCloseAll,\n  setAccordionKey,\n  accordionKey,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampData[day].dateTypes.module && (\n        <Accordion key={accordionKey}>\n          <Accordion.Item eventKey={dayIndex}>\n            <div\n              className=\"course-day-symbol\"\n              onClick={() => handlePlusClick(day)}\n            >\n              {' '}\n              <AddIcon />\n            </div>\n            <Accordion.Header>\n              <div className=\"course-day-header\">\n                {bootcampData.constructor === Object ? (\n                  <>\n                    {day}\n                    , Week:\n                    {' '}\n                    {bootcampData[day].courseWeek}\n                    , Course Day:\n                    {' '}\n                    {bootcampData[day].courseDay}\n                    ,\n                    {' '}\n                    {bootcampData[day].dateTypes.module}\n                    {' '}\n                  </>\n                ) : (\n                  <>\n                    Course Day:\n                    {' '}\n                    {bootcampData[day].courseDay}\n                    ,\n                    {' '}\n                    {bootcampData[day].dateTypes.module}\n                    {' '}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampData[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampData={setBootcampData}\n                        section={section}\n                        sectionType={bootcampData[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampData={bootcampData}\n                        setDaysInBatchFile={setDaysInBatchFile}\n                        setDaysInMainFile={setDaysInMainFile}\n                      />\n                    ),\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","const download = (data, filename) => {\n  // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n  const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(data))}`;\n  const dlAnchorElem = document.createElement('a');\n  dlAnchorElem.setAttribute('href', dataStr);\n  dlAnchorElem.setAttribute('download', filename);\n  dlAnchorElem.click();\n};\n\nexport default download;\n","import { DateTime } from \"luxon\";\nimport holidayData from \"./data/holidays.json\";\nimport basicsData from \"./data/schedule-templates/basics-schedule-template.json\";\n// import ftbcDataJson from \"./data/schedule-templates/ftbc1.0-schedule-template.json\";\n// import ftbcDataJson from \"./data/schedule-templates/ftbc2.0-schedule-template.json\";\nimport ftbcDataJson from \"./data/schedule-templates/ftbc3.0-schedule-template.json\";\nimport ptbcDataJson from \"./data/schedule-templates/ptbc1.0-schedule-template.json\";\n// import ptbcDataJson from \"./data/schedule-templates/ptbc2.0-schedule-template.json\";\n// import ptbcDataJson from \"./data/schedule-templates/ptbc3.0-schedule-template.json\";\n\nconst { publicHolidays } = holidayData;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n  publicHolidayArray.push(key);\n});\n\nconst { schoolHolidays } = holidayData;\nconst schoolHolidayArray = [];\nconst winterBreak = [];\n// Get array of all school holiday dates\nObject.keys(schoolHolidays).map((key, index) => {\n  schoolHolidayArray.push(key);\n  // Get array of winter break dates\n  if (schoolHolidays[key].name === \"winter break\") {\n    winterBreak.push(schoolHolidays[key].date);\n  }\n});\n\nconst publicHolidaysNotSchoolHolidays = [];\n// Get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n  if (!schoolHolidayArray.includes(holiday)) {\n    publicHolidaysNotSchoolHolidays.push(holiday);\n  }\n});\n\nlet bootcampData;\n\n// Getting UTC datetime\nconst getLocalDateTime = (utc, timeString, courseType, date) => {\n  const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n  if (courseType === \"Basics\") {\n    utc = DateTime.fromISO(changedFormat + timeString, { zone: \"Singapore\" })\n      .toUTC()\n      .toISO();\n  } else if (\n    courseType === \"FTBC\" ||\n    (courseType === \"PTBC\" && date.weekday === 6)\n  ) {\n    utc = DateTime.fromISO(`${changedFormat}T10:00`, { zone: \"Singapore\" })\n      .toUTC()\n      .toISO();\n  } else if (courseType === \"PTBC\" && date.weekday === 2) {\n    utc = DateTime.fromISO(`${changedFormat}T19:30`, { zone: \"Singapore\" })\n      .toUTC()\n      .toISO();\n  }\n  return utc;\n};\n\nconst generateTopLevelObject = (courseType, lessonDays) => {\n  const topLevelObject = {\n    courseType,\n    days: {},\n  };\n\n  if (courseType === \"Basics\") {\n    topLevelObject.daysOfWeek = lessonDays;\n    topLevelObject.courseStartDaysOfWeekIndex =\n      basicsData.courseStartDaysOfWeekIndex;\n    topLevelObject.totalCourseDays = basicsData.totalCourseDays;\n  } else {\n    topLevelObject.daysOfWeek = bootcampData.daysOfWeek;\n    topLevelObject.courseStartDaysOfWeekIndex =\n      bootcampData.courseStartDaysOfWeekIndex;\n    topLevelObject.totalCourseDays = bootcampData.totalCourseDays;\n  }\n\n  return topLevelObject;\n};\n\n// Generate dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj, courseType) => {\n  let weekOfCourse;\n  if (\n    courseType.includes(\"Bootcamp\") &&\n    schoolHolidayArray.includes(dateString)\n  ) {\n    weekOfCourse = null;\n  } else {\n    weekOfCourse = week;\n  }\n\n  dateObj = {\n    courseDay: null,\n    courseDate: dateString,\n    courseWeek: weekOfCourse,\n    dayNumber: date.weekday,\n    dateTypes: {},\n  };\n\n  if (publicHolidaysNotSchoolHolidays.includes(dateString)) {\n    dateObj.dateTypes = publicHolidays[dateString];\n  } else {\n    dateObj.dateTypes = schoolHolidays[dateString];\n  }\n\n  return dateObj;\n};\n\n// Generate dateObj for a normal course day\nconst generateCourseDayObject = (\n  dateObj,\n  dateString,\n  week,\n  weekDay,\n  date,\n  utc,\n  courseType,\n  courseDay\n) => {\n  // Get index of basicsData that is specified by courseDayCount\n  dateObj = {\n    courseDate: dateString,\n    courseWeek: week,\n    weekDay,\n    dayNumber: date.weekday,\n    meetingDateTimeUTC: utc,\n  };\n\n  if (courseType === \"Basics\") {\n    dateObj = {\n      ...dateObj,\n      ...basicsData.days[courseDay],\n    };\n  } else if (courseType === \"FTBC\" || courseType === \"PTBC\") {\n    dateObj = {\n      ...dateObj,\n      ...bootcampData.days[courseDay],\n    };\n  }\n  return dateObj;\n};\n\n// Generate filename\nconst getFilename = (startDate, endDate, courseType, batchNum) => {\n  const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n  const displayName = `${displayDate.toFormat(\n    \"dd-MM-yyyy\"\n  )}_${endDate}_${courseType}${batchNum}`;\n  return displayName;\n};\n\nconst generateDataObject = (\n  startDate,\n  batchNum,\n  courseType,\n  input,\n  lessonDays\n) => {\n  // Used if generating batch schedule after making changes to main JSON file\n  if (input) {\n    bootcampData = input;\n  } else if (courseType === \"FTBC\") {\n    bootcampData = ftbcDataJson;\n  } else if (courseType === \"PTBC\") {\n    bootcampData = ptbcDataJson;\n  }\n\n  // Set time for Basics course\n  let basicsTimeslots = [\"T19:30\", \"T19:30\"];\n  if (lessonDays) {\n    if (lessonDays[0] === 1 && lessonDays[1] === 4) {\n      basicsTimeslots = [\"T19:30\", \"T19:30\"];\n    } else if (lessonDays[0] === 7 && lessonDays[1] === 4) {\n      basicsTimeslots = [\"T19:00\", \"T19:30\"];\n    } else {\n      basicsTimeslots = [\"T19:30\", \"T13:00\"];\n    }\n  }\n\n  let currDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n  let utc;\n  utc = getLocalDateTime(utc, \"T16:00\", courseType, currDate);\n  let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n  let classDatesCount = 1;\n  let week = courseType === \"Basics\" ? 0 : 1;\n  let weekDay = 1;\n  let courseDayCount;\n  // Starts from 0 to track index of JSON data file\n  let courseDay = 0;\n\n  const data = generateTopLevelObject(courseType, lessonDays);\n\n  // Set num course days based on course type\n  if (courseType === \"Basics\") {\n    courseDayCount = basicsData.days.length;\n  } else if (courseType === \"FTBC\") {\n    courseDayCount = ftbcDataJson.days.length;\n  } else if (courseType === \"PTBC\") {\n    courseDayCount = ptbcDataJson.days.length;\n  }\n\n  const dayArray = data.daysOfWeek;\n  let dayIndex = data.courseStartDaysOfWeekIndex;\n\n  while (courseDayCount > 0) {\n    const dateString = currDate.toFormat(\"dd-MM-yyyy\");\n\n    // Set filename from start date, end date, courseType (FTBC/PTBC/Basics), batchNum\n    // if this condition is met, dateString will be the end date of course\n    if (courseDay + 1 === data.totalCourseDays) {\n      // start date\n      data.courseName = getFilename(\n        startDate,\n        dateString,\n        courseType,\n        batchNum\n      );\n    }\n\n    let dateObj;\n    // If date is a public holiday\n    if (\n      publicHolidaysNotSchoolHolidays.includes(dateString) ||\n      winterBreak.includes(dateString)\n    ) {\n      dateObj = generateHolidayObject(\n        dateString,\n        week,\n        currDate,\n        dateObj,\n        courseType\n      );\n    } else {\n      dateObj = generateCourseDayObject(\n        dateObj,\n        dateString,\n        week,\n        weekDay,\n        currDate,\n        utc,\n        courseType,\n        courseDay\n      );\n\n      // increase course days on days that classes are held,\n      // DO NOT increase course days on holidays\n      courseDayCount -= 1;\n      courseDay += 1;\n    }\n    data.days[dateString] = dateObj;\n\n    // Check for first day of Basics course\n    const firstDay = DateTime.fromFormat(startDate, \"yyyy-MM-dd\").toFormat(\n      \"dd-MM-yyyy\"\n    );\n    const formattedDate = currDate.toFormat(\"dd-MM-yyyy\");\n\n    if (classDatesCount === data.totalCourseDays && courseType === \"Basics\") {\n      currDate = currDate.plus({ weeks: 1 }).set({ weekday: 1 });\n      utc = getLocalDateTime(utc, \"T19:30\", courseType, currDate);\n      weekDay += 1;\n      week += 1;\n\n      // If last day of FTBC is not Friday, add days to schedule to end on Friday\n    } else if (\n      courseType === \"FTBC\" &&\n      data.days[currDate.toFormat(\"dd-MM-yyyy\")].courseDay === 112 &&\n      currDate.weekday !== 2\n    ) {\n      // Get number of days to Friday\n      let differenceInDays;\n      if (currDate.weekday === 1) {\n        differenceInDays = 5 - currDate.weekday;\n      } else if (currDate.weekday === 5) {\n        differenceInDays = 7;\n        week += 1;\n      } else if (currDate.weekday === 4) {\n        differenceInDays = 8;\n      } else {\n        differenceInDays = 9;\n      }\n\n      // Get extra dates to Friday\n      const datesToAdd = [];\n      for (let i = 1; i <= differenceInDays; i += 1) {\n        const newDate = currDate.plus({ days: i }).toFormat(\"dd-MM-yyyy\");\n        const newWeekday = DateTime.fromFormat(newDate, \"dd-MM-yyyy\").weekday;\n        if (newWeekday < 6) {\n          datesToAdd.push(newDate);\n        }\n      }\n\n      // Put all dates to add to schedule in combinedDates array\n      // Consider possibility of public holiday occuring during those days\n      const newDateObjectsArray = [];\n      for (let k = 0; k < datesToAdd.length; k += 1) {\n        let addedCourseday;\n        if (publicHolidaysNotSchoolHolidays.includes(datesToAdd[k])) {\n          addedCourseday = null;\n        } else {\n          addedCourseday = 113 + k;\n        }\n        const dateInfo = {\n          date: datesToAdd[k],\n          courseday: addedCourseday,\n        };\n        newDateObjectsArray.push(dateInfo);\n      }\n      // Third-last courseday is feature freeze day\n      // Move forward if day falls on public holiday\n      let featureFreezeDay;\n      if (\n        publicHolidaysNotSchoolHolidays.includes(\n          newDateObjectsArray[newDateObjectsArray.length - 3].date\n        )\n      ) {\n        featureFreezeDay =\n          newDateObjectsArray[newDateObjectsArray.length - 4].date;\n      } else {\n        featureFreezeDay =\n          newDateObjectsArray[newDateObjectsArray.length - 3].date;\n      }\n\n      // End date is project presentation day\n      // Move forward if day falls on public holiday\n      let endDate;\n      if (\n        publicHolidaysNotSchoolHolidays.includes(\n          newDateObjectsArray[newDateObjectsArray.length - 1].date\n        )\n      ) {\n        endDate = newDateObjectsArray[newDateObjectsArray.length - 2].date;\n      } else {\n        endDate = newDateObjectsArray[newDateObjectsArray.length - 1].date;\n      }\n\n      // Find total course days after adding days\n      let lastCourseDay;\n      // Generate new dateObj\n      for (let j = 0; j < newDateObjectsArray.length; j += 1) {\n        const targetWeekday = DateTime.fromFormat(\n          newDateObjectsArray[j].date,\n          \"dd-MM-yyyy\"\n        ).weekday;\n        const newDate = DateTime.fromFormat(\n          newDateObjectsArray[j].date,\n          \"dd-MM-yyyy\"\n        );\n        utc = getLocalDateTime(utc, \"T13:00\", courseType, newDate);\n        // Helper function to add dateObj to schedule data\n        const addDateObjToSchedule = (dateObj) => {\n          data.days[newDateObjectsArray[j].date] = dateObj;\n          data.days[newDateObjectsArray[j].date].courseDay =\n            newDateObjectsArray[j].courseday;\n        };\n\n        if (newDateObjectsArray[j].date === featureFreezeDay) {\n          dateObj = generateCourseDayObject(\n            dateObj,\n            newDateObjectsArray[j].date,\n            week,\n            targetWeekday,\n            newDate,\n            utc,\n            courseType,\n            113\n          );\n          addDateObjToSchedule(dateObj);\n        } else if (newDateObjectsArray[j].date === endDate) {\n          dateObj = generateCourseDayObject(\n            dateObj,\n            newDateObjectsArray[j].date,\n            week,\n            targetWeekday,\n            newDate,\n            utc,\n            courseType,\n            115\n          );\n          addDateObjToSchedule(dateObj);\n          lastCourseDay = dateObj.courseDay;\n          // content is the same for all other days, except if the day is a public holiday\n        } else if (\n          publicHolidaysNotSchoolHolidays.includes(newDateObjectsArray[j].date)\n        ) {\n          dateObj = generateHolidayObject(\n            newDateObjectsArray[j].date,\n            week,\n            newDate,\n            dateObj,\n            courseType\n          );\n          addDateObjToSchedule(dateObj);\n        } else {\n          dateObj = generateCourseDayObject(\n            dateObj,\n            newDateObjectsArray[j].date,\n            week,\n            targetWeekday,\n            newDate,\n            utc,\n            courseType,\n            114\n          );\n          addDateObjToSchedule(dateObj);\n        }\n      }\n      data.courseName = getFilename(startDate, endDate, courseType, batchNum);\n      data.totalCourseDays = lastCourseDay;\n      break;\n    } else {\n      // First Basics class is pre-course briefing on Saturday (not included in daysOfWeek)\n      // This end of dayArray (last day of week)\n      if (\n        dayIndex === dayArray.length - 1 ||\n        (formattedDate === firstDay && courseType === \"Basics\")\n      ) {\n        weekDay = 1;\n        // Return to beginning of array (return to beginning of week)\n        dayIndex = 0;\n        currDate = currDate\n          .plus({ weeks: 1 })\n          .set({ weekday: dayArray[dayIndex] });\n        dateWeek = dateWeek.plus({ weeks: 1 });\n        if (!schoolHolidayArray.includes(dateString)) {\n          week += 1;\n        }\n        utc = getLocalDateTime(utc, basicsTimeslots[0], courseType, currDate);\n      } else {\n        // Day within week\n        dayIndex += 1;\n        currDate = currDate.set({ weekday: dayArray[dayIndex] });\n        if (!publicHolidaysNotSchoolHolidays.includes(dateString)) {\n          weekDay += 1;\n        }\n        utc = getLocalDateTime(utc, basicsTimeslots[1], courseType, currDate);\n      }\n    }\n    // Increase classDatesCount regardless of whether day is public holiday\n    classDatesCount += 1;\n  }\n  return data;\n};\n\nexport default generateDataObject;\n","import React, { useState } from \"react\";\nimport AddItemModal from \"./main-accordion/AddItemModal\";\nimport MainAccordion from \"./main-accordion/MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../../download\";\nimport generateDataObject from \"../../generateCourseDates\";\nimport { DateTime } from \"luxon\";\nimport fulltimeDataFile from \"../../data/schedule-templates/ftbc1.0-schedule-template.json\";\nimport partTimeDataFile from \"../../data/schedule-templates/ptbc1.0-schedule-template.json\";\n\n// helper function for cpoying data to clipboard\nconst copyToClipboard = (data) => {\n  // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n  let selBox = document.createElement(\"textarea\");\n  selBox.style.position = \"fixed\";\n  selBox.style.left = \"0\";\n  selBox.style.top = \"0\";\n  selBox.style.opacity = \"0\";\n  // this copies the JSON data to clipboard with original formatting\n  selBox.value = JSON.stringify(data, undefined, 2);\n  document.body.appendChild(selBox);\n  selBox.focus();\n  selBox.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(selBox);\n};\n\n// ############################################################################\n// ############################################################################\nconst GenerateDataShiftContent = ({\n  bootcampData,\n  setBootcampData,\n  mainFile,\n  setMainFile,\n  batchFile,\n  mainDays,\n  setMainDays,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n  batchArray,\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n  // used in the close all functionality\n  const [accordionKey, setAccordionKey] = useState(1234);\n\n  const displayDataFile = (dataFile) => {\n    console.log(\"data file\", dataFile);\n\n    setMainFile(dataFile);\n    setMainDays(dataFile.days);\n  };\n\n  // function that handles download of main data file after edits\n  const handleDownloadMainClick = async () => {\n    download(mainFile, \"modified-main-data-file.json\");\n  };\n\n  // function that handles download of individual batch data file after edits\n  const handleBatchDownloadClick = () => {\n    download(batchFile, `modified-${batchFile.courseName}-file.json`);\n  };\n\n  // state set so that rerender occurs\n  const handleCloseAll = () => {\n    const newAccordionKeyValue = accordionKey + 1;\n    setAccordionKey(newAccordionKeyValue);\n  };\n\n  // copys json data file to clipboard\n  const handleEditInGithub = (data) => {\n    copyToClipboard(data);\n\n    let gitbookUrl;\n    if (data.repoUrls) {\n      gitbookUrl = mainFile.repoUrls.edit;\n    } else {\n      gitbookUrl = `https://github.com/rocketacademy/scheduler/edit/main/src/data/${batchFile.courseName}.json`;\n    }\n    // opens a new window in the browser at specified address(gitbook edit page)\n    console.log(\"gitbook url\", gitbookUrl);\n\n    window.open(gitbookUrl, \"_blank\");\n  };\n\n  const handleBatchEdit = async (index) => {\n    try {\n      const batch = batchArray[index];\n      const startDate = DateTime.fromFormat(\n        batch.content.courseName.slice(0, 10),\n        \"dd-MM-yyyy\"\n      ).toFormat(\"yyyy-MM-dd\");\n      let courseType;\n      if (batch.name.includes(\"pt\")) {\n        courseType = \"PTBC\";\n      } else {\n        courseType = \"FTBC\";\n      }\n      const courseName =\n        batch.content.courseName[batch.content.courseName.length - 1];\n      const data = await generateDataObject(\n        startDate,\n        courseName,\n        courseType,\n        mainFile\n      );\n      copyToClipboard(data);\n      window.open(\n        `https://github.com/rocketacademy/scheduler/edit/main/src/data/${data.courseName}.json`,\n        \"_blank\"\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      {/* renders batch schedule data file  */}\n      {bootcampData &&\n        bootcampData.constructor === Object &&\n        Object.keys(bootcampData).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={() => handleEditInGithub(batchFile)}\n              >\n                Edit in GitHub Repo\n              </Button>{\" \"}\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download Modified Batch File\n              </Button>\n            </div>\n            <div className=\"close-all-container\">\n              <Button onClick={handleCloseAll}>close all</Button>\n            </div>\n            {Object.keys(bootcampData).map((day, dayIndex) => {\n              return (\n                <>\n                  <div>\n                    <MainAccordion\n                      dayIndex={dayIndex}\n                      bootcampData={bootcampData}\n                      setBootcampData={setBootcampData}\n                      day={day}\n                      setShowInputModal={setShowInputModal}\n                      setCourseDate={setCourseDate}\n                      handleCloseAll={handleCloseAll}\n                      accordionKey={accordionKey}\n                      setAccordionKey={setAccordionKey}\n                      setDaysInBatchFile={setDaysInBatchFile}\n                      setDaysInMainFile={setDaysInMainFile}\n                    />\n                  </div>\n                </>\n              );\n            })}\n            {/* modal that takes in user input to create a new item in the schedule  */}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdata={bootcampData}\n                setbootcampdata={setBootcampData}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n                setDaysInBatchFile={setDaysInBatchFile}\n                setDaysInMainFile={setDaysInMainFile}\n              />\n            )}\n          </div>\n        )}\n      {/* displays fulltime or part time data file  */}\n      <div className=\"data-button-container\">\n        <Button\n          className=\"btn btn-primary\"\n          onClick={() => displayDataFile(fulltimeDataFile)}\n        >\n          Full Time\n        </Button>\n        <Button\n          className=\"btn btn-primary\"\n          onClick={() => displayDataFile(partTimeDataFile)}\n        >\n          Part Time\n        </Button>\n      </div>\n      {bootcampData && bootcampData.constructor === Array && mainFile && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <Button\n              className=\"btn btn-primary\"\n              onClick={() => handleEditInGithub(mainFile)}\n            >\n              Edit in GitHub Repo\n            </Button>\n            <Button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </Button>\n          </div>\n          <div className=\"batchfile-edit-container\">\n            {batchArray.map((batch, index) => {\n              // different batches are shown depending on whether the data file rendered is the part time or full time one\n              if (mainFile.daysOfWeek.length < 5) {\n                return (\n                  <>\n                    {batch.name.includes(\"pt\") && (\n                      <Button\n                        className=\"batch-update\"\n                        onClick={() => handleBatchEdit(index)}\n                      >\n                        Update {batch.name}\n                      </Button>\n                    )}\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    {batch.name.includes(\"ft\") && (\n                      <Button\n                        className=\"batch-update\"\n                        onClick={() => handleBatchEdit(index)}\n                      >\n                        Update {batch.name}\n                      </Button>\n                    )}\n                  </>\n                );\n              }\n            })}\n          </div>\n          <div className=\"close-all-container\">\n            <Button onClick={handleCloseAll}>Close All</Button>\n          </div>\n          {bootcampData.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampData={bootcampData}\n                setBootcampData={setBootcampData}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n                handleCloseAll={handleCloseAll}\n                accordionKey={accordionKey}\n                setAccordionKey={setAccordionKey}\n                setDaysInMainFile={setDaysInMainFile}\n                setDaysInBatchFile={setDaysInBatchFile}\n              />\n            );\n          })}\n          {showInputModal && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdata={bootcampData}\n              setbootcampdata={setBootcampData}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n              setDaysInMainFile={setDaysInMainFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\n\n// side navbar that displays links to all batch schedules in batchArray\nfunction ActiveCourses({ batchArray, setBootcampData, setBatchFile }) {\n  const handleSelectClick = (batch) => {\n    setBootcampData(\n      JSON.parse(JSON.stringify(batch.content.days)),\n    );\n    setBatchFile(\n      JSON.parse(JSON.stringify(batch.content)),\n    );\n  };\n\n  return (\n    <div>\n      <h4>Batches</h4>\n      <Nav variant=\"pills\" className=\"flex-column \">\n        {/* a link is rendered for each element in batchArray */}\n        {batchArray.map((batch, index) => (\n          <Nav.Link\n              // when a link is clicked , the content of the selected batch file is rendered\n            onClick={() => handleSelectClick(batch)}\n            eventKey={index}\n          >\n            {batch.name}\n          </Nav.Link>\n        ))}\n      </Nav>\n    </div>\n  );\n}\n\nexport default ActiveCourses;\n","import { DateTime } from 'luxon';\n\n// timezone is manually set to 'Asia/Singapore' because we are located here\nconst timeZoneSet = 'Asia/Singapore';\n\n// helper function , generates list for pre-class, in-class, post-class\nconst generateClassList = (classList, classType) => {\n  if (classType.mdText) {\n    classList += classType.mdText;\n  }\n\n  if (classType.items.length > 0) {\n    for (let j = 0; j < classType.items.length; j += 1) {\n      if (classType.items[j].url) {\n        classList += `* [${classType.items[j].name}](${classType.items[j].url})\\n`;\n      } else {\n        classList += `* ${classType.items[j].name}\\n`;\n      }\n    }\n    classList += '\\n';\n  }\n  return classList;\n};\n\n// helper function, generates content list for each section\nconst generateSectionList = (sectionName, sectionType) => {\n  let sectionString = '';\n  if (sectionType.items.length > 0) {\n    if (sectionName === 'preclass') {\n      sectionString = '### Pre Class\\n';\n    } else if (sectionName === 'inclass') {\n      sectionString = '### In Class\\n';\n    } else if (sectionName === 'postclass') {\n      sectionString = '### Post Class\\n';\n    }\n  }\n\n  sectionString = generateClassList(sectionString, sectionType);\n  return sectionString;\n};\n\n// helper function to get arrays needed to generate markdown\nconst generateCourseArrays = (data) => {\n  // get all course dates\n  Object.keys(data.days).forEach((date) => {\n    dates.push(date);\n  });\n\n  // all possible day numbers that course days fall on\n  dates.forEach((date) => {\n    dayNumbers.push(data.days[date].dayNumber);\n  });\n  dayNumbers = [...new Set(dayNumbers)].sort();\n\n  // all possible names of days of week courdays fall on (this is the table header)\n  dayNumbers.forEach((number) => {\n    daysOfWeek.push(dayNames[number]);\n  });\n\n  // getting last week of course, + 1 because course week starts at 0\n  lastWeek = data.days[dates[dates.length - 1]].courseWeek + 1;\n\n  // getting the dates the coursedays fall on for each week\n  for (let l = 0; l < lastWeek; l += 1) {\n    const week = [];\n    for (let k = 0; k < dates.length; k += 1) {\n      console.log(data.days[dates[k]].courseWeek);\n      if (data.days[dates[k]].courseWeek === weekCount) {\n        week.push(data.days[dates[k]].courseDate);\n      }\n    }\n    weekDates.push(week);\n    weekCount += 1;\n  }\n\n  // getting rows of table\n  // for each subarray in the weekDates array, displayWeek is initialised to ['-', '-', '-']\n  for (let n = 0; n < weekDates.length; n += 1) {\n    const displayWeek = [];\n    dayNumbers.forEach((day) => {\n      displayWeek.push('-');\n    });\n\n    // each element in each subarray of weekDates is compared to the element in the same index\n    // position in dayNumbers array\n    console.log(dayNumbers);\n    for (let m = 0; m < weekDates[n].length; m += 1) {\n      for (let p = 0; p < dayNumbers.length; p += 1) {\n        console.log(data.days[weekDates[n][m]].dayNumber === dayNumbers[p]);\n        // if element.dayNumber === element at the same index position in dayNumbers array\n        if (data.days[weekDates[n][m]].dayNumber === dayNumbers[p]) {\n          if (data.days[weekDates[n][m]].dateTypes.title) {\n            // the '-' in displayWeek is replaced by the dateString\n            const dateString = DateTime.fromISO(data.days[weekDates[n][m]].meetingDateTimeUTC, { zone: timeZoneSet }).toFormat('d MMM');\n            displayWeek[p] = `[${dateString}](#course-day-${data.days[weekDates[n][m]].courseDay})`;\n          } else {\n            // if title of the day does not exist, it means it's a public holiday\n            console.log('public holiday', data.days[weekDates[n][m]].dateTypes.holidayType);\n            displayWeek[p] = `${data.days[weekDates[n][m]].dateTypes.holidayType} (${data.days[weekDates[n][m]].dateTypes.location})`;\n          }\n        }\n      }\n    }\n    tableRows.push(displayWeek);\n  }\n};\n\n// helper function that generates course days table marksown\nconst generateCourseDaysTable = (output) => {\n  // schedule table header\n  output += '| Week |';\n  for (let p = 0; p < daysOfWeek.length; p += 1) {\n    output += ` ${daysOfWeek[p]} |`;\n  }\n\n  output += '\\n| :---: |';\n  for (let r = 0; r < daysOfWeek.length; r += 1) {\n    output += ' :---: |';\n  }\n\n  output += '\\n';\n\n  // schedule table content\n  for (let q = 0; q < tableRows.length; q += 1) {\n    output += `| ${q} |`;\n    for (let r = 0; r < tableRows[q].length; r += 1) {\n      output += ` ${tableRows[q][r]} |`;\n    }\n    output += '\\n';\n  }\n  return output;\n};\n\n// helper function that produces the main content of the page (in markdown)\nconst generateCourseData = (output, data) => {\n  // loop that generates the main part of the page\n  for (let i = 0; i < Object.keys(data.days).length; i += 1) {\n    let localDate;\n    // course day\n    if (data.days[dates[i]].meetingDateTimeUTC) {\n      // getting the date/time from utc string, timezone is manually set\n      localDate = DateTime.fromISO(data.days[dates[i]].meetingDateTimeUTC, { zone: timeZoneSet });\n      const formattedDate = localDate.toFormat('EEE d MMM');\n      output += `# ${formattedDate}, Week ${data.days[dates[i]].courseWeek}, Course Day ${data.days[dates[i]].courseDay}<a href=\"course-day-${data.days[dates[i]].courseDay}\" id=\"course-day-${data.days[dates[i]].courseDay}\"></a>:`;\n      // adding title to heading\n      output += ` ${data.days[dates[i]].dateTypes.title}\\n`;\n      // getting meeting time\n      const localTime = localDate.toFormat('t');\n      output += `Meeting time: ${localTime} `;\n      const timeZone = localDate.toFormat('z');\n      // luxon does not provide abbreviated localised timezones\n      if (timeZone === 'Asia/Singapore') {\n        output += 'SGT ';\n      }\n      const timeOffset = localDate.toFormat('ZZZZ');\n      output += `(${timeOffset})\\n\\n`;\n    } else {\n      // public holiday, as public holiday has no meeting time\n      localDate = DateTime.fromFormat(data.days[dates[i]].courseDate, 'dd-MM-yyyy').toFormat('EEE, d MMM');\n      output += `# ${localDate}: `;\n      if (data.days[dates[i]].dateTypes.location === 'SG') {\n        output += 'Singapore ';\n      }\n      output += `${data.days[dates[i]].dateTypes.holidayType}, ${data.days[dates[i]].dateTypes.name}`;\n    }\n\n    // generate day's course material\n    const generalDateTypes = data.days[dates[i]].dateTypes.general;\n    const projectDateTypes = data.days[dates[i]].dateTypes.projects;\n\n    if (projectDateTypes) {\n      if (projectDateTypes.projectDue.items) {\n        output += '### Project Due\\n';\n        output += `[${projectDateTypes.projectDue.items[0].name}](${projectDateTypes.projectDue.items[0].url})\\n\\n`;\n      }\n    }\n\n    if (generalDateTypes) {\n      const sectionNames = ['preclass', 'inclass', 'postclass'];\n      const sectionTypes = [generalDateTypes.preClass, generalDateTypes.inClass, generalDateTypes.postClass];\n      for (let t = 0; t < sectionNames.length; t += 1) {\n        output += generateSectionList(sectionNames[t], sectionTypes[t]);\n      }\n    }\n\n    if (projectDateTypes) {\n      if (projectDateTypes.projectStart.items) {\n        if (projectDateTypes.projectStart.items.length > 0) {\n          output += '### Project Start\\n';\n          output += `[${projectDateTypes.projectStart.items[0].name}](${projectDateTypes.projectStart.items[0].url})\\n\\n`;\n        }\n      }\n    }\n    output += '\\n\\n';\n  }\n  return output;\n};\n\nconst dayNames = {\n  1: 'Monday',\n  2: 'Tuesday',\n  3: 'Wednesday',\n  4: 'Thursday',\n  5: 'Friday',\n  6: 'Saturday',\n  7: 'Sunday',\n};\n\n/* ###################################################\n######################################################\n################################################### */\n\nconst dates = [];\nlet dayNumbers = [];\nconst daysOfWeek = [];\nconst weekDates = [];\nlet weekCount = 0;\nlet lastWeek;\nconst tableRows = [];\n\nconst generateBasicsMarkdown = (data) => {\n  // generate all arrays needed to produce markdown\n  generateCourseArrays(data);\n\n  // initialize output\n  let output = '---\\ndescription: What and when we will learn\\n---\\n# Course Dates\\n';\n\n  // add course table to output\n  output = generateCourseDaysTable(output);\n  output += '\\n';\n\n  // add course data to output\n  output = generateCourseData(output, data);\n\n  // add further reading section to the end of page\n  output += '# Further Reading\\n### Past Projects\\n * [Drawing With Emojis](https://basics.rocketacademy.co/past-projects/drawing-with-emojis)\\n * [Guess The Word](https://basics.rocketacademy.co/past-projects/guess-the-word)';\n\n  console.log(output);\n  return output;\n};\n\nexport default generateBasicsMarkdown;\n","import React, { useState } from \"react\";\nimport generateDataObject from \"../../../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../../../download.js\";\nimport generateBasicsMarkdown from \"../../../generateBasicsMarkdown.js\";\n\nconst DatePicker = ({ \n  setBootcampData, \n  setBatchFile\n }) => {\n    // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n  const [firstDay, setFirstDay] = useState(null);\n  const [secondDay, setSecondDay] = useState(null);\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = () => {\n    const data = generateDataObject(startDate, courseName, courseType, null, null);\n    download(data, `${data.courseName}.json`);\n  };\n\n  // function that generates and renders schedule data when button is clicked\n  const handleRender = () => {\n    const data = generateDataObject(startDate, courseName, courseType, null, null);\n    console.log('batch 4 data', data);\n    setBootcampData(JSON.parse(JSON.stringify(data.days)));\n    setBatchFile(JSON.parse(JSON.stringify(data)))\n  };\n\n  const addToGitHubRepo = () => {\n      const data = generateDataObject(startDate, courseName, courseType, null, null);\n      console.log('data', data);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      // this copies the JSON data to clipboard with original formatting\n      selBox.value = JSON.stringify(data, undefined, 2);\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/scheduler/new/main/src/data', \"_blank\");\n  }\n\n  const generateMarkdown = () => {\n      const dayNumbers = {\n        'Monday': 1,\n        'Tuesday': 2,\n        'Wednesday': 3,\n        'Thursday': 4,\n        'Friday': 5,\n        'Saturday': 6,\n        'Sunday': 7\n      };\n\n      const lessonDays = [dayNumbers[firstDay], dayNumbers[secondDay]];\n      let data = generateDataObject(startDate, courseName, courseType, null, lessonDays);\n      data = generateBasicsMarkdown(data);\n      console.log('data', data);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      selBox.value = data;\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/basics-docs/new/master/course-logistics', \"_blank\")\n    }\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <div className=\"input-fields\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"course-type\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"FTBC\">FTBC</option>\n                <option value=\"PTBC\">PTBC</option>\n              </Form.Select>\n            </Form.Group>\n            </div>\n            {courseType === 'Basics' && (\n              <div className=\"basics-days\">\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>1st Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-1\"\n                    onChange={(e) => setFirstDay(e.target.value)}\n                  >\n                    <option>Select day</option>\n                    <option value=\"Monday\">Monday</option>\n                    <option value=\"Tuesday\">Tuesday</option>\n                    <option value=\"Wednesday\">Wednesday</option>\n                    <option value=\"Thursday\">Thursday</option>\n                    <option value=\"Friday\">Friday</option>\n                    <option value=\"Saturday\">Saturday</option>\n                    <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>2nd Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-2\"\n                    onChange={(e) => setSecondDay(e.target.value)}\n                  >\n                  <option>Select day</option>\n                  <option value=\"Monday\">Monday</option>\n                  <option value=\"Tuesday\">Tuesday</option>\n                  <option value=\"Wednesday\">Wednesday</option>\n                  <option value=\"Thursday\">Thursday</option>\n                  <option value=\"Friday\">Friday</option>\n                  <option value=\"Saturday\">Saturday</option>\n                  <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n              </div>\n            )}\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                handleRender();\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                handleDownload();\n              }}\n            >\n              Download Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                addToGitHubRepo();\n              }}\n            >\n              Add to GitHub Repo\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                generateMarkdown();\n              }}\n            >\n              Basics Markdown\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport GenerateDataShiftContent from \"../GenerateDataShiftContent\";\nimport ActiveCourses from \"./ActiveCourses.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ \n  batchArray, \n  bootcampData, \n  setBootcampData, \n  setBatchFile, \n  batchFile, \n  setDaysInBatchFile, \n  setDaysInMainFile\n }) => {\n \n  return (\n    <>\n      <div className=\"datashift-container\">\n        <div className=\"all-courses-navbar\">\n          {/* this component contains links to indivudual batch schedules to be rendered and edited */}\n          <ActiveCourses\n            batchArray={batchArray}\n            setBootcampData={setBootcampData}\n            setBatchFile={setBatchFile}\n          />\n        </div>\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            {/* this component generates a course schedule based on start date and course type from the main json data file */}\n            <DatePicker\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              setBatchFile={setBatchFile}\n            />\n            {/* this component allows the user to edit the schedule rendered */}\n            <GenerateDataShiftContent\n              batchArray={batchArray}\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              batchFile={batchFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n              setDaysInMainFile={setDaysInMainFile}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DataShift from \"./data-shift/DataShift\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = ({ batchArray }) => {\n  const [key, setKey] = useState(\"datePicker\");\n\n  // remains empty until user picks/ generates schedule to edit. this is the days section of the batch data file\n  const [batchDays, setBatchDays] = useState({});\n  // this is the whole data file\n  const [batchFile, setBatchFile] = useState({});\n\n  // this is the main bootcamp data json file that has not been mapped onto any dates\n  const [mainFile, setMainFile] = useState();\n  // this is the course days section of the bootcamp data json file\n  const [mainDays, setMainDays] = useState();\n  // helper function for setting state (mainFile)\n  const setDaysInMainFile = (mainDays) => {\n    setMainFile({ ...mainFile, days: mainDays });\n  };\n\n  // helper function for setting state (batchFile)\n  const setDaysInBatchFile = (batchDays) => {\n    setBatchFile({ ...batchFile, days: batchDays });\n  };\n\n  return (\n    <div className=\"container\">\n      <Tabs\n        id=\"controlled-tab-example\"\n        activeKey={key}\n        onSelect={(k) => setKey(k)}\n        className=\"\"\n      >\n        {/* this tab contains the component for editing the main data file */}\n        <Tab eventKey=\"datePicker\" title=\"Main\">\n          <GenerateDataShiftContent\n            bootcampData={mainDays}\n            setBootcampData={setMainDays}\n            mainFile={mainFile}\n            setMainFile={setMainFile}\n            mainDays={mainDays}\n            setMainDays={setMainDays}\n            setDaysInBatchFile={setDaysInBatchFile}\n            setDaysInMainFile={setDaysInMainFile}\n            batchArray={batchArray}\n          />\n        </Tab>\n        {/* this tab contains the component for generating/ editing individual batch schedules */}\n        <Tab eventKey=\"dataShift\" title=\"Batch\">\n          <DataShift\n            batchArray={batchArray}\n            bootcampData={batchDays}\n            setBootcampData={setBatchDays}\n            setBatchFile={setBatchFile}\n            batchFile={batchFile}\n            setDaysInBatchFile={setDaysInBatchFile}\n            setDaysInMainFile={setDaysInMainFile}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default TabsContainer;\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport ftbc6 from \"./data/10-01-2022_01-07-2022_FTBC6.json\";\nimport ftbc7 from \"./data/28-03-2022_19-09-2022_FTBC7.json\";\nimport ptbc1 from \"./data/17-08-2021_26-07-2022_PTBC1.json\";\nimport ptbc2 from \"./data/16-11-2021_29-10-2022_PTBC2.json\";\nimport ptbc4 from \"./data/14-05-2022_10-01-2023_PTBC4.json\";\n\nimport ScheduleContainer from \"./components/schedules/ScheduleContainer\";\nimport TabsContainer from \"./components/admin/Tabs\";\n\nfunction App() {\n  // Create array of batch data for components for /schedule and /admin\n  const batchArray = [\n    { name: \"ftbc6\", content: ftbc6 },\n    { name: \"ftbc7\", content: ftbc7 },\n    { name: \"ptbc1\", content: ptbc1 },\n    { name: \"ptbc2\", content: ptbc2 },\n    { name: \"ptbc4\", content: ptbc4 },\n  ];\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          {/* route that takes user to part of app that edits course schedules */}\n          <Route path=\"/admin\">\n            <TabsContainer batchArray={batchArray} />\n          </Route>\n          {/* route that takes user to part of app that displays batch schedules for student use */}\n          <Route path=\"/\">\n            <ScheduleContainer batchArray={batchArray} />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}