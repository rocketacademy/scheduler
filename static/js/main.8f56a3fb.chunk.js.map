{"version":3,"sources":["components/admin/main-accordion/AddItemModal.jsx","components/admin/main-accordion/inner-accordion/ShiftItemModal.jsx","components/admin/main-accordion/inner-accordion/ClassItem.jsx","components/admin/main-accordion/inner-accordion/SectionClass.jsx","components/admin/main-accordion/inner-accordion/Section.jsx","components/admin/main-accordion/MainAccordion.jsx","download.js","generateCourseDates.js","components/admin/GenerateDataShiftContent.jsx","components/admin/data-shift/ActiveCourses.jsx","generateBasicsMarkdown.js","components/schedules/GenerateCourseDayHeader.jsx","components/admin/data-shift/DatePicker.jsx","components/admin/data-shift/DataShift.jsx","components/admin/Tabs.jsx","assets/4-MILK.png","components/schedules/DisplaySection.jsx","components/schedules/GenerateNotifications.jsx","generateSectionArray.js","components/schedules/GenerateDatetypeSections.jsx","components/schedules/GenerateCourseDayContent.jsx","components/schedules/schedule-table/TableSectionContent.jsx","components/schedules/schedule-table/TableClass.jsx","components/schedules/schedule-table/TableProjects.jsx","components/schedules/schedule-table/ScheduleTable.jsx","generateTableData.js","components/schedules/schedule-table/ContentTable.jsx","components/schedules/current-day/CurrentDaySection.jsx","components/schedules/ScheduleContent.jsx","components/schedules/sidebar/ModuleSection.jsx","components/schedules/sidebar/Modules.jsx","components/schedules/sidebar/CourseWeeks.jsx","components/schedules/sidebar/SideBar.jsx","components/schedules/BatchSchedule.jsx","components/schedules/ScheduleContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddItemModal","show","onHide","bootcampdata","coursedate","setDaysInBatchFile","setDaysInMainFile","useState","title","setTitle","url","setUrl","section","setSection","sectionClass","setSectionClass","Modal","size","centered","Header","closeButton","Title","id","Body","Form","Group","className","controlId","Label","Control","type","placeholder","value","onChange","e","target","Select","Button","variant","onClick","preventDefault","newItem","name","dateTypes","items","push","constructor","Array","handleAddItem","Footer","ShiftItemModal","shiftitem","sectiontype","setbootcampdata","classtype","classindex","selectedDate","setSelectedDate","dates","map","date","courseDay","selectedItem","splice","length","targetDay","handleSubmitDate","shiftOneDay","direction","bootcampData","dayIndex","sectionType","classType","classIndex","bootcampDataArray","Object","holidayDates","keys","holidayData","forEach","courseDate","includes","ClassItem","setBootcampData","item","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","datesArray","addDates","indexOf","addIndex","SectionClass","day","sectionclass","sectionIndex","handleClassShift","sectionArray","i","selectedSection","startDay","element","index","shiftSection","Section","classExists","preClass","inClass","postClass","projectDue","projectStart","ipDue","Accordion","Item","eventKey","filter","MainAccordion","setShowInputModal","setCourseDate","accordionKey","handleCloseAll","setAccordionKey","module","console","log","handlePlusClick","courseWeek","download","data","filename","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","publicHolidays","PH","publicHolidayArray","key","companyHolidays","company","companyHolidayArray","winterBreak","phWithoutCh","holiday","getLocalDateTime","utc","timeString","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","weekday","generateHolidayObject","dateString","week","dateObj","dayNumber","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","days","getFilename","startDate","endDate","batchNum","displayDate","fromFormat","generateDataObject","input","lessonDays","basicsTimeslots","ftbcDataJson","ptbcDataJson","undefined","dateWeek","classDatesCount","courseDayCount","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","startIndex","generateTopLevelObject","dayArray","courseName","firstDay","formattedDate","plus","weeks","set","differenceInDays","datesToAdd","newDate","newWeekday","newDateObjectsArray","k","addedCourseday","dateInfo","courseday","featureFreezeDay","lastCourseDay","j","targetWeekday","addDateObjToSchedule","copyToClipboard","selBox","style","position","left","top","opacity","body","appendChild","focus","select","execCommand","removeChild","GenerateDataShiftContent","mainFile","setMainFile","batchFile","setMainDays","mainDays","batchArray","showInputModal","displayDataFile","dataFile","handleDownloadMainClick","a","handleEditInGithub","gitbookUrl","repoUrls","edit","window","open","handleBatchEdit","batch","content","slice","fulltimeDataFile","partTimeDataFile","ActiveCourses","lastWeek","localDate","meetingTime","timeZone","timeOffset","setBatchFile","Nav","Link","parse","handleSelectClick","timeZoneSet","generateSectionList","sectionName","sectionString","classList","mdText","generateClassList","dayNames","dayNumbers","weekDates","weekCount","tableRows","generateBasicsMarkdown","Set","sort","number","l","n","displayWeek","m","p","holidayType","location","generateCourseArrays","output","r","q","generateCourseDaysTable","localTime","generalDateTypes","general","projectDateTypes","projects","sectionNames","sectionTypes","t","generateCourseData","DatePicker","setStartDate","setCourseName","setCourseType","setFirstDay","secondDay","setSecondDay","handleRender","handleDownload","addToGitHubRepo","generateMarkdown","href","DataShift","TabsContainer","setKey","batchDays","setBatchDays","Tabs","activeKey","onSelect","Tab","NormalCourseDay","todaySectionHeader","HolidayCourseDay","GenerateCourseDayHeader","coursetype","DisplaySection","heading","rel","GenerateNotifications","status","projectdue","ipdue","projectstart","generateSectionArray","datetype","classTypeSection","x","GenerateDatetypeSections","GenerateCourseDayContent","ip","TableSectionContent","TableClass","classArray","TableProjects","ScheduleTable","weekNumbers","tableData","today","now","num","Table","bordered","hover","scroller","scrollTo","smooth","offset","duration","generateTableData","scheduleData","setWeekNumbers","setTableData","moveDate","lastDay","firstDayMonth","lastDayMonth","moveDateMonth","startOf","endOf","weekDatesArray","monthDatesArray","currentWeekData","currentMonthData","ContentTable","useEffect","CurrentDaySection","nextDay","previousDayId","currentDayId","firstDayOfCourse","previousDay","dayBefore","minus","findPreviousDay","findNextDay","ScheduleContent","nextToday","months","defaultActiveKey","ModuleSection","info","Modules","moduleNameArray","scheduleUrls","scheduleObjs","itemUrlArray","split","generatingDataArrays","accessingRequiredItems","moduleName","poce","ice","urlObj","splitName","dataObj","sortScheduleObjs","CourseWeeks","currentWeekRef","current","scrollIntoView","block","CurrentWeekDiv","ref","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","useRef","navbarScroll","navId","sidebarId","SideBar","BatchSchedule","courseDatesArray","b","ScheduleContainer","useRouteMatch","path","Navbar","bg","Brand","src","logo","alt","as","to","toUpperCase","exact","App","ptbc1","ptbc2","ptbc3","ftbc6","ftbc7","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"w9p0BAgIeA,MA3Hf,YAOI,IANFC,EAMC,EANDA,KACAC,EAKC,EALDA,OACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,mBACAC,EACC,EADDA,kBAGA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsBF,mBAAS,IAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,IAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KA4BA,OAEE,cADA,CACCC,EAAA,EAAD,CACEf,KAAMA,EACNC,OAAQA,EACRe,KAAK,KACL,kBAAgB,kBAChBC,UAAQ,EALV,UAOE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,CAAaC,GAAG,kBAAhB,2BAEF,cAACN,EAAA,EAAMO,KAAP,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,OAAOC,UAAU,QAAvC,UACE,cAACH,EAAA,EAAKI,MAAN,oBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,YAAY,cACZC,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAAOzB,EAASyB,EAAEC,OAAOH,aAIvC,eAACR,EAAA,EAAKC,MAAN,CAAYC,UAAU,OAAOC,UAAU,MAAvC,UACE,cAACH,EAAA,EAAKI,MAAN,kBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,YAAY,YACZC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAOvB,EAAOuB,EAAEC,OAAOH,aAIrC,cAACR,EAAA,EAAKI,MAAN,sBACA,eAACJ,EAAA,EAAKY,OAAN,CACEV,UAAU,OACV,aAAW,WACXO,SAAU,SAACC,GAAD,OAAOrB,EAAWqB,EAAEC,OAAOH,QAHvC,UAKE,oDACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,QAAd,2BAGF,cAACR,EAAA,EAAKI,MAAN,qBACA,eAACJ,EAAA,EAAKY,OAAN,CACEV,UAAU,OACV,aAAW,WACXO,SAAU,SAACC,GAAD,OAAOnB,EAAgBmB,EAAEC,OAAOH,QAH5C,UAKE,uDACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,UAAd,qBACa,aAAZpB,GACC,qCACE,wBAAQoB,MAAM,aAAd,wBACA,wBAAQA,MAAM,eAAd,6BAGS,OAAZpB,GAAoB,wBAAQoB,MAAM,QAAd,sBAEvB,cAACK,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLS,QAAS,SAACL,GAAD,OA/FG,SAACA,GACrBA,EAAEM,iBAGF,IAAMC,EAAU,CACdC,KAAMlC,EACNE,IAAKA,GAIFP,EAAaC,GAAYuC,UAAU/B,GAASE,GAAc8B,QAC7DzC,EAAaC,GAAYuC,UAAU/B,GAASE,GAAc8B,MAAQ,IAIpEzC,EAAaC,GAAYuC,UAAU/B,GAASE,GAAc8B,MAAMC,KAC9DJ,GAIFtC,EAAa2C,cAAgBC,MACzBzC,EAAkB,YAAIH,IACtBE,EAAmB,eAAKF,IAyEJ6C,CAAcd,IAHhC,yBASJ,cAAClB,EAAA,EAAMiC,OAAP,UACE,cAACZ,EAAA,EAAD,CAAQE,QAASrC,EAAjB,yB,8EClBOgD,MAlGf,YAYI,IAXFjD,EAWC,EAXDA,KACAC,EAUC,EAVDA,OACAiD,EASC,EATDA,UACAhD,EAQC,EARDA,aAEAiD,GAMC,EAPDC,gBAOC,EANDD,aACAE,EAKC,EALDA,UACAC,EAIC,EAJDA,WACA3C,EAGC,EAHDA,QACAP,EAEC,EAFDA,mBACAC,EACC,EADDA,kBAEA,EAAwCC,mBAAS,IAAjD,mBAAOiD,EAAP,KAAqBC,EAArB,KA8BA,OACE,eAACzC,EAAA,EAAD,CACEf,KAAMA,EACNkD,UAAWA,EACXjD,OAAQA,EACRe,KAAK,KACL,kBAAgB,aAChBC,UAAQ,EANV,UAQE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,CAAaC,GAAG,aAAhB,+BAEF,cAACN,EAAA,EAAMO,KAAP,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKY,OAAN,CACEV,UAAU,OACV,aAAW,OACXO,SAAU,SAACC,GAAD,OAAOuB,EAAgBvB,EAAEC,OAAOH,QAH5C,UAKE,wCACCmB,EAAUO,MAAMC,KAAI,SAACC,GACpB,MAAoB,kBAATA,EAEP,qCACE,yBAAQ5B,MAAO4B,EAAf,iBACOzD,EAAayD,GAAMC,aAF5B,OASA,qCACE,wBAAQ7B,MAAO4B,EAAf,SAAsBA,IADxB,aAOR,cAACvB,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLS,QAAS,SAACL,GAAD,OAtEM,SAACA,GACxBA,EAAEM,iBAEF,IAAIsB,EAAeV,EAAYE,GAAWV,MAAMW,GAEhDH,EAAYE,GAAWV,MAAMmB,OAAOR,EAAY,GAGJ,IAAxCH,EAAYE,GAAWV,MAAMoB,eACxBZ,EAAYE,GAAWV,MAGhC,IAAMqB,EAAY9D,EAAaqD,GAAcb,UAAU/B,GAGlDqD,EAAUX,GAAWV,QACxBqB,EAAUX,GAAWV,MAAQ,IAI/BqB,EAAUX,GAAWV,MAAMC,KAAKiB,GAGhC3D,EAAa2C,cAAgBC,MACzBzC,EAAkB,YAAIH,IACtBE,EAAmB,eAAIF,IA6CH+D,CAAiBhC,IAHnC,yBASJ,cAAClB,EAAA,EAAMiC,OAAP,UACE,cAACZ,EAAA,EAAD,CAAQE,QAASrC,EAAjB,yB,0BCzEFiE,EAAc,SAClBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA7D,EACAN,EACAD,GAGI,IAAIqE,EACAvC,EACH,GAAGkC,EAAavB,cAAgB6B,OAAQ,CACtC,IAAMC,EAAe,GACrBD,OAAOE,KAAKC,GAAaC,SAAQ,SAACjD,GACjC6C,OAAOE,KAAKC,EAAYhD,IAAOiD,SAAQ,SAACnB,GACtCgB,EAAa/B,KAAKe,SAGrBc,EAAoBC,OAAOE,KAAKR,GAEf,OAAdD,GACDjC,EAASkC,EAAaK,EAAkBJ,EAAW,IAAIU,WACnDJ,EAAaK,SAAS9C,KACzBA,EAASkC,EAAaK,EAAmBJ,EAAW,EAAI,IAAIU,cAI7D7C,EAASkC,EAAaK,EAAkBJ,EAAW,IAAIU,WACnDJ,EAAaK,SAAS9C,KACzBA,EAASkC,EAAaK,EAAmBJ,EAAW,EAAI,IAAIU,kBAM9D7C,EADgB,OAAdiC,EACOE,EAAW,EAEXA,EAAW,EAIxB,IAAIR,EAAeS,EAAYC,GAAW5B,MAAM6B,GAEhDF,EAAYC,GAAW5B,MAAMmB,OAAOU,EAAY,GAGJ,IAAxCF,EAAYC,GAAW5B,MAAMoB,eACxBO,EAAYC,GAAW5B,MAGhC,IAAMqB,EAAYI,EAAalC,GAAQQ,UAAU/B,GAE5CqD,EAAUO,GAAW5B,QACxBqB,EAAUO,GAAW5B,MAAQ,IAI/BqB,EAAUO,GAAW5B,MAAMC,KAAKiB,GAGhCO,EAAavB,cAAgBC,MACzBzC,EAAkB,YAAI+D,IACtBhE,EAAmB,eAAIgE,KA0IlBa,MArIf,YAWI,IAVFC,EAUC,EAVDA,gBACAvE,EASC,EATDA,QACAyD,EAQC,EARDA,aACAG,EAOC,EAPDA,UACAD,EAMC,EANDA,YACAa,EAKC,EALDA,KACAd,EAIC,EAJDA,SACAG,EAGC,EAHDA,WACAnE,EAEC,EAFDA,kBACAD,EACC,EADDA,mBAGA,EAAkCE,oBAAS,GAA3C,mBAAO8E,EAAP,KAAkBC,EAAlB,KAEA,EAAkC/E,mBAAS,CACzC6D,UAAW,KACXV,MAAO,KAFT,mBAAO6B,EAAP,KAAkBC,EAAlB,KAMMC,EAAc,SAACrB,EAAWE,EAAUG,GAExC,IAAIiB,EAAa,GAKC,QAAdtB,GAEFC,EAAavB,cAAgB6B,OACzBA,OAAOE,KAAKR,GACTV,KAAI,SAACC,GACJ8B,EAtHG,SAACA,EAAY9B,GAI5B,OAHK8B,EAAWT,SAASrB,IACvB8B,EAAW7C,KAAKe,GAEX8B,EAkHkBC,CAASD,EAAY9B,MAEtCS,EACGV,KAAI,SAACC,GACJ8B,EAnHG,SAACrB,EAAcqB,EAAY9B,GAI1C,OAHK8B,EAAWT,SAASZ,EAAauB,QAAQhC,KAC5C8B,EAAW7C,KAAKwB,EAAauB,QAAQhC,IAEhC8B,EA+GkBG,CAASxB,EAAcqB,EAAY9B,MAIxD4B,EAAa,2BACRD,GADO,IAEV7B,MAAOgC,KAGTJ,GAAa,IAEU,SAAdlB,EACVD,EACG,OACAE,EACAC,EACAC,EACAC,EACAC,EACA7D,EACAN,EACAD,GAGqB,OAAd+D,EACTD,EACE,KACAE,EACAC,EACAC,EACAC,EACAC,EACA7D,EACAN,EACAD,IAIFkE,EAAYC,GAAW5B,MAAMmB,OAAOU,EAAY,GACJ,IAAxCF,EAAYC,GAAW5B,MAAMoB,eACxBO,EAAYC,GAAW5B,MAGhCyB,EAAavB,cAAgBC,MACzBzC,EAAkB,YAAI+D,IACtBhE,EAAmB,eAAIgE,MAK/B,OACE,8BACE,sBACE3C,UAAU,aADZ,UAGG0D,EAAK1C,KAEJ,gCAEE,wBAAQhB,UAAU,YAAYa,QAAS,kBAAMkD,EAAY,SAAUnB,EAAUG,IAA7E,SACE,cAAC,IAAD,MAGF,wBAAQlC,QAAS,kBAAMkD,EAAY,KAAMnB,EAAUG,IAAnD,SACE,cAAC,IAAD,MAGF,wBAAQlC,QAAS,kBAAMkD,EAAY,OAAQnB,EAAUG,IAArD,SACE,cAAC,IAAD,MAEF,wBAAQ/C,UAAU,SAASa,QAAS,kBAAMkD,EAAY,MAAOnB,EAAUG,IAAvE,SACE,cAAC,IAAD,SAILY,GAEC,cAAC,EAAD,CACEpF,KAAMoF,EACNnF,OAAQ,kBAAMoF,GAAa,IAC3BnC,UAAWoC,EACXpF,aAAckE,EACdhB,gBAAiB8B,EACjB/B,YAAamB,EACbjB,UAAWkB,EACXjB,WAAYkB,EACZ7D,QAASA,EACTN,kBAAmBA,EACnBD,mBAAoBA,UC7DjByF,MA1Jf,YAWI,IAuCEpB,EAjDJqB,EAUC,EAVDA,IAEAC,GAQC,EATDC,aASC,EARDD,cACAzB,EAOC,EAPDA,YACAF,EAMC,EANDA,aACAc,EAKC,EALDA,gBACAvE,EAIC,EAJDA,QACA0D,EAGC,EAHDA,SACAjE,EAEC,EAFDA,mBACAC,EACC,EADDA,kBAyCM4F,EAAmB,SAAC9B,EAAWE,GAEnC,IAAM6B,EAAe,GAErB,GAAI9B,EAAavB,cAAgB6B,OAAQ,CACvCD,EAAoBC,OAAOE,KAAKR,GAE9B,IAAK,IAAI+B,EAAI9B,EAAU8B,EAAI1B,EAAkBV,OAAS,EAAGoC,GAAK,EAC5D,GAAG/B,EAAaK,EAAkB0B,IAAIzD,UAAU/B,IAAYyD,EAAaK,EAAkB0B,IAAIzD,UAAU/B,GAASoF,GAChH,GAAI3B,EAAaK,EAAkB0B,IAAIzD,UAAU/B,GAASoF,GAAcpD,MAAO,CAC/E,IAAMyD,EACJhC,EAAaK,EAAkB0B,IAAIzD,UAAU/B,GAASoF,GAAcpD,MACpEuD,EAAatD,KAAKwD,UACXhC,EAAaK,EAAkB0B,IAAIzD,UAAU/B,GAASoF,GAAcpD,WAE3EuD,EAAatD,KAAK,WAO1B,IAAK,IAAIuD,EAAI9B,EAAU8B,EAAI/B,EAAaL,OAAS,EAAGoC,GAAK,EACvD,GAAI/B,EAAa+B,GAAGzD,UAAU/B,GAASoF,GAAcpD,MAAO,CAC1D,IAAMyD,EACJhC,EAAa+B,GAAGzD,UAAU/B,GAASoF,GAAcpD,MACnDuD,EAAatD,KAAKwD,UACXhC,EAAa+B,GAAGzD,UAAU/B,GAASoF,GAAcpD,WAExDuD,EAAatD,KAAK,MAexBwB,EAjFmB,SAAC8B,EAAcG,EAAUjC,GAiC5C,OAhCA8B,EAAapB,SAAQ,SAACwB,EAASC,GACb,OAAZD,GAAoBlC,EAAavB,cAAgB6B,OAC/CN,EAAaK,EAAkB4B,EAAWE,IAAQ7D,UAAU/B,IAC9DyD,EAAaK,EAAkB4B,EAAWE,IAAQ7D,UAAU/B,GAASoF,KACjE3B,EAAaK,EAAkB4B,EAAWE,IAAQ7D,UAAU/B,GAASoF,GACpEpD,MACHuD,EAAaK,GAAOzB,SAAQ,SAACK,GAC3Bf,EAAaK,EAAkB4B,EAAWE,IAAQ7D,UAAU/B,GAC1DoF,GACApD,MAAMC,KAAKuC,MAGff,EAAaK,EAAkB4B,EAAWE,IAAQ7D,UAAU/B,GAC1DoF,GACApD,MAAQuD,EAAaK,IAGN,OAAZD,GAAoBlC,EAAavB,cAAgBC,QACpDsB,EAAaiC,EAAWE,GAAO7D,UAAU/B,GAASoF,GACnDpD,MACHuD,EAAaK,GAAOzB,SAAQ,SAACK,GAC3Bf,EAAaiC,EAAWE,GAAO7D,UAAU/B,GACvCoF,GACApD,MAAMC,KAAKuC,MAGbf,EAAaiC,EAAWE,GAAO7D,UAAU/B,GACvCoF,GACApD,MAAQuD,EAAaK,OAIxBnC,EAgDQoC,CAAaN,EAPV,SAAd/B,EACSE,EAAW,EAGXA,EAAW,EAG4BD,GAGpDA,EAAavB,cAAgBC,MACzBzC,EAAkB,YAAI+D,IACtBhE,EAAmB,eAAIgE,KAG7B,OACE,8BACGE,EAAYyB,GAAcpD,OACzB,sBAAKlB,UAAU,gBAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BsE,IAC9B,qBAAKtE,UAAU,cAAf,SACG6C,EAAYyB,GAAcpD,MAAMe,KAAI,SAACyB,EAAMX,GAC1C,OACE,cAAC,EAAD,CACEsB,IAAKA,EACLC,aAAcA,EACd3B,aAAcA,EACdc,gBAAiBA,EACjBvE,QAASA,EACT4D,UAAWwB,EACXzB,YAAaA,EACba,KAAMA,EACNd,SAAUA,EACVG,WAAYA,EACZpE,mBAAoBA,EACpBC,kBAAmBA,SAK3B,qBACEoB,UAAU,uBADZ,SAII,gCACE,wBACEa,QAAS,kBAAM2D,EAAiB,KAAM5B,IADxC,SAGE,cAAC,IAAD,MAEF,wBACE/B,QAAS,kBACP2D,EAAiB,OAAQ5B,IAF7B,SAKE,cAAC,IAAD,iBC9EHoC,MAlEf,YASI,IARFX,EAQC,EARDA,IACAZ,EAOC,EAPDA,gBACAvE,EAMC,EANDA,QACA2D,EAKC,EALDA,YACAD,EAIC,EAJDA,SACAD,EAGC,EAHDA,aACAhE,EAEC,EAFDA,mBACAC,EACC,EADDA,kBAKIqG,GAAc,EAclB,OAbIpC,EAAYzB,cAAgB6B,SAE5BJ,EAAYqC,SAAShE,OACrB2B,EAAYsC,QAAQjE,OACpB2B,EAAYuC,UAAUlE,OACL,aAAhB2B,IACEA,EAAYwC,WAAWnE,OAAS2B,EAAYyC,aAAapE,QAC3C,OAAhB2B,GAAwBA,EAAY0C,MAAMrE,SAE3C+D,GAAc,GAKhB,8BACGpC,EAAYzB,cAAgB6B,QAC3B,mCACE,cAACuC,EAAA,EAAD,UACGP,GACC,eAACO,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,UACE,cAACF,EAAA,EAAU/F,OAAX,UAAmBoD,EAAYzC,OAC/B,cAACoF,EAAA,EAAU3F,KAAX,UACGoD,OAAOE,KAAKN,GACV8C,QAAO,SAACvG,GAAD,OAAkByD,EAAYzD,GAAc8B,SACnDe,KAAI,SAACqC,EAAcC,GAClB,OACE,qBAAKvE,UAAU,cAAf,SACE,cAAC,EAAD,CACEqE,IAAKA,EACLE,aAAcA,EACdD,aAAcA,EACdzB,YAAaA,EACbF,aAAcA,EACdc,gBAAiBA,EACjBvE,QAASA,EACT0D,SAAUA,EACVjE,mBAAoBA,EACpBC,kBAAmBA,qBC0BhCgH,MA5Ef,YAYI,IAXFhD,EAWC,EAXDA,SACAD,EAUC,EAVDA,aACAc,EASC,EATDA,gBACAY,EAQC,EARDA,IACAwB,EAOC,EAPDA,kBACAC,EAMC,EANDA,cAGAC,GAGC,EALDC,eAKC,EAJDC,gBAIC,EAHDF,cACApH,EAEC,EAFDA,mBACAC,EACC,EADDA,kBAUA,OACE,8BACG+D,EAAa0B,GAAKpD,UAAUiF,QAC3B,cAACV,EAAA,EAAD,UACE,eAACA,EAAA,EAAUC,KAAX,CAAgBC,SAAU9C,EAA1B,UACE,sBACI5C,UAAU,oBACVa,QAAS,kBAbC,SAACwD,GACvB8B,QAAQC,IAAI/B,GACZyB,EAAczB,GACdwB,GAAkB,GAUSQ,CAAgBhC,IAFnC,UAIK,IACD,cAAC,IAAD,OAEJ,cAACmB,EAAA,EAAU/F,OAAX,UACE,qBAAKO,UAAU,oBAAf,SACG2C,EAAavB,cAAgB6B,OAC5B,qCACGoB,EADH,WACgB1B,EAAa0B,GAAKiC,WADlC,gBAC2D,IACxD3D,EAAa0B,GAAKlC,UAFrB,IAEiC,IAC9BQ,EAAa0B,GAAKpD,UAAUiF,OAAQ,OAGvC,oDACevD,EAAa0B,GAAKlC,UADjC,IAC6C,IAC1CQ,EAAa0B,GAAKpD,UAAUiF,OAAQ,WAK7C,cAACV,EAAA,EAAU3F,KAAX,UACE,qBAAKG,UAAU,aAAf,SACE,8BACGiD,OAAOE,KAAKR,EAAa0B,GAAKpD,WAAWgB,KACxC,SAAC/C,GAAD,OACE,cAAC,EAAD,CACEmF,IAAKA,EACLZ,gBAAiBA,EACjBvE,QAASA,EACT2D,YAAaF,EAAa0B,GAAKpD,UAAU/B,GACzC0D,SAAUA,EACVD,aAAcA,EACdhE,mBAAoBA,EACpBC,kBAAmBA,iBAtCnBmH,MCpBTQ,EATE,SAACC,EAAMC,GAEhB,IAAIC,EAAU,gCAAkCC,mBAAmBC,KAAKC,UAAUL,IAC9EM,EAAeC,SAASC,cAAc,KAC1CF,EAAaG,aAAa,OAAYP,GACtCI,EAAaG,aAAa,WAAYR,GACtCK,EAAaI,S,+BCGfC,EAAiB/D,EAAYgE,GAC7BC,EAAqB,GAE3BpE,OAAOE,KAAKgE,GAAgBlF,KAAI,SAACqF,EAAKxC,GACpCuC,EAAmBlG,KAAKmG,MAG1B,IAAMC,EAAkBnE,EAAYoE,QAC9BC,EAAsB,GACtBC,EAAc,GAEpBzE,OAAOE,KAAKoE,GAAiBtF,KAAI,SAACqF,EAAKxC,GACrC2C,EAAoBtG,KAAKmG,GAES,iBAA9BC,EAAgBD,GAAKtG,MACvB0G,EAAYvG,KAAKoG,EAAgBD,GAAKpF,SAI1C,IAQIS,EAREgF,EAAc,GAEpBN,EAAmBhE,SAAQ,SAACuE,GACrBH,EAAoBlE,SAASqE,IAChCD,EAAYxG,KAAKyG,MAOrB,IAAMC,EAAmB,SAACC,EAAKC,EAAYC,EAAY9F,GACrD,IAAM+F,EAAgB/F,EAAKgG,SAAS,cAQpC,MAPmB,WAAfF,EACFF,EAAMK,WAASC,QAAQH,EAAgBF,EAAY,CAAEM,KAAM,cAAeC,QAAQC,QACzD,SAAfP,GAA0C,SAAfA,GAA2C,IAAjB9F,EAAKsG,QACpEV,EAAMK,WAASC,QAAT,UAAoBH,EAApB,UAA2C,CAAEI,KAAM,cAAeC,QAAQC,QACxD,SAAfP,GAA2C,IAAjB9F,EAAKsG,UACxCV,EAAMK,WAASC,QAAT,UAAoBH,EAApB,UAA2C,CAAEI,KAAM,cAAeC,QAAQC,SAE3ET,GA4BHW,EAAwB,SAACC,EAAYC,EAAMzG,EAAM0G,EAASZ,GAsB9D,OAdAY,EAAU,CACRzG,UAAW,KACXmB,WAAYoF,EACZpC,WATE0B,EAAWzE,SAAS,aAAekE,EAAoBlE,SAASmF,GACnD,KAEAC,EAOfE,UAAW3G,EAAKsG,QAChBvH,UAAW,IAGT0G,EAAYpE,SAASmF,GACvBE,EAAQ3H,UAAYkG,EAAeuB,GAEnCE,EAAQ3H,UAAYsG,EAAgBmB,GAG/BE,GAIHE,GAA0B,SAACF,EAASF,EAAYC,EAAMI,EAAS7G,EAAM4F,EAAKE,EAAY7F,GAqB1F,OAlBAyG,EAAU,CACRtF,WAAYoF,EACZpC,WAAYqC,EACZI,UACAF,UAAW3G,EAAKsG,QAChBQ,mBAAoBlB,GAIH,WAAfE,EACFY,EAAO,2BACFA,GAAYK,EAAWC,KAAK/G,IAET,SAAf6F,GAAwC,SAAfA,IAClCY,EAAO,2BACFA,GAAYjG,EAAauG,KAAK/G,KAG9ByG,GAIHO,GAAc,SAACC,EAAWC,EAASrB,EAAYsB,GACnD,IAAMC,EAAcpB,WAASqB,WAAWJ,EAAW,cAEnD,MADiB,UAAMG,EAAYrB,SAAS,cAA3B,YAA4CmB,EAA5C,YAAuDrB,GAAvD,OAAoEsB,IAwOxEG,GAjOY,SAACL,EAAWE,EAAUtB,EAAY0B,EAAOC,GAYlE,IAAIC,EAVAF,EACF/G,EAAe+G,EACS,SAAf1B,EACTrF,EAAekH,EACS,SAAf7B,IACTrF,EAAemH,GAGjB3D,QAAQC,IAAI,cAAeuD,GAGvBA,IAEAC,EADoB,IAAlBD,EAAW,IAA8B,IAAlBA,EAAW,GAClB,CAAC,SAAU,UACF,IAAlBA,EAAW,IAA8B,IAAlBA,EAAW,GACzB,CAAC,SAAU,UAEX,CAAC,SAAU,gBAKTI,IAApBH,IACFA,EAAkB,CAAC,SAAU,WAG/B,IACI9B,EADA5F,EAAOiG,WAASqB,WAAWJ,EAAW,cAE1CtB,EAAMD,EAAiBC,EAAK,SAAUE,EAAY9F,GAClD,IAEIyG,EAFAqB,EAAW7B,WAASqB,WAAWJ,EAAW,cAC1Ca,EAAkB,EAGpBtB,EADiB,WAAfX,EACK,EAEA,EAET,IACIxB,EACA0D,EAFAnB,EAAU,EAIV5G,EAAY,EAOhBqE,EAtI6B,SAACwB,EAAYmC,EAAgBR,GAC1D,GAAmB,WAAf3B,EACFmC,EAAc,aACZC,WAAYT,EACZU,iBAAkBpB,EAAWoB,iBAC7BC,gBAAiBrB,EAAWqB,iBACzBH,OAEA,CACL,IAAMI,EAAe5H,EAAayH,WAC5BI,EAAa7H,EAAa0H,iBAEhCF,EAAc,aACZC,WAAYG,EACZF,iBAAkBG,EAClBF,gBAAiB3H,EAAa2H,iBAC3BH,GAIP,OAAOA,EAkHAM,CAAuBzC,EALP,CACrBA,aACAkB,KAAM,IAGkDS,GAGvC,WAAf3B,EACFkC,EAAiBjB,EAAWC,KAAK5G,OACT,SAAf0F,EACTkC,EAAiBL,EAAaX,KAAK5G,OACX,SAAf0F,IACTkC,EAAiBJ,EAAaZ,KAAK5G,QAGrC,IAAMoI,EAAWlE,EAAK4D,WACtBjE,QAAQC,IAAI,YAAasE,GAGzB,IAFA,IAAI9H,EAAW4D,EAAK6D,iBAEbH,EAAiB,GAAG,CACzB,IAAMxB,EAAaxG,EAAKgG,SAAS,cAI7B/F,EAAY,IAAMqE,EAAK8D,kBAEzB9D,EAAKmE,WAAaxB,GAAYC,EAAWV,EAAYV,EAAYsB,IAGnE,IAAIV,OAAO,EAEPjB,EAAYpE,SAASmF,IAAehB,EAAYnE,SAASmF,GAC3DE,EAAUH,EAAsBC,EAAYC,EAAMzG,EAAM0G,EAASZ,IAGjEY,EAAUE,GAAwBF,EAASF,EAAYC,EAAMI,EAAS7G,EAAM4F,EAAKE,EAAY7F,GAI7F+H,GAAkB,EAClB/H,GAAa,GAEfqE,EAAK0C,KAAKR,GAAcE,EAGxB,IAAMgC,EAAWzC,WAASqB,WAAWJ,EAAW,cAAclB,SAAS,cACjE2C,EAAgB3I,EAAKgG,SAAS,cAEpC,GAAI+B,IAAoBzD,EAAK8D,iBAAkC,WAAftC,EAC9C9F,EAAOA,EAAK4I,KAAK,CAAEC,MAAO,IAAKC,IAAI,CAAExC,QAAS,IAC9CV,EAAMD,EAAiBC,EAAK,SAAUE,EAAY9F,GAClD6G,GAAW,EACXJ,GAAQ,OAIH,GAAmB,SAAfX,GAA8E,MAArDxB,EAAK0C,KAAKhH,EAAKgG,SAAS,eAAe/F,WAAsC,IAAjBD,EAAKsG,QAAe,yBAElH,IAAIyC,OAAgB,EACC,IAAjB/I,EAAKsG,QACPyC,EAAmB,EAAI/I,EAAKsG,QACF,IAAjBtG,EAAKsG,SACdyC,EAAmB,EACnBtC,GAAQ,GAERsC,EAD0B,IAAjB/I,EAAKsG,QACK,EAEA,EAKrB,IADA,IAAM0C,EAAa,GACVxG,EAAI,EAAGA,GAAKuG,EAAkBvG,GAAK,EAAG,CAC7C,IAAMyG,EAAUjJ,EAAK4I,KAAK,CAAE5B,KAAMxE,IAAKwD,SAAS,cAC1CkD,EAAajD,WAASqB,WAAW2B,EAAS,cAAc3C,QAC9DrC,QAAQC,IAAI,OAAQgF,GAChBA,EAAa,GACfF,EAAW/J,KAAKgK,GAOpB,IADA,IAAME,EAAsB,GACnBC,EAAI,EAAGA,EAAIJ,EAAW5I,OAAQgJ,GAAK,EAAG,CAC7C,IAAIC,OAAc,EAEhBA,EADE5D,EAAYpE,SAAS2H,EAAWI,IACjB,KAEA,IAAMA,EAEzB,IAAME,EAAW,CACftJ,KAAMgJ,EAAWI,GACjBG,UAAWF,GAEbF,EAAoBlK,KAAKqK,GAI3B,IAAIE,OAAgB,EAElBA,EADE/D,EAAYpE,SAAS8H,EAAoBA,EAAoB/I,OAAS,GAAGJ,MACxDmJ,EAAoBA,EAAoB/I,OAAS,GAAGJ,KAEpDmJ,EAAoBA,EAAoB/I,OAAS,GAAGJ,KAKzE,IAAImH,OAAO,EAETA,EADE1B,EAAYpE,SAAS8H,EAAoBA,EAAoB/I,OAAS,GAAGJ,MACjEmJ,EAAoBA,EAAoB/I,OAAS,GAAGJ,KAEpDmJ,EAAoBA,EAAoB/I,OAAS,GAAGJ,KAMhE,IAFA,IAAIyJ,OAAa,EA5DiG,WA8DzGC,GACP,IAAMC,EAAgB1D,WAASqB,WAAW6B,EAAoBO,GAAG1J,KAAM,cAAcsG,QAC/E2C,EAAUhD,WAASqB,WAAW6B,EAAoBO,GAAG1J,KAAM,cACjE4F,EAAMD,EAAiBC,EAAK,SAAUE,EAAYmD,GAElD,IAAMW,EAAuB,SAAClD,GAC5BpC,EAAK0C,KAAKmC,EAAoBO,GAAG1J,MAAQ0G,EACzCpC,EAAK0C,KAAKmC,EAAoBO,GAAG1J,MAAMC,UAAYkJ,EAAoBO,GAAGH,WAGxEJ,EAAoBO,GAAG1J,OAASwJ,EAElCI,EADAlD,EAAUE,GAAwBF,EAASyC,EAAoBO,GAAG1J,KAAMyG,EAAMkD,EAAeV,EAASrD,EAAKE,EAAY,MAE9GqD,EAAoBO,GAAG1J,OAASmH,GAEzCyC,EADAlD,EAAUE,GAAwBF,EAASyC,EAAoBO,GAAG1J,KAAMyG,EAAMkD,EAAeV,EAASrD,EAAKE,EAAY,MAEvH2D,EAAgB/C,EAAQzG,WAEfwF,EAAYpE,SAAS8H,EAAoBO,GAAG1J,MAErD4J,EADAlD,EAAUH,EAAsB4C,EAAoBO,GAAG1J,KAAMyG,EAAMwC,EAASvC,EAASZ,IAIrF8D,EADAlD,EAAUE,GAAwBF,EAASyC,EAAoBO,GAAG1J,KAAMyG,EAAMkD,EAAeV,EAASrD,EAAKE,EAAY,OAtBlH4D,EAAI,EAAGA,EAAIP,EAAoB/I,OAAQsJ,GAAK,EAAI,EAAhDA,GA4BT,OAFApF,EAAKmE,WAAaxB,GAAYC,EAAWC,EAASrB,EAAYsB,GAC9D9C,EAAK8D,gBAAkBqB,EACvB,QA1FkH,GA0FlH,WAKK/I,IAAa8H,EAASpI,OAAS,GACtBuI,IAAkBD,GAA2B,WAAf5C,GAC1Ce,EAAU,EAEVnG,EAAW,EACXV,EAAOA,EAAK4I,KAAK,CAAEC,MAAO,IAAKC,IAAI,CAAExC,QAASkC,EAAS9H,KACvDoH,EAAWA,EAASc,KAAK,CAAEC,MAAO,IAC7BtD,EAAoBlE,SAASmF,KAChCC,GAAQ,GAEVb,EAAMD,EAAiBC,EAAK8B,EAAgB,GAAI5B,EAAY9F,KAG5DU,GAAY,EACZV,EAAOA,EAAK8I,IAAI,CAAExC,QAASkC,EAAS9H,KAC/B+E,EAAYpE,SAASmF,KACxBK,GAAW,GAEbjB,EAAMD,EAAiBC,EAAK8B,EAAgB,GAAI5B,EAAY9F,IAIhE+H,GAAmB,EAGrB,OADA9D,QAAQC,IAAI,OAAQI,GACbA,G,oBC3VHuF,GAAkB,SAACvF,GAEvB,IAAIwF,EAASjF,SAASC,cAAc,YACpCgF,EAAOC,MAAMC,SAAW,QACxBF,EAAOC,MAAME,KAAO,IACpBH,EAAOC,MAAMG,IAAM,IACnBJ,EAAOC,MAAMI,QAAU,IAEvBL,EAAO1L,MAAQsG,KAAKC,UAAUL,OAAMuD,EAAW,GAC/ChD,SAASuF,KAAKC,YAAYP,GAC1BA,EAAOQ,QACPR,EAAOS,SACP1F,SAAS2F,YAAY,QACrB3F,SAASuF,KAAKK,YAAYX,IA+PbY,GA1PkB,SAAC,GAW3B,IAVLjK,EAUI,EAVJA,aACAc,EASI,EATJA,gBACAoJ,EAQI,EARJA,SACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,UAEAC,GAII,EALJC,SAKI,EAJJD,aACArO,EAGI,EAHJA,mBACAC,EAEI,EAFJA,kBACAsO,EACI,EADJA,WAEA,EAA4CrO,oBAAS,GAArD,mBAAOsO,EAAP,KAAuBtH,EAAvB,KACA,EAAoChH,mBAAS,IAA7C,mBAAOyE,EAAP,KAAmBwC,EAAnB,KAEA,EAAwCjH,mBAAS,MAAjD,mBAAOkH,EAAP,KAAqBE,EAArB,KAEMmH,EAAkB,SAACC,GACvBlH,QAAQC,IAAI,YAAaiH,GAEzBP,EAAYO,GACZL,EAAYK,EAASnE,OAIjBoE,EAAuB,uCAAG,sBAAAC,EAAA,sDAC9BhH,EAASsG,EAAU,gCADW,2CAAH,qDAUvB7G,EAAiB,WAErBC,EAD6BF,EAAe,IAKxCyH,EAAqB,SAAChH,GAG1B,IAAIiH,EAFJ1B,GAAgBvF,GAIdiH,EADEjH,EAAKkH,SACMb,EAASa,SAASC,KAErB,wEAAoEZ,EAAUpC,WAA9E,SAGZxE,QAAQC,IAAI,cAAeqH,GAE3BG,OAAOC,KAAKJ,EAAY,WAGpBK,EAAe,uCAAG,WAAOhJ,GAAP,uBAAAyI,EAAA,sEAEdQ,EAAQb,EAAWpI,GACnBsE,EAAYjB,WAASqB,WACzBuE,EAAMC,QAAQrD,WAAWsD,MAAM,EAAG,IAClC,cACA/F,SAAS,cAGTF,EADE+F,EAAM/M,KAAKuC,SAAS,MACT,OAEA,OAEToH,EACJoD,EAAMC,QAAQrD,WAAWoD,EAAMC,QAAQrD,WAAWrI,OAAS,GAdzC,SAeDmH,GACjBL,EACAuB,EACA3C,EACA6E,GAnBkB,OAedrG,EAfc,OAqBpBuF,GAAgBvF,GAChBoH,OAAOC,KAAP,wEACmErH,EAAKmE,WADxE,SAEE,UAxBkB,kDA2BpBxE,QAAQC,IAAR,MA3BoB,0DAAH,sDA+BrB,OACE,qCAEGzD,GACCA,EAAavB,cAAgB6B,QAC7BA,OAAOE,KAAKR,GAAcL,OAAS,GACjC,gCACE,sBAAKtC,UAAU,4BAAf,UACE,cAACW,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLS,QAAS,kBAAM2M,EAAmBT,IAHpC,iCAMU,IACV,cAACpM,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLS,QA3EmB,WAC/B0F,EAASwG,EAAD,mBAAwBA,EAAUpC,WAAlC,gBAuEE,6CAQF,qBAAK3K,UAAU,sBAAf,SACE,cAACW,EAAA,EAAD,CAAQE,QAASmF,EAAjB,yBAED/C,OAAOE,KAAKR,GAAcV,KAAI,SAACoC,EAAKzB,GACnC,OACE,mCACE,8BACE,cAAC,EAAD,CACEA,SAAUA,EACVD,aAAcA,EACdc,gBAAiBA,EACjBY,IAAKA,EACLwB,kBAAmBA,EACnBC,cAAeA,EACfE,eAAgBA,EAChBD,aAAcA,EACdE,gBAAiBA,EACjBtH,mBAAoBA,EACpBC,kBAAmBA,WAO5BuO,GAAkB7J,GACjB,cAAC,EAAD,CACE/E,KAAM4O,EACN3O,OAAQ,kBAAMqH,GAAkB,IAChCpH,aAAckE,EACdhB,gBAAiB8B,EACjBoC,kBAAmBA,EACnBnH,WAAY4E,EACZ3E,mBAAoBA,EACpBC,kBAAmBA,OAM7B,sBAAKoB,UAAU,wBAAf,UACE,cAACW,EAAA,EAAD,CACEX,UAAU,kBACVa,QAAS,kBAAMuM,EAAgBc,KAFjC,uBAMA,cAACvN,EAAA,EAAD,CACEX,UAAU,kBACVa,QAAS,kBAAMuM,EAAgBe,KAFjC,0BAODxL,GAAgBA,EAAavB,cAAgBC,OAASwL,GACrD,sBAAK7M,UAAU,sBAAf,UACE,sBAAKA,UAAU,4BAAf,UACE,cAACW,EAAA,EAAD,CACEX,UAAU,kBACVa,QAAS,kBAAM2M,EAAmBX,IAFpC,iCAMA,cAAClM,EAAA,EAAD,CACEX,UAAU,kBACVa,QAASyM,EAFX,uCAOF,qBAAKtN,UAAU,2BAAf,SACGkN,EAAWjL,KAAI,SAAC8L,EAAOjJ,GAEtB,OAAI+H,EAASzC,WAAW9H,OAAS,EAE7B,mCACGyL,EAAM/M,KAAKuC,SAAS,OACnB,eAAC5C,EAAA,EAAD,CACEX,UAAU,eACVa,QAAS,kBAAMiN,EAAgBhJ,IAFjC,oBAIUiJ,EAAM/M,UAOpB,mCACG+M,EAAM/M,KAAKuC,SAAS,OACnB,eAAC5C,EAAA,EAAD,CACEX,UAAU,eACVa,QAAS,kBAAMiN,EAAgBhJ,IAFjC,oBAIUiJ,EAAM/M,eAQ5B,qBAAKhB,UAAU,sBAAf,SACE,cAACW,EAAA,EAAD,CAAQE,QAASmF,EAAjB,yBAEDrD,EAAaV,KAAI,SAACoC,EAAKzB,GACtB,OACE,cAAC,EAAD,CACEA,SAAUA,EACVD,aAAcA,EACdc,gBAAiBA,EACjBY,IAAKzB,EACLiD,kBAAmBA,EACnBC,cAAeA,EACfE,eAAgBA,EAChBD,aAAcA,EACdE,gBAAiBA,EACjBrH,kBAAmBA,EACnBD,mBAAoBA,OAIzBwO,GACC,cAAC,EAAD,CACE5O,KAAM4O,EACN3O,OAAQ,kBAAMqH,GAAkB,IAChCpH,aAAckE,EACdhB,gBAAiB8B,EACjBoC,kBAAmBA,EACnBnH,WAAY4E,EACZ1E,kBAAmBA,EACnBD,mBAAoBA,W,SCzOnByP,ICoLXC,GC1JAC,GACAzD,GACA0D,GACAC,GACAC,GACA7G,GF/BWwG,GAjCf,YAAuE,IAA9ClB,EAA6C,EAA7CA,WAAYzJ,EAAiC,EAAjCA,gBAAiBiL,EAAgB,EAAhBA,aAUpD,OACE,gCACE,yCACA,cAACC,GAAA,EAAD,CAAK/N,QAAQ,QAAQZ,UAAU,eAA/B,SAEGkN,EAAWjL,KAAI,SAAC8L,EAAOjJ,GACtB,OACE,cAAC6J,GAAA,EAAIC,KAAL,CAEE/N,QAAS,kBAlBK,SAACkN,GACxBtK,EACCmD,KAAKiI,MAAMjI,KAAKC,UAAUkH,EAAMC,QAAQ9E,QAE1CwF,EACE9H,KAAKiI,MAAMjI,KAAKC,UAAUkH,EAAMC,WActBc,CAAkBf,IAEpBrI,SAAUZ,EALZ,SAOGiJ,EAAM/M,gBCzBf+N,GAAc,iBAsBdC,GAAsB,SAACC,EAAapM,GACtC,IAAIqM,EAAgB,GAYpB,OAXIrM,EAAY3B,MAAMoB,OAAS,IACP,aAAhB2M,EACAC,EAAgB,kBACO,YAAhBD,EACPC,EAAgB,iBACO,cAAhBD,IACPC,EAAgB,qBAIxBA,EA/BsB,SAACC,EAAWrM,GAKlC,GAJIA,EAAUsM,SACVD,GAAarM,EAAUsM,QAGtBtM,EAAU5B,MAAMoB,OAAS,EAAG,CAC7B,IAAK,IAAIsJ,EAAI,EAAGA,EAAI9I,EAAU5B,MAAMoB,OAAQsJ,GAAI,EACxC9I,EAAU5B,MAAM0K,GAAG5M,IACnBmQ,GAAS,aAAUrM,EAAU5B,MAAM0K,GAAG5K,KAA7B,aAAsC8B,EAAU5B,MAAM0K,GAAG5M,IAAzD,OAETmQ,GAAS,YAASrM,EAAU5B,MAAM0K,GAAG5K,KAA5B,MAGjBmO,GAAa,KAEjB,OAAOA,EAgBSE,CAAmBH,EAAerM,IAiKhDyM,GAAW,CACT,EAAG,SACH,EAAG,UACH,EAAG,YACH,EAAG,WACH,EAAG,SACH,EAAG,WACH,EAAG,UAOLtN,GAAQ,GACVuN,GAAa,GACXnF,GAAa,GACboF,GAAY,GACdC,GAAY,EAEVC,GAAY,GAwBHC,GAtBgB,SAACnJ,IAlLH,SAACA,GAE1BvD,OAAOE,KAAKqD,EAAK0C,MAAM7F,SAAQ,SAACnB,GAC5BF,GAAMb,KAAKe,MAIfF,GAAMqB,SAAQ,SAACnB,GACXqN,GAAWpO,KAAKqF,EAAK0C,KAAKhH,GAAM2G,eAEpC0G,GAAa,YAAI,IAAIK,IAAIL,KAAaM,QAG3BxM,SAAQ,SAACyM,GAChB1F,GAAWjJ,KAAKmO,GAASQ,OAI7BzB,GAAW7H,EAAK0C,KAAKlH,GAAMA,GAAMM,OAAQ,IAAIgE,WAAa,EAG1D,IAAM,IAAIyJ,EAAI,EAAGA,EAAI1B,GAAU0B,GAAK,EAAG,CAEnC,IADA,IAAMpH,EAAO,GACJ2C,EAAI,EAAGA,EAAItJ,GAAMM,OAAQgJ,GAAK,EACnCnF,QAAQC,IAAII,EAAK0C,KAAKlH,GAAMsJ,IAAIhF,YAC5BE,EAAK0C,KAAKlH,GAAMsJ,IAAIhF,aAAemJ,IACnC9G,EAAKxH,KAAKqF,EAAK0C,KAAKlH,GAAMsJ,IAAIhI,YAGtCkM,GAAUrO,KAAKwH,GACf8G,IAAa,EAKjB,IAnCmC,eAmC1BO,GACL,IAAIC,EAAc,GAClBV,GAAWlM,SAAQ,SAACgB,GAChB4L,EAAY9O,KAAK,QAKrBgF,QAAQC,IAAImJ,IACZ,IAAK,IAAIW,EAAI,EAAGA,EAAIV,GAAUQ,GAAG1N,OAAQ4N,GAAK,EAC1C,IAAK,IAAIC,EAAI,EAAGA,EAAIZ,GAAWjN,OAAQ6N,GAAK,EAGxC,GAFAhK,QAAQC,IAAII,EAAK0C,KAAKsG,GAAUQ,GAAGE,IAAIrH,YAAc0G,GAAWY,IAE5D3J,EAAK0C,KAAKsG,GAAUQ,GAAGE,IAAIrH,YAAc0G,GAAWY,GACpD,GAAI3J,EAAK0C,KAAKsG,GAAUQ,GAAGE,IAAIjP,UAAUnC,MAAO,CAE5C,IAAM4J,EAAaP,WAASC,QAAQ5B,EAAK0C,KAAKsG,GAAUQ,GAAGE,IAAIlH,mBAAoB,CAAEX,KAAM0G,KAAe7G,SAAS,SACnH+H,EAAYE,GAAZ,WAAqBzH,EAArB,yBAAgDlC,EAAK0C,KAAKsG,GAAUQ,GAAGE,IAAI/N,UAA3E,UAGAgE,QAAQC,IAAI,iBAAkBI,EAAK0C,KAAKsG,GAAUQ,GAAGE,IAAIjP,UAAUmP,aACnEH,EAAYE,GAAZ,UAAoB3J,EAAK0C,KAAKsG,GAAUQ,GAAGE,IAAIjP,UAAUmP,YAAzD,aAAyE5J,EAAK0C,KAAKsG,GAAUQ,GAAGE,IAAIjP,UAAUoP,SAA9G,KAKhBX,GAAUvO,KAAK8O,IA1BVD,EAAI,EAAGA,EAAIR,GAAUlN,OAAQ0N,GAAK,EAAI,EAAtCA,GAkJTM,CAAqB9J,GAGrB,IAAI+J,EAAS,uEAad,OAVCA,EAzH4B,SAACA,GAE7BA,GAAU,WACV,IAAK,IAAIJ,EAAI,EAAGA,EAAI/F,GAAW9H,OAAQ6N,GAAK,EACxCI,GAAM,WAAQnG,GAAW+F,GAAnB,MAGVI,GAAU,cACV,IAAK,IAAIC,EAAI,EAAGA,EAAIpG,GAAW9H,OAAQkO,GAAK,EACxCD,GAAU,WAGdA,GAAU,KAGV,IAAK,IAAIE,EAAI,EAAGA,EAAIf,GAAUpN,OAAQmO,GAAK,EAAG,CAC1CF,GAAM,YAASE,EAAT,MACN,IAAK,IAAID,EAAI,EAAGA,EAAId,GAAUe,GAAGnO,OAAQkO,GAAK,EAC1CD,GAAM,WAAQb,GAAUe,GAAGD,GAArB,MAEVD,GAAU,KAEd,OAAOA,EAmGEG,CAAwBH,GAIjCA,EAnGuB,SAACA,EAAQ/J,GAEhC,IAAK,IAAI9B,EAAI,EAAGA,EAAIzB,OAAOE,KAAKqD,EAAK0C,MAAM5G,OAAQoC,GAAK,EAAG,CACvD,IAAI4J,OAAS,EAEb,GAAI9H,EAAK0C,KAAKlH,GAAM0C,IAAIsE,mBAAoB,CAGxC,IAAM6B,GADNyD,EAAYnG,WAASC,QAAQ5B,EAAK0C,KAAKlH,GAAM0C,IAAIsE,mBAAoB,CAAEX,KAAM0G,MAC7C7G,SAAS,aACzCqI,GAAM,YAAS1F,EAAT,kBAAgCrE,EAAK0C,KAAKlH,GAAM0C,IAAI4B,WAApD,wBAA8EE,EAAK0C,KAAKlH,GAAM0C,IAAIvC,UAAlG,+BAAkIqE,EAAK0C,KAAKlH,GAAM0C,IAAIvC,UAAtJ,4BAAmLqE,EAAK0C,KAAKlH,GAAM0C,IAAIvC,UAAvM,WAENoO,GAAM,WAAQ/J,EAAK0C,KAAKlH,GAAM0C,IAAIzD,UAAUnC,MAAtC,MAEN,IAAM6R,EAAYrC,EAAUpG,SAAS,KACrCqI,GAAM,wBAAqBI,EAArB,KAGW,mBAFArC,EAAUpG,SAAS,OAGhCqI,GAAU,QAEd,IAAM9B,EAAaH,EAAUpG,SAAS,QACtCqI,GAAM,WAAQ9B,EAAR,cAGNH,EAAYnG,WAASqB,WAAWhD,EAAK0C,KAAKlH,GAAM0C,IAAIpB,WAAY,cAAc4E,SAAS,cACvFqI,GAAM,YAASjC,EAAT,MACyC,OAA3C9H,EAAK0C,KAAKlH,GAAM0C,IAAIzD,UAAUoP,WAC9BE,GAAM,cAEVA,GAAM,UAAO/J,EAAK0C,KAAKlH,GAAM0C,IAAIzD,UAAUmP,YAArC,aAAqD5J,EAAK0C,KAAKlH,GAAM0C,IAAIzD,UAAUD,MAI7F,IAAM4P,EAAmBpK,EAAK0C,KAAKlH,GAAM0C,IAAIzD,UAAU4P,QACjDC,EAAmBtK,EAAK0C,KAAKlH,GAAM0C,IAAIzD,UAAU8P,SASvD,GAPID,GACIA,EAAiBzL,WAAWnE,QAC5BqP,GAAU,oBACVA,GAAM,WAAQO,EAAiBzL,WAAWnE,MAAM,GAAGF,KAA7C,aAAsD8P,EAAiBzL,WAAWnE,MAAM,GAAGlC,IAA3F,UAIV4R,EAGA,IAFA,IAAMI,EAAe,CAAC,WAAY,UAAW,aACvCC,EAAe,CAACL,EAAiB1L,SAAU0L,EAAiBzL,QAASyL,EAAiBxL,WACnF8L,EAAI,EAAGA,EAAIF,EAAa1O,OAAQ4O,GAAK,EAC1CX,GAAUvB,GAAoBgC,EAAaE,GAAID,EAAaC,IAIhEJ,GACIA,EAAiBxL,aAAapE,OAC1B4P,EAAiBxL,aAAapE,MAAMoB,OAAS,IACjDiO,GAAU,sBACVA,GAAM,WAAQO,EAAiBxL,aAAapE,MAAM,GAAGF,KAA/C,aAAwD8P,EAAiBxL,aAAapE,MAAM,GAAGlC,IAA/F,UAIduR,GAAU,OAEd,OAAOA,EAsCEY,CAHTZ,GAAU,KAG0B/J,GAGpC+J,GAAU,uNAEVpK,QAAQC,IAAImK,GACNA,GEvBKa,GAjNI,SAAC,GAGZ,IAFN3N,EAEK,EAFLA,gBACAiL,EACK,EADLA,aAGA,EAAkC7P,mBAAS,IAA3C,mBAAOuK,EAAP,KAAkBiI,EAAlB,KACA,EAAoCxS,mBAAS,IAA7C,mBAAO8L,EAAP,KAAmB2G,EAAnB,KACA,EAAoCzS,mBAAS,IAA7C,mBAAOmJ,EAAP,KAAmBuJ,EAAnB,KACA,EAAgC1S,mBAAS,MAAzC,mBAAO+L,EAAP,KAAiB4G,EAAjB,KACA,EAAkC3S,mBAAS,MAA3C,mBAAO4S,EAAP,KAAkBC,EAAlB,KAqEA,OACE,mCACE,sBAAK1R,UAAU,cAAf,UACE,8BACE,+DAEF,sBAAKA,UAAU,uBAAf,UACE,eAACF,EAAA,EAAD,CAAME,UAAU,aAAhB,UACE,sBAAKA,UAAU,eAAf,UACA,eAACF,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaC,UAAU,WAA7C,UACE,cAACH,EAAA,EAAKI,MAAN,yBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLE,MAAO8I,EACP7I,SAAU,SAACC,GAAD,OAAO6Q,EAAa7Q,EAAEC,OAAOH,aAI3C,eAACR,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaC,UAAU,kBAA7C,UACE,cAACH,EAAA,EAAKI,MAAN,2BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,SACLE,MAAOqK,EACPpK,SAAU,SAACC,GAAD,OAAO8Q,EAAc9Q,EAAEC,OAAOH,aAI5C,eAACR,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaC,UAAU,kBAA7C,UACE,cAACH,EAAA,EAAKI,MAAN,0BACA,eAACJ,EAAA,EAAKY,OAAN,CACE,aAAW,cACXH,SAAU,SAACC,GAAD,OAAO+Q,EAAc/Q,EAAEC,OAAOH,QAF1C,UAIE,wDACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,2BAIY,WAAf0H,GACC,sBAAKhI,UAAU,cAAf,UACE,eAACF,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaC,UAAU,kBAA7C,UACE,cAACH,EAAA,EAAKI,MAAN,6BACA,eAACJ,EAAA,EAAKY,OAAN,CACE,aAAW,eACXH,SAAU,SAACC,GAAD,OAAOgR,EAAYhR,EAAEC,OAAOH,QAFxC,UAIE,gDACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,SAAd,0BAGJ,eAACR,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaC,UAAU,kBAA7C,UACE,cAACH,EAAA,EAAKI,MAAN,6BACA,eAACJ,EAAA,EAAKY,OAAN,CACE,aAAW,eACXH,SAAU,SAACC,GAAD,OAAOkR,EAAalR,EAAEC,OAAOH,QAFzC,UAIA,gDACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,SAAd,gCAMR,sBAAKN,UAAU,0BAAf,UACE,cAACW,EAAA,EAAD,CACEX,UAAU,cACVY,QAAQ,UACRR,KAAK,SACLS,QAAS,YA9IA,WACnB,IAAM2F,EAAOiD,GAAmBL,EAAWuB,EAAY3C,EAAY,KAAM,MACzE7B,QAAQC,IAAI,eAAgBI,GAC5B/C,EAAgBmD,KAAKiI,MAAMjI,KAAKC,UAAUL,EAAK0C,QAC/CwF,EAAa9H,KAAKiI,MAAMjI,KAAKC,UAAUL,KA2I3BmL,IALJ,6BAUA,cAAChR,EAAA,EAAD,CACEX,UAAU,cACVY,QAAQ,UACRR,KAAK,SACLS,QAAS,YA9JE,WACrB,IAAM2F,EAAOiD,GAAmBL,EAAWuB,EAAY3C,EAAY,KAAM,MACzEzB,EAASC,EAAD,UAAUA,EAAKmE,WAAf,UA6JIiH,IALJ,+BAUA,cAACjR,EAAA,EAAD,CACEX,UAAU,cACVY,QAAQ,UACRR,KAAK,SACLS,QAAS,YA3JG,WACpB,IAAM2F,EAAOiD,GAAmBL,EAAWuB,EAAY3C,EAAY,KAAM,MACzE7B,QAAQC,IAAI,OAAQI,GAEpB,IAAIwF,EAASjF,SAASC,cAAc,YACpCgF,EAAOC,MAAMC,SAAW,QACxBF,EAAOC,MAAME,KAAO,IACpBH,EAAOC,MAAMG,IAAM,IACnBJ,EAAOC,MAAMI,QAAU,IAEvBL,EAAO1L,MAAQsG,KAAKC,UAAUL,OAAMuD,EAAW,GAC/ChD,SAASuF,KAAKC,YAAYP,GAC1BA,EAAOQ,QACPR,EAAOS,SACP1F,SAAS2F,YAAY,QACrB3F,SAASuF,KAAKK,YAAYX,GAG1B4B,OAAOC,KAAK,+DAAgE,UA0IlEgE,IALJ,gCAUA,cAAClR,EAAA,EAAD,CACEX,UAAU,cACVY,QAAQ,UACRR,KAAK,SACLS,QAAS,YAhJI,WACrB,IAAM0O,EAAa,CACjB,OAAU,EACV,QAAW,EACX,UAAa,EACb,SAAY,EACZ,OAAU,EACV,SAAY,EACZ,OAAU,GAIR/I,EAAOiD,GAAmBL,EAAWuB,EAAY3C,EAAY,KAD9C,CAACuH,EAAW3E,GAAW2E,EAAWkC,KAErDjL,EAAOmJ,GAAuBnJ,GAC9BL,QAAQC,IAAI,OAAQI,GAEpB,IAAIwF,EAASjF,SAASC,cAAc,YACpCgF,EAAOC,MAAMC,SAAW,QACxBF,EAAOC,MAAME,KAAO,IACpBH,EAAOC,MAAMG,IAAM,IACnBJ,EAAOC,MAAMI,QAAU,IACvBL,EAAO1L,MAAQkG,EACfO,SAASuF,KAAKC,YAAYP,GAC1BA,EAAOQ,QACPR,EAAOS,SACP1F,SAAS2F,YAAY,QACrB3F,SAASuF,KAAKK,YAAYX,GAG1B4B,OAAOC,KAAK,2EAA4E,UAoH9EiE,IALJ,gCAWF,uBACA,8BACE,mBAAGC,KAAK,6CAAR,4CC5JGC,GA7CG,SAAC,GAQX,IAPN9E,EAOK,EAPLA,WACAvK,EAMK,EANLA,aACAc,EAKK,EALLA,gBACAiL,EAIK,EAJLA,aACA3B,EAGK,EAHLA,UACApO,EAEK,EAFLA,mBACAC,EACK,EADLA,kBAGA,OACE,mCACE,sBAAKoB,UAAU,sBAAf,UACE,qBAAKA,UAAU,qBAAf,SAEE,cAAC,GAAD,CACEkN,WAAYA,EACZzJ,gBAAiBA,EACjBiL,aAAcA,MAGlB,qBAAK1O,UAAU,aAAf,SACE,sBAAKA,UAAU,iBAAf,UAEE,cAAC,GAAD,CACE2C,aAAcA,EACdc,gBAAiBA,EACjBiL,aAAcA,IAGhB,cAAC,GAAD,CACExB,WAAYA,EACZvK,aAAcA,EACdc,gBAAiBA,EACjBsJ,UAAWA,EACXpO,mBAAoBA,EACpBC,kBAAmBA,eC0BlBqT,GA7DO,SAAC,GAAoB,IAAlB/E,EAAiB,EAAjBA,WACvB,EAAsBrO,mBAAS,cAA/B,mBAAOyI,EAAP,KAAY4K,EAAZ,KAGA,EAAkCrT,mBAAS,IAA3C,mBAAOsT,EAAP,KAAkBC,EAAlB,KAEA,EAAkCvT,mBAAS,IAA3C,mBAAOkO,EAAP,KAAkB2B,EAAlB,KAGA,EAAgC7P,qBAAhC,mBAAOgO,EAAP,KAAiBC,EAAjB,KAEA,EAAgCjO,qBAAhC,mBAAOoO,EAAP,KAAiBD,EAAjB,KAEMpO,EAAoB,SAACqO,GACzBH,EAAY,2BAAKD,GAAN,IAAgB3D,KAAM+D,MAI7BtO,EAAqB,SAACwT,GAC1BzD,EAAa,2BAAK3B,GAAN,IAAiB7D,KAAMiJ,MAGrC,OACE,qBAAKnS,UAAU,YAAf,SACE,eAACqS,EAAA,EAAD,CACEzS,GAAG,yBACH0S,UAAWhL,EACXiL,SAAU,SAACjH,GAAD,OAAO4G,EAAO5G,IACxBtL,UAAU,GAJZ,UAOE,cAACwS,EAAA,EAAD,CAAK9M,SAAS,aAAa5G,MAAM,OAAjC,SACE,cAAC,GAAD,CACE6D,aAAcsK,EACdxJ,gBAAiBuJ,EACjBH,SAAUA,EACVC,YAAaA,EACbG,SAAUA,EACVD,YAAaA,EACbrO,mBAAoBA,EACpBC,kBAAmBA,EACnBsO,WAAYA,MAIhB,cAACsF,EAAA,EAAD,CAAK9M,SAAS,YAAY5G,MAAM,QAAhC,SACE,cAAC,GAAD,CACEoO,WAAYA,EACZvK,aAAcwP,EACd1O,gBAAiB2O,EACjB1D,aAAcA,EACd3B,UAAWA,EACXpO,mBAAoBA,EACpBC,kBAAmBA,Y,kDC3DhB,OAA0B,mC,UJInC6T,GAAkB,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,mBAAoBrO,EAA2B,EAA3BA,IAAK0K,EAAsB,EAAtBA,YAAsB,EAATnP,GAO/D,OANA0O,GAAYnG,WAASC,QAAQ/D,EAAI2E,mBAAoB,CAAEX,KAAM0G,IAC7DlE,GAAgByD,GAAUpG,SAAS,aACnCqG,GAAcD,GAAUpG,SAAS,KACjCuG,GAAaH,GAAUpG,SAAS,QAChCsG,GAAWF,GAAUpG,SAAS,KAG5B,mCACGsG,KAAaO,GACZ,sBAAK/O,UAAU,kBAAf,UACE,qBAAKA,UAAU,cAAf,SACI0S,EAMA,oBAAI1S,UAAU,aAAd,SAA4B6K,KAL5B,qBAAI7K,UAAU,aAAd,UACG6K,GADH,UACyBxG,EAAIiC,WAD7B,eACqD,IAClDjC,EAAIlC,eAMX,+CACiBoM,GADjB,SACoCE,GADpC,OAGCpK,EAAIlC,UAAY,GACf,4BAAIkC,EAAIpD,UAAUiF,eASxByM,GAAmB,SAAC,GAA8B,IAA5BtO,EAA2B,EAA3BA,IAAK0K,EAAsB,EAAtBA,YAAsB,EAATnP,GAY5C,OAXA0O,GAAYnG,WAASqB,WAAWnF,EAAIf,WAAY,cAChDuH,GAAgByD,GAAUpG,SAAS,aACnCsG,GAAWF,GAAUpG,SAAS,KAI5BN,GADgC,mBAA9BvD,EAAIpD,UAAUmP,YACT,0BAAsB/L,EAAIpD,UAAUD,KAApC,KAEA,2BAAuBqD,EAAIpD,UAAUD,KAArC,KAIP,mCACGwN,KAAaO,GACZ,qBAAK/O,UAAU,cAAf,SACE,+BACG6K,GADH,KACoBxG,EAAIpD,UAAUoP,SADlC,IAC6CzI,WA0CxCgL,GAvBiB,SAAC,GAA6C,IAA3CF,EAA0C,EAA1CA,mBAAoBrO,EAAsB,EAAtBA,IAE/C0K,GAFqE,EAAjB8D,WAEtC,kBAEpB,OAAIxO,EAAI2E,mBAEJ,cAAC,GAAD,CACE0J,mBAAoBA,EACpBrO,IAAKA,EACL0K,YAAaA,IAKf,cAAC,GAAD,CACE2D,mBAAoBA,EACpBrO,IAAKA,EACL0K,YAAaA,KKxDN+D,OAhCf,YAAwD,IAA9BC,EAA6B,EAA7BA,QAASlQ,EAAoB,EAApBA,YAAawB,EAAO,EAAPA,IAC9C,OACE,gCACE,oBAAIrE,UAAU,eAAd,SAA8B+S,IAC9B,6BACGlQ,EAAYZ,KAAI,SAACyB,EAAMoB,GACtB,IAAIlF,EAUJ,OAPEA,EADc,cAAZmT,EACA,eAAW1O,EAAIiC,WAAf,gBAAiCjC,EAAIwE,UAArC,gBAAsD/D,GACnC,aAAZiO,EACP,eAAW1O,EAAIiC,WAAf,gBAAiCjC,EAAIwE,UAArC,gBAAsD/D,GAEtD,eAAWT,EAAIiC,WAAf,gBAAiCjC,EAAIwE,UAArC,mBAAyD/D,GAI3D,qCACGpB,EAAK1E,KACJ,oBAAIY,GAAIA,EAAR,SACE,mBAAGmS,KAAMrO,EAAK1E,IAAKyB,OAAO,SAASuS,IAAI,sBAAvC,SAA8DtP,EAAK1C,UAGrE0C,EAAK1E,KAAO,6BAAK0E,EAAK1C,mBCuBvBiS,GA5Ce,SAAC,GAMxB,IALLC,EAKI,EALJA,OACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aAEI,EADJhP,IAiBA,OAZI6O,GACEA,EAAOhS,QACLgS,IAAWC,EACH,cACDD,IAAWG,EACV,gBACDH,IAAWE,GACV,qBAMd,mCACGF,GAAUA,EAAOhS,OAChBgS,EAAOhS,MAAMe,KAAI,SAACyB,GAChB,OACE,6BACE,mBAAGqO,KAAMrO,EAAK1E,IAAKyB,OAAO,SAASuS,IAAI,sBAAsBhT,UAAU,oBAAvE,SAA2F,6BAAK0D,EAAK1C,iBCTpGsS,GAxBc,SAACC,EAAUzQ,EAAW2B,GAqB/C,OApBAxB,OAAOE,KAAKoQ,GAAUlQ,SAAQ,SAACnE,GAC3B,IAAIsU,EAUJ,IAPIA,EADc,aAAd1Q,EACmByQ,EAASrU,GAASgG,SAChB,YAAdpC,EACYyQ,EAASrU,GAASiG,QAElBoO,EAASrU,GAASkG,YAKjCoO,EAAiBtS,MACjB,IAAK,IAAIuS,EAAI,EAAGA,EAAID,EAAiBtS,MAAMoB,OAAQmR,GAAK,EACpDhP,EAAatD,KAAKqS,EAAiBtS,MAAMuS,OAKlDhP,GCkBIiP,OAlCf,YAIoC,IAO5BX,EAVwBQ,EAGG,EAHHA,SACAzQ,EAEG,EAFHA,UACAuB,EACG,EADHA,IAGtBI,EAAe,GAiBrB,OAfA6O,GAAqBC,EAAUzQ,EAAW2B,GAItCA,EAAanC,OAAS,IAGlByQ,EADc,aAAdjQ,EACS,YACY,YAAdA,EACG,WAEA,cAKd,8BACI,cAAC,GAAD,CACYiQ,QAASA,EACTlQ,YAAa4B,EACbJ,IAAKA,OC6CdsP,GAzEkB,SAAC,GAAa,IACzCR,EACAE,EACAD,EAH8B/O,EAAU,EAAVA,IAgBlC,OAZKA,EAAIpD,UAAUmP,cACb/L,EAAIpD,UAAU8P,WAChBoC,EAAa9O,EAAIpD,UAAU8P,SAAS1L,WACpCgO,EAAehP,EAAIpD,UAAU8P,SAASzL,cAGpCjB,EAAIpD,UAAU2S,KAChBR,EAAQ/O,EAAIpD,UAAU2S,GAAGrO,QAM3B,0CAEkBwE,IAAfoJ,GACC,cAAC,GAAD,CACAD,OAAQC,EACRC,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdhP,IAAKA,SAKI0F,IAAVqJ,GACC,cAAC,GAAD,CACAF,OAAQE,EACRA,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdhP,IAAKA,IAKP,cAAC,GAAD,CACEkP,SAAUlP,EAAIpD,UACd6B,UAAU,WACVuB,IAAKA,IAGP,cAAC,GAAD,CACEkP,SAAUlP,EAAIpD,UACd6B,UAAU,UACVuB,IAAKA,IAGP,cAAC,GAAD,CACEkP,SAAUlP,EAAIpD,UACd6B,UAAU,YACVuB,IAAKA,SAGW0F,IAAjBsJ,GACC,cAAC,GAAD,CACAH,OAAQG,EACRD,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdhP,IAAKA,Q,mBC3CEwP,OAxBf,YAAgD,IAAjBpP,EAAgB,EAAhBA,aAC3B,OACI,6BACCA,EAAaxC,KAAI,SAACyB,GAEf,OACI,qCACCA,EAAK1E,KACF,6BACI,mBAAG+S,KAAMrO,EAAK1E,IAAKyB,OAAO,SAASuS,IAAI,sBAAvC,SAA8DtP,EAAK1C,UAGzE0C,EAAK1E,KACH,6BACK0E,EAAK1C,gBCKf8S,OAjBf,YAEyB,IAFHzP,EAEE,EAFFA,IACAjF,EACE,EADFA,aAGZ2U,EAAa,GACbR,EAAWlP,EAAIpD,UAKrB,OAFAqS,GAAqBC,EAAUnU,EAAc2U,GAGzC,6BACI,cAAC,GAAD,CAAqBtP,aAAcsP,OC4BhCC,OAzCf,YAAiC,IAEzBb,EACAE,EACAD,EAJiB/O,EAAO,EAAPA,IAiBrB,OAXIA,EAAIpD,UAAUmP,cACV/L,EAAIpD,UAAU8P,WAClBoC,EAAa9O,EAAIpD,UAAU8P,SAAS1L,WACpCgO,EAAehP,EAAIpD,UAAU8P,SAASzL,cAGlCjB,EAAIpD,UAAU2S,KAClBR,EAAQ/O,EAAIpD,UAAU2S,GAAGrO,QAKzB,sBAAKvF,UAAU,iBAAf,eACoB+J,IAAfoJ,GACG,cAAC,GAAD,CACAD,OAAQC,EACRC,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdhP,IAAKA,SAGS0F,IAAjBsJ,GACG,cAAC,GAAD,CACAH,OAAQG,EACRD,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdhP,IAAKA,QCsEN4P,OApGf,YAAuE,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,UAAWtB,EAAqB,EAArBA,WAAYuB,EAAS,EAATA,MAC3D,OACE,qCACE,cAAC5O,EAAA,EAAU/F,OAAX,UACE,+BAEkB,OAAfoT,GACCuB,EAAMlM,SAAS,gBACbC,WAASkM,MAAMnM,SAAS,eACxB,4DACuB,IACpBgM,EAAYjS,KAAI,SAACqS,GAChB,OAAO,+BAAOA,UAIN,OAAfzB,GACCuB,EAAMlM,SAAS,gBACbC,WAASkM,MAAMnM,SAAS,eACxB,yDACoB,IACjBgM,EAAYjS,KAAI,SAACqS,GAChB,OAAO,+BAAOA,UAIN,OAAfzB,GACG,qEAIR,cAACrN,EAAA,EAAU3F,KAAX,UACE,eAAC0U,GAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,EAAClV,KAAK,KAA3B,UACE,gCACE,+BACE,uBACA,0CACA,2CACA,0CACA,iDAGJ,gCACG4U,EAAUlS,KAAI,SAACC,EAAM4C,GAEpB,IAAM+F,EAAgB1C,WAASqB,WAC7BtH,EAAKoB,WACL,cACA4E,SAAS,aAELtI,EAAE,UAAMiT,EAAN,iBAAyB3Q,EAAKoE,WAA9B,gBAAgDpE,EAAK2G,WAE7D,OACE,qBACE7I,UACEoU,EAAMlM,SAAS,gBACbC,WAASkM,MAAMnM,SAAS,eAC1BhG,EAAKoB,aAAe8Q,EAAMlM,SAAS,cAC/B,kBACA,KANR,UASE,qBAEElI,UAAU,aAFZ,UAIE,oBACEa,QAAS,kBACP6T,YAASC,SAAS/U,EAAI,CACpBgV,QAAQ,EACRC,QAAS,GACTC,SAAU,OALhB,SASGjK,IAEH,sCACQ3I,EAAKoE,WACX,uBAFF,cAEuBpE,EAAKC,gBAI9B,6BACE,cAAC,GAAD,CAAekC,IAAK8P,EAAUrP,OAGhC,cAAC,GAAD,CAAYT,IAAK8P,EAAUrP,GAAQ1F,aAAa,aAChD,cAAC,GAAD,CAAYiF,IAAK8P,EAAUrP,GAAQ1F,aAAa,YAChD,cAAC,GAAD,CAAYiF,IAAK8P,EAAUrP,GAAQ1F,aAAa,+BCvBnD2V,GAzEW,SAACC,EAAcnC,EAAYqB,EAAaC,EAAWc,EAAgBC,EAAcd,GACzG,IAAIxJ,EACAuK,EACAC,EACAC,EACAC,EACAC,EACJrB,EAAc,GAEdmB,EAAgBjB,EAAMoB,QAAQ,SAC9BF,EAAelB,EAAMqB,MAAM,SAG3B7K,EAAWwJ,EAAMoB,QAAQ,QACzBJ,EAAUhB,EAAMqB,MAAM,QAEtBN,EAAWvK,EAGX,IAFA,IAAM8K,EAAiB,GAEhBP,GAAYC,GACjBM,EAAevU,KAAKgU,EAASjN,SAAS,eACtCiN,EAAWA,EAASrK,KAAK,CAAE5B,KAAM,IAGnCqM,EAAgBF,EAEhB,IAAMM,EAAkB,GACxB,GAAmB,OAAf9C,EAEF,KAAO0C,GAAiBD,GACtBK,EAAgBxU,KAAKoU,EAAcrN,SAAS,eAC5CqN,EAAgBA,EAAczK,KAAK,CAAE5B,KAAM,IAI/C,IAAM0M,EAAkB,GAClBC,EAAmB,GAGzB,GAAmB,OAAfhD,EAAqB,CACvB,IADwB,IAAD,WACdnO,GACPzB,OAAOE,KAAK6R,GAAc/S,KAAI,SAACoC,GACzBA,IAAQsR,EAAgBjR,IAC1BmR,EAAiB1U,KAAK6T,EAAa3Q,QAHhCK,EAAI,EAAGA,EAAIiR,EAAgBrT,OAAQoC,GAAK,EAAI,EAA5CA,GAOTwQ,EAAaW,OACR,CAEP,IAFQ,IAAD,WAEEnR,GACPzB,OAAOE,KAAK6R,GAAc/S,KAAI,SAACoC,GACzBA,IAAQqR,EAAehR,IACzBkR,EAAgBzU,KAAK6T,EAAa3Q,QAH/BK,EAAI,EAAGA,EAAIgR,EAAepT,OAAQoC,GAAK,EAAI,EAA3CA,GAOPwQ,EAAaU,GAKfF,EAAerS,SAAQ,SAACnB,GAEpB8S,EAAa9S,KACZgS,EAAY3Q,SAASyR,EAAa9S,GAAMoE,aAEzC4N,EAAY/S,KAAK6T,EAAa9S,GAAMoE,eAGxC2O,EAAef,ICpCF4B,GA/BM,SAAC,GAA4C,IAA1Cd,EAAyC,EAAzCA,aAAcnC,EAA2B,EAA3BA,WAAYjO,EAAe,EAAfA,SAChD,EAAsC/F,qBAAtC,mBAAOqV,EAAP,KAAoBe,EAApB,KACA,EAAkCpW,qBAAlC,mBAAOsV,EAAP,KAAkBe,EAAlB,KAcA,OAZAa,qBAAU,WACRhB,GACEC,EACAnC,EACAqB,EACAC,EACAc,EACAC,EACAtQ,KAED,CAACoQ,IAGF,qBAAKhV,UAAU,iBAAf,SAEGkU,GAAeC,GACd,cAAC,GAAD,CACED,YAAaA,EACbC,UAAWA,EACXtB,WAAYA,EACZuB,MAAOxP,OCgJFoR,OArGf,YAAmF,IAK7EC,EACAC,EACAC,EAPuBnB,EAAqD,EAArDA,aAAcnC,EAAuC,EAAvCA,WAAYuB,EAA2B,EAA3BA,MAAOgC,EAAoB,EAApBA,iBAIxDC,EAAc,KAqBlB,OAfIlO,WAASkM,MAAQ+B,GACnBC,EA1EoB,SAACrB,EAAcZ,EAAOvB,EAAYuD,GACxD,IAAIE,EA2BJ,MAzBmB,OAAfzD,GAAuB1K,WAASkM,MAAQ+B,EAExCE,EADoB,IAAlBlC,EAAM5L,QACI4L,EAAMtJ,KAAK,CAAE5B,MAAO,IAAKhB,SAAS,cACnB,IAAlBkM,EAAM5L,QACH4L,EAAMtJ,KAAK,CAAE5B,MAAO,IAAKhB,SAAS,cAElCkM,EAAMtJ,KAAK,CAAE5B,MAAO,IAAKhB,SAAS,cAExB,OAAf2K,GAAuB1K,WAASkM,MAAQ+B,IAE/CE,EADoB,IAAlBlC,EAAM5L,QACI4L,EACTtJ,KAAK,CAAEC,OAAQ,IACfC,IAAI,CAAExC,QAAS,IACfN,SAAS,cACHkM,EAAM5L,QAAU,GAAK4L,EAAM5L,SAAW,EACnC4L,EAAMpJ,IAAI,CAAExC,QAAS,IAAKN,SAAS,cAEnCkM,EAAMpJ,IAAI,CAAExC,QAAS,IAAKN,SAAS,eAI/C8M,EAAasB,IAActB,EAAasB,GAAWrV,UAAUmP,cAC/DkG,EAAYnO,WAASqB,WAAW8M,EAAW,cAAcC,MAAM,CAAErN,KAAM,IAAKhB,SAAS,eAGhFoO,EA8CSE,CAAgBxB,EAAcZ,EAAOvB,EAAYuD,GAC/DH,EA3CgB,SAACjB,EAAcZ,EAAOvB,EAAYuD,GACpD,IAAIH,EA0BJ,MAxBmB,OAAfpD,GAAuB1K,WAASkM,OAAS+B,EAEzCH,EADoB,IAAlB7B,EAAM5L,QACE4L,EAAMtJ,KAAK,CAAE5B,KAAM,IAAKhB,SAAS,cAChB,IAAlBkM,EAAM5L,QACL4L,EAAMtJ,KAAK,CAAE5B,KAAM,IAAIhB,SAAS,cAEhCkM,EAAMlM,SAAS,cAEH,OAAf2K,GAAuB1K,WAASkM,OAAS+B,IAEhDH,EADoB,IAAlB7B,EAAM5L,QACE4L,EAAMlM,SAAS,cAChBkM,EAAM5L,QAAU,GAAK4L,EAAM5L,SAAW,EACrC4L,EAAMpJ,IAAI,CAAExC,QAAS,IAAKN,SAAS,cAEnCkM,EAAMtJ,KAAK,CAAE5B,KAAM,IAAKhB,SAAS,eAI3C8M,EAAaiB,IAAYjB,EAAaiB,GAAShV,UAAUmP,cAC3D6F,EAAU9N,WAASqB,WAAWyM,EAAS,cAAcnL,KAAK,CAAE5B,KAAM,IAAKhB,SAAS,eAK3E+N,EAgBKQ,CAAYzB,EAAcZ,EAAOvB,EAAYuD,GAEpDpB,EAAaqB,KACdH,EAAa,UAAMrD,EAAN,iBAAyBmC,EAAaqB,GAAa/P,WAAnD,gBAAqE0O,EAAaqB,GAAaxN,YAG3GmM,EAAaiB,KACdE,EAAY,UAAMtD,EAAN,iBAAyBmC,EAAaiB,GAAS3P,WAA/C,gBAAiE0O,EAAaiB,GAASpN,aAGrGoN,EAAUG,EAAiBlO,SAAS,cAIpC,8BACE,qBAAKlI,UAAU,aAAf,SACGgV,EAAaiB,IACZ,qCACE,8BACE,cAAC,GAAD,CACEvD,oBA7Ba,EA8BbrO,IAAK2Q,EAAaiB,GAClBpD,WAAYA,MAGhB,qBAAK7S,UAAU,yBAAf,SACE,qDACsB,IAEnBgV,EAAaZ,EAAMlM,SAAS,eAC3B,+BACG8M,EAAaZ,EAAMlM,SAAS,eAAe/F,YAG9C,qCAAQ6S,EAAaiB,GAAS9T,kBAIpC,sBAAKnC,UAAU,wBAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,qCACE,oBACEA,UAAU,kBACVa,QAAS,kBACP6T,YAASC,SAASwB,EAAc,CAC9BvB,QAAQ,EACRC,QAAS,GACTC,SAAU,OANhB,iCAYA,uBACA,cAAC,GAAD,CAA0BzQ,IAAK2Q,EAAaiB,UAGhD,qBAAKjW,UAAU,sBAAf,SACE,qCACE,oBACEA,UAAU,kBACVa,QAAS,kBACP6T,YAASC,SAASuB,EAAe,CAC/BtB,QAAQ,EACRC,QAAS,GACTC,SAAU,OANhB,kCAYA,uBACCE,EAAaqB,IACZ,cAAC,GAAD,CACA9C,SAAUyB,EAAaqB,GAAapV,UACpC6B,UAAU,YACVuB,IAAK2Q,EAAaqB,qBCjDvBK,OAnGf,YAAwF,IAmBlFC,EAnBqB3B,EAA4D,EAA5DA,aAAcnC,EAA8C,EAA9CA,WAAY/T,EAAkC,EAAlCA,MAAOsV,EAA2B,EAA3BA,MAAOgC,EAAoB,EAApBA,iBAE3DxW,EAAE,UAAMiT,EAAN,QAwBR,OALE8D,EADiB,OAAf9D,EACUuB,EAAMtJ,KAAK,CAAEC,MAAO,IAEpBqJ,EAAMtJ,KAAK,CAAE8L,OAAQ,IAIjC,sBAAK5W,UAAU,UAAf,UAEE,qBACEA,UAAU,WACVa,QAAS,kBACP6T,YAASC,SAAS/U,EAAI,CACpBgV,QAAQ,EACRC,QAAS,GACTC,SAAU,OANhB,SAUE,cAAC,IAAD,MAEF,oBAAI9U,UAAU,kBAAd,SAAiClB,IACjC,mBAAGc,GAAIA,IAGP,cAAC,GAAD,CACEoV,aAAcA,EACdnC,WAAYA,EACZuB,MAAOA,EACPgC,iBAAkBA,IAEpB,sBAAKpW,UAAU,+BAAf,UACE,cAACwF,EAAA,EAAD,CAAWxF,UAAU,yBAAyB6W,iBAAiB,IAA/D,SACE,cAACrR,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,SACE,cAAC,GAAD,CACEsP,aAAcA,EACdnC,WAAYA,EACZjO,SAAUwP,QAIhB,cAAC5O,EAAA,EAAD,CAAWxF,UAAU,yBAArB,SACkB,OAAf6S,GACC,cAACrN,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,SACE,cAAC,GAAD,CACEsP,aAAcA,EACdnC,WAAYA,EACZjO,SAAU+R,WAMpB,sBAAK3W,UAAU,gBAAf,UACE,+CAECiD,OAAOE,KAAK6R,GAAc/S,KAAI,SAACoC,GAC9B,IAAMzE,EAAE,UAAMiT,EAAN,iBAAyBmC,EAAa3Q,GAAKiC,WAA3C,gBAA6D0O,EAAa3Q,GAAKwE,WAEvF,OACE,sBAAK7I,UAAU,YAAYJ,GAAIA,EAA/B,UAEE,cAAC,GAAD,CACE8S,mBAhFa,MAiFbrO,IAAK2Q,EAAa3Q,GAClBwO,WAAYA,KAGZmC,EAAa3Q,GAAKpD,UAAUmP,aAC5B,cAAC,GAAD,CAA0B/L,IAAK2Q,EAAa3Q,kB,qBC5D7CyS,OApCf,YAMoB,IALA5X,EAKD,EALCA,QACA4F,EAID,EAJCA,MACAkM,EAGD,EAHCA,aACA6B,EAED,EAFCA,WACAmC,EACD,EADCA,aAEhB,OACI,mCACC9V,EAAQoD,OAAS,GAClB,eAACkD,EAAA,EAAUC,KAAX,CAAgBC,SAAUZ,EAA1B,UACI,cAACU,EAAA,EAAU/F,OAAX,UAAmBuR,EAAalM,KAChC,cAACU,EAAA,EAAU3F,KAAX,UACCX,EAAQ+C,KAAI,SAAC8U,GACd,IAAMnX,EAAE,UAAMiT,EAAN,iBAAyBmC,EAAa+B,EAAK7U,MAAMoE,WAAjD,gBAAmE0O,EAAa+B,EAAK7U,MAAM2G,WAE/F,OACA,mBAAGhI,QAAS,kBACZ6T,YAASC,SAAS/U,EAAI,CAClBgV,QAAQ,EACRC,QAAS,GACTC,SAAU,OAJd,SAQCiC,EAAK/V,kBC8HPgW,OAlEf,YAAgD,IAA7BhC,EAA4B,EAA5BA,aAAcnC,EAAc,EAAdA,WACzBoE,EAAkB,GAClBC,EAAe,GACfC,EAAe,GAerB,OAZAlU,OAAOE,KAAK6R,GAAc/S,KAAI,SAACoC,IA1DF,SACD2Q,EACA3Q,EACA6S,EACAC,EACAF,GAExBjC,EAAa3Q,GAAKpD,UAAUiF,QAC9BjD,OAAOE,KAAK6R,EAAa3Q,GAAKpD,WAE7B0E,QAAO,SAAAzG,GAAO,MAAgB,WAAZA,KAClB+C,KAAI,SAAC/C,GACJ+D,OAAOE,KAAK6R,EAAa3Q,GAAKpD,UAAU/B,IAEvCyG,QAAO,SAAA/D,GAAS,MAAkB,SAAdA,KACpBK,KAAI,SAACL,IA9CiB,SACCoT,EACA3Q,EACAnF,EACA0C,EACAsV,EACAC,EACAF,GAExBjC,EAAa3Q,GAAKpD,UAAU/B,GAAS0C,GAAWV,OAClD8T,EAAa3Q,GAAKpD,UAAU/B,GAAS0C,GAAWV,MAAMe,KAAI,SAACyB,GAQzD,GANGA,EAAK1E,MAAQkY,EAAa3T,SAASG,EAAK1E,OAEzCkY,EAAa/V,KAAKuC,EAAK1E,KAEvBmY,EAAahW,KAAK,CAACH,KAAM0C,EAAK1C,KAAMhC,IAAK0E,EAAK1E,IAAKkD,KAAMmC,KAEvDX,EAAK1E,IAAK,CACZ,IAAMoY,EAAe1T,EAAK1E,IAAIqY,MAAM,KAG/BJ,EAAgB1T,SAAS6T,EAAa,KAA2B,8BAApBA,EAAa,IAC7DH,EAAgB9V,KAAKiW,EAAa,QAyBpCE,CAAqBtC,EACD3Q,EACAnF,EACA0C,EACAsV,EACAC,EACAF,SAoCxBM,CACwBvC,EACA3Q,EACA6S,EACAC,EACAF,MAI1BA,EAAgBpH,OAGd,sBAAK7P,UAAU,kBAAf,UACE,yCACA,cAAC2O,GAAA,EAAD,CAAK3O,UAAU,cAAf,SACGiX,EAAgBhV,KAAI,SAACuV,GAEpB,IAAM3G,EAAU,GACV4G,EAAO,GACPC,EAAM,GAGZP,EAAa9T,SAAQ,SAACsU,IAnDP,SAACA,EAAQH,EAAY3G,EAAS6G,EAAKD,GAK1D,GAJkBE,EAAO3Y,IAAIqY,MAAM,KAEH,KAEVG,EAAY,CAChC,IAAMI,EAAYD,EAAO3W,KAAKqW,MAAM,KAC9BQ,EAAU,CAAE7W,KAAM2W,EAAO3W,KAAMkB,KAAMyV,EAAOzV,MAE7B,QAAjB0V,EAAU,GACZF,EAAIvW,KAAK0W,GACiB,SAAjBD,EAAU,GACnBH,EAAKtW,KAAK0W,GAEVhH,EAAQ1P,KAAK0W,IAsCPC,CAAiBH,EAAQH,EAAY3G,EAAS6G,EAAKD,MAGrD,IAAMhT,EAAe,GACrBA,EAAatD,KAAK0P,GAClBpM,EAAatD,KAAKuW,GAClBjT,EAAatD,KAAKsW,GAGlB,IAAMzG,EAAe,CAAC,UAAW,WAAY,cAE7C,OACE,qCACA,oBAAIhR,UAAU,qBAAd,SAAoCwX,IACpC,cAAChS,EAAA,EAAD,CAAWxF,UAAU,oBAArB,SACCyE,EAAaxC,KAAI,SAAC/C,EAAS4F,GAC1B,OACA,cAAC,GAAD,CACU5F,QAASA,EACT4F,MAAOA,EACPkM,aAAcA,EACd6B,WAAYA,EACZmC,aAAcA,qBCVvB+C,OA3Hf,YAAsE,IAA/C/C,EAA8C,EAA9CA,aAAcnC,EAAgC,EAAhCA,WAAYuD,EAAoB,EAApBA,iBACzCrL,EAAQ,GAIdgL,qBAAU,WACJ5N,WAASkM,MAAQ+B,GAHK4B,EAAeC,QAAQC,eAAe,CAAEC,MAAO,aAMxE,IAEH,IAAMC,EAAiB,WACrB,OACE,mCACE,qBAAKC,IAAKL,OAMhB/U,OAAOE,KAAK6R,GAAc3R,SAAQ,SAACgB,GAC5B0G,EAAMxH,SAASyR,EAAa3Q,GAAKiC,aACpCyE,EAAM5J,KAAK6T,EAAa3Q,GAAKiC,eAYjC,IAPA,IAAMgS,EAAiBnQ,WAASkM,MAAMmB,QAAQ,QACxC+C,EAAgBpQ,WAASkM,MAAMoB,MAAM,QACvChV,EAAS6X,EAEPE,EAAa,GAGZ/X,GAAU8X,GACfC,EAAWrX,KAAKV,EAAOyH,SAAS,eAChCzH,EAASA,EAAOqK,KAAK,CAAE5B,KAAM,IAI/B,IAAMuP,EAAa,GACbT,EAAiBU,iBAAO,MAW9B,OATAF,EAAWnV,SAAQ,SAACnB,GAEhB8S,EAAa9S,KACZuW,EAAWlV,SAASyR,EAAa9S,GAAMoE,aAExCmS,EAAWtX,KAAK6T,EAAa9S,GAAMoE,eAKrC,sBAAKtG,UAAU,sBAAf,UACE,8CACA,eAAC2O,GAAA,EAAD,CACE/N,QAAQ,QACRiW,iBAAiB,IACjB7W,UAAU,cACV2Y,aAAa,OAJf,UAME,cAAChK,GAAA,EAAIlJ,KAAL,UACE,cAACkJ,GAAA,EAAIC,KAAL,CACElJ,SAAS,IAET7E,QAAS,kBACP6T,YAASC,SAAT,UAAqB9B,EAArB,QAAuC,CACrC+B,QAAQ,EACRC,QAAS,GACTC,SAAU,OAPhB,2BAcD/J,EAAM9I,KAAI,SAAC0G,EAAM7D,GAGhB,IACIlF,EADEgZ,EAAK,UAAM9T,EAAQ,GAGvBlF,EADiB,OAAfiT,EACA,UAAMA,EAAN,iBAAyBlK,EAAzB,UAEA,UAAMkK,EAAN,iBAAyBlK,EAAzB,UAEJ,IAAMkQ,EAAS,UAAMhG,EAAN,yBAAiClK,GAEhD,OACE,cAACgG,GAAA,EAAIlJ,KAAL,UACE,eAACkJ,GAAA,EAAIC,KAAL,CACElJ,SAAUkT,EAEV/X,QAAS,kBACP6T,YAASC,SAAS/U,EAAI,CACpBgV,QAAQ,EACRC,QAAS,GACTC,SAAU,OAPhB,UAWGnM,IAAS8P,EAAW,IAAMtQ,WAASkM,MAAQ+B,GAAoB,cAACgC,EAAD,IAChE,gCACY,OAATzP,EAAgB,QAAhB,eAAkCA,GAElCoC,EAAMjG,KAAW2T,EAAW,IAC3B,uBAAM7Y,GAAIiZ,EAAW7Y,UAAU,uBAA/B,UACE,cAAC,KAAD,IACC,KAFH,6BAYd,cAAC,GAAD,CAASgV,aAAcA,EAAcnC,WAAYA,QC/GxCiG,OAXf,YAAkE,IAA/C9D,EAA8C,EAA9CA,aAAcnC,EAAgC,EAAhCA,WAAYuD,EAAoB,EAApBA,iBAC3C,OACE,qBAAKpW,UAAU,UAAf,SACE,cAAC,GAAD,CACEgV,aAAcA,EACdnC,WAAYA,EACZuD,iBAAkBA,OC0CX2C,OA/Cf,YAAyC,IAInClG,EAJmBrM,EAAe,EAAfA,KAAM1H,EAAS,EAATA,MACvBkW,EAAepO,KAAKiI,MAAMjI,KAAKC,UAAUL,EAAK0C,OAKlD2J,EADsB,SAApBrM,EAAKwB,WACM,KAEA,KAGf,IAAIoM,EAAQjM,WAASkM,MAIf2E,EAAmB,GACzB/V,OAAOE,KAAK6R,GAAc/S,KAAI,SAACoC,GAC7B2U,EAAiB7X,KAAKkD,MAExB2U,EAAiBnJ,MAAK,SAAStC,EAAG0L,GAAG,OAAO1L,EAAE0L,KAC9C,IAAM7C,EAAmBjO,WAASqB,WAAWwP,EAAiB,GAAI,cAMlE,OAJI5E,EAAQgC,IACVhC,EAAQgC,GAIR,sBAAKpW,UAAU,kBAAf,UAGE,cAAC,GAAD,CACEgV,aAAcA,EACdnC,WAAYA,EACZuD,iBAAkBA,IAGpB,cAAC,GAAD,CACEpB,aAAcA,EACdnC,WAAYA,EACZ/T,MAAOA,EACPsV,MAAOA,EACPgC,iBAAkBA,QCEX8C,OAzCf,YAA4C,IAAfhM,EAAc,EAAdA,WAC3B,EAAoBiM,cAAdC,EAAN,EAAMA,KAAMpa,EAAZ,EAAYA,IAGZ,OACE,qCACE,eAACqa,GAAA,EAAD,CAAQzY,QAAQ,OAAO0Y,GAAG,YAA1B,UACE,cAACD,GAAA,EAAOE,MAAR,CAAcxH,KAAK,QAAnB,SACE,qBAAKyH,IAAKC,GAAMC,IAAI,mBAEtB,cAAC/K,GAAA,EAAD,CAAK3O,UAAU,UAAf,SACGkN,EAAWjL,KAAI,SAAC8L,GACf,OACE,mCACA,cAACY,GAAA,EAAIC,KAAL,CAAU+K,GAAI/K,IAAMgL,GAAE,UAAK5a,EAAL,YAAY+O,EAAM/M,MAAxC,SACG+M,EAAM/M,KAAK6Y,0BAOtB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACV,KAAMA,EAAnB,SACE,cAAC,IAAD,CAAUQ,GAAE,UAAKR,EAAL,YAAalM,EAAW,GAAGlM,UAExCkM,EAAWjL,KAAI,SAAC8L,GACf,OACE,cAAC,IAAD,CAAOqL,KAAI,UAAKA,EAAL,YAAarL,EAAM/M,MAA9B,SACE,cAAC,GAAD,CACEwF,KAAMuH,EAAMC,QACZlP,MAAOiP,EAAM/M,KAAK6Y,4BCInBE,OA3Bf,WAEE,IAAM7M,EAAa,CACjB,CAAElM,KAAM,QAASgN,QAASgM,IAC1B,CAAEhZ,KAAM,QAASgN,QAASiM,IAC1B,CAAEjZ,KAAM,QAASgN,QAASkM,IAC1B,CAAElZ,KAAM,QAASgN,QAASmM,IAC1B,CAAEnZ,KAAM,QAASgN,QAASoM,KAE5B,OACE,qBAAKpa,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WAEE,cAAC,IAAD,CAAOoZ,KAAK,SAAZ,SACE,cAAC,GAAD,CAAelM,WAAYA,MAG7B,cAAC,IAAD,CAAOkM,KAAK,aAAZ,SACE,cAAC,GAAD,CAAmBlM,WAAYA,cCtB5BmN,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFjU,SAASkU,eAAe,SAM1BZ,M","file":"static/js/main.8f56a3fb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdata,\n  coursedate,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n  // input fields for a entry of a new item into the main data file\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  // function that adds new item to main data file\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    // new item that will be added to main data file\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    // if the section that the new item is to be added to is empty, an empty array called items is added to it\n    if (!bootcampdata[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdata[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    // the new item is then pushed into items array\n    bootcampdata[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n\n    // the new content is saved in state\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({ ...bootcampdata });\n  };\n\n  return (\n    // modal that takes in user input for the creation of a new item\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"ip\">ip</option>\n            <option value=\"algos\">algorithms</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"ip\" && <option value=\"ipDue\">ipDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\n// moves items to a specific date in the schedule\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdata,\n  setbootcampdata,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n    // finding the selected item in the data file\n    let selectedItem = sectiontype[classtype].items[classindex];\n    // removing it from it's original position\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n    // this is where we want to move the item to\n    const targetDay = bootcampdata[selectedDate].dateTypes[section];\n\n    // checking to see if items array exists at destination, if not, an empty array called items is added\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    // selected item is push into items array at destination\n    targetDay[classtype].items.push(selectedItem);\n\n    // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({...bootcampdata})\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">Moving item ...</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdata[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from \"react\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport ShiftItemModal from \"./ShiftItemModal\";\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\nimport holidayData from '../../../../data/2021-sg-stat-holidays.json';\n\n// helper functions that populates dateArray\n// ##########################################################\nconst addDates = (datesArray, date) => {\n  if (!datesArray.includes(date)) {\n    datesArray.push(date);\n  }\n  return datesArray;\n};\n\nconst addIndex = (bootcampData, datesArray, date) => {\n  if (!datesArray.includes(bootcampData.indexOf(date))) {\n    datesArray.push(bootcampData.indexOf(date));\n  }\n  return datesArray;\n};\n\n// helper function that shifts items 1 day\nconst shiftOneDay = (\n  direction, \n  bootcampData, \n  dayIndex, \n  sectionType, \n  classType, \n  classIndex, \n  section,\n  setDaysInMainFile,\n  setDaysInBatchFile\n  ) => {\n\n      let bootcampDataArray;\n      let target; \n       if(bootcampData.constructor === Object) {\n         const holidayDates = [];\n         Object.keys(holidayData).forEach((type) => {\n          Object.keys(holidayData[type]).forEach((date) => {\n            holidayDates.push(date);\n          })\n         })\n         bootcampDataArray = Object.keys(bootcampData);\n\n         if(direction === 'up') {\n           target = bootcampData[bootcampDataArray[dayIndex - 1]].courseDate;\n           if (holidayDates.includes(target)) {\n            target = bootcampData[bootcampDataArray[(dayIndex - 1) -1]].courseDate;\n           }         \n          \n         } else {\n           target = bootcampData[bootcampDataArray[dayIndex + 1]].courseDate;\n           if (holidayDates.includes(target)) {\n            target = bootcampData[bootcampDataArray[(dayIndex + 1) +1]].courseDate;\n           }\n           \n         }\n      } else {\n        if (direction === 'up') {\n          target = dayIndex - 1\n        } else {\n          target = dayIndex + 1\n        }\n      }\n      // finding the selected item in the data file\n      let selectedItem = sectionType[classType].items[classIndex];\n      // removing it from it's original position\n      sectionType[classType].items.splice(classIndex, 1);\n\n      // if items array is empty after removing selected item, remove empty items array\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      // this is where we want to move the item to\n      const targetDay = bootcampData[target].dateTypes[section];\n      // checking to see if items array exists at destination, if not, an empty array called items is added\n      if (!targetDay[classType].items) {\n        targetDay[classType].items = [];\n      }\n\n      // selected item is push into items array at destination\n      targetDay[classType].items.push(selectedItem);\n\n      // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n      bootcampData.constructor === Array\n        ? setDaysInMainFile([...bootcampData])\n        : setDaysInBatchFile({...bootcampData})\n\n    }\n// ############################################################\n\nfunction ClassItem({\n  setBootcampData,\n  section,\n  bootcampData,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n  setDaysInMainFile,\n  setDaysInBatchFile\n}) {\n  // toggle visibility of buttons\n  const [modalShow, setModalShow] = useState(false);\n  // object shift item is initialised with keys direction and dates to store data that will be passed into the nect component\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  // function that handles moving data from one day to another\n  const handleShift = (direction, dayIndex, classIndex) => {\n    // array that contains all the dates either before or after a selected date depending on direction chosen by user\n    let datesArray = [];\n\n    \n\n    // item is being moved backwards in the schedule\n    if (direction === \"any\") {\n      // if bootcampData either an object or an array depending on wether the user is editing the main or individual schedule files, and needs to be processed accordingly\n      bootcampData.constructor === Object\n        ? Object.keys(bootcampData)\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampData\n            .map((date) => {\n              datesArray = addIndex(bootcampData, datesArray, date);\n            });\n\n      // data is put into object shift item\n      setShiftItem({\n        ...shiftItem,\n        dates: datesArray,\n      });\n      // modal that takes user input to move item is shown\n      setModalShow(true);\n      // item is being moved forward in the schedule\n    } else if (direction === \"down\") {\n     shiftOneDay(\n        'down', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n\n    } else if (direction === \"up\") {\n      shiftOneDay(\n        'up', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n    } else {\n      // here the item is being deleted from the schedule\n      sectionType[classType].items.splice(classIndex, 1);\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n      bootcampData.constructor === Array\n        ? setDaysInMainFile([...bootcampData])\n        : setDaysInBatchFile({...bootcampData})\n\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n      >\n        {item.name}\n        \n          <div>\n            {/* remove item  */}\n            <button className=\"trash-can\" onClick={() => handleShift(\"delete\", dayIndex, classIndex)}>\n              <DeleteOutlinedIcon />\n            </button>\n            {/* move item backwards in the schedule  */}\n            <button onClick={() => handleShift(\"up\", dayIndex, classIndex)}>\n              <ExpandLessIcon />\n            </button>\n            {/* move item forward in the schedule  */}\n            <button onClick={() => handleShift(\"down\", dayIndex, classIndex)}>\n              <ExpandMoreIcon />\n            </button>\n            <button className=\"select\" onClick={() => handleShift('any', dayIndex, classIndex)}>\n              <DragIndicatorIcon />\n            </button>\n          </div>\n        \n        {modalShow && (\n          // modal that is shown when the user clicks either of the above buttons\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdata={bootcampData}\n            setbootcampdata={setBootcampData}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n            setDaysInMainFile={setDaysInMainFile}\n            setDaysInBatchFile={setDaysInBatchFile}\n            />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampData,\n  setBootcampData,\n  section,\n  dayIndex,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampData) => {\n    sectionArray.forEach((element, index) => {\n      if (element !== null && bootcampData.constructor === Object) {\n        if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section] &&\n          bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]) {\n          if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]\n              .items) {\n            sectionArray[index].forEach((item) => {\n              bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n                sectionclass\n              ].items.push(item);\n            });\n          } else {\n            bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      } else if (element !== null && bootcampData.constructor === Array) {\n          if (bootcampData[startDay + index].dateTypes[section][sectionclass]\n            .items) {\n          sectionArray[index].forEach((item) => {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n          } else {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      });\n    return bootcampData;\n  };\n\n  let bootcampDataArray;\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    \n    if (bootcampData.constructor === Object) {\n      bootcampDataArray = Object.keys(bootcampData);\n\n        for (let i = dayIndex; i < bootcampDataArray.length - 1; i += 1) {\n          if(bootcampData[bootcampDataArray[i]].dateTypes[section] && bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass]) {\n            if (bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items) {\n            const selectedSection =\n              bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n              sectionArray.push(selectedSection);\n              delete bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n            } else {\n              sectionArray.push(null);\n            }\n          }\n          \n        }\n      \n    } else {\n      for (let i = dayIndex; i < bootcampData.length - 1; i += 1) {\n        if (bootcampData[i].dateTypes[section][sectionclass].items) {\n          const selectedSection =\n            bootcampData[i].dateTypes[section][sectionclass].items;\n          sectionArray.push(selectedSection);\n          delete bootcampData[i].dateTypes[section][sectionclass].items;\n        } else {\n          sectionArray.push(null);\n        }\n      }\n    }\n    \n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n    }\n\n    bootcampData = shiftSection(sectionArray, startDay, bootcampData);\n    \n     // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampData.constructor === Array\n      ? setDaysInMainFile([...bootcampData])\n      : setDaysInBatchFile({...bootcampData})\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampData={bootcampData}\n                  setBootcampData={setBootcampData}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                  setDaysInBatchFile={setDaysInBatchFile}\n                  setDaysInMainFile={setDaysInMainFile}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n  \n          >\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n          \n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampData,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampData,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"ip\" && sectionType.ipDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampData={bootcampData}\n                            setBootcampData={setBootcampData}\n                            section={section}\n                            dayIndex={dayIndex}\n                            setDaysInBatchFile={setDaysInBatchFile}\n                            setDaysInMainFile={setDaysInMainFile}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Section from \"./inner-accordion/Section\";\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampData,\n  setBootcampData,\n  day,\n  setShowInputModal,\n  setCourseDate,\n  handleCloseAll,\n  setAccordionKey,\n  accordionKey,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  \n\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampData[day].dateTypes.module && (\n        <Accordion key={accordionKey}>\n          <Accordion.Item eventKey={dayIndex}>\n            <div\n                className=\"course-day-symbol\"\n                onClick={() => handlePlusClick(day)}\n              >\n                {\" \"}\n                <AddIcon />\n            </div>\n            <Accordion.Header>\n              <div className=\"course-day-header\">\n                {bootcampData.constructor === Object ? (\n                  <>\n                    {day}, Week: {bootcampData[day].courseWeek}, Course Day:{\" \"}\n                    {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                ) : (\n                  <>\n                    Course Day: {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampData[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampData={setBootcampData}\n                        section={section}\n                        sectionType={bootcampData[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampData={bootcampData}\n                        setDaysInBatchFile={setDaysInBatchFile}\n                        setDaysInMainFile={setDaysInMainFile}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","const download = (data, filename) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", filename);\n        dlAnchorElem.click();\n    };\n\nexport default download;","import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/schedule-templates/basics-schedule-template.json';\n// import ftbcDataJson from './data/schedule-templates/ftbc1.0-schedule-template.json';\nimport ftbcDataJson from './data/schedule-templates/ftbc2.0-schedule-template.json';\n// import ftbcDataJson from './data/schedule-templates/ftbc3.0-schedule-template.json';\n// import ptbcDataJson from './data/schedule-templates/ptbc1.0-schedule-template.json';\nimport ptbcDataJson from './data/schedule-templates/ptbc2.0-schedule-template.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n  publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n  companyHolidayArray.push(key);\n  // get array of winter break dates\n  if (companyHolidays[key].name === 'winter break') {\n    winterBreak.push(companyHolidays[key].date);\n  }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n  if (!companyHolidayArray.includes(holiday)) {\n    phWithoutCh.push(holiday);\n  }\n});\n\nlet bootcampData;\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseType, date) => {\n  const changedFormat = date.toFormat('yyyy-MM-dd');\n  if (courseType === 'Basics') {\n    utc = DateTime.fromISO(changedFormat + timeString, { zone: 'Singapore' }).toUTC().toISO();\n  } else if ((courseType === 'FTBC') || (courseType === 'PTBC' && (date.weekday === 6))) {\n    utc = DateTime.fromISO(`${changedFormat}T10:00`, { zone: 'Singapore' }).toUTC().toISO();\n  } else if (courseType === 'PTBC' && (date.weekday === 2)) {\n    utc = DateTime.fromISO(`${changedFormat}T19:30`, { zone: 'Singapore' }).toUTC().toISO();\n  }\n  return utc;\n};\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject, lessonDays) => {\n  if (courseType === 'Basics') {\n    topLevelObject = {\n      daysOfWeek: lessonDays,\n      courseStartIndex: basicsData.courseStartIndex,\n      totalCourseDays: basicsData.totalCourseDays,\n      ...topLevelObject,\n    };\n  } else {\n    const bootcampDays = bootcampData.daysOfWeek;\n    const startIndex = bootcampData.courseStartIndex;\n\n    topLevelObject = {\n      daysOfWeek: bootcampDays,\n      courseStartIndex: startIndex,\n      totalCourseDays: bootcampData.totalCourseDays,\n      ...topLevelObject,\n    };\n  }\n\n  return topLevelObject;\n};\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj, courseType) => {\n  let weekOfCourse;\n  if (courseType.includes('Bootcamp') && companyHolidayArray.includes(dateString)) {\n    weekOfCourse = null;\n  } else {\n    weekOfCourse = week;\n  }\n\n  dateObj = {\n    courseDay: null,\n    courseDate: dateString,\n    courseWeek: weekOfCourse,\n    dayNumber: date.weekday,\n    dateTypes: {},\n  };\n\n  if (phWithoutCh.includes(dateString)) {\n    dateObj.dateTypes = publicHolidays[dateString];\n  } else {\n    dateObj.dateTypes = companyHolidays[dateString];\n  }\n\n  return dateObj;\n};\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n  // get whatever index of basicsData that is specified by courseDayCount\n\n  dateObj = {\n    courseDate: dateString,\n    courseWeek: week,\n    weekDay,\n    dayNumber: date.weekday,\n    meetingDateTimeUTC: utc,\n  };\n\n  // data is different for basics and bootcamp\n  if (courseType === 'Basics') {\n    dateObj = {\n      ...dateObj, ...basicsData.days[courseDay],\n    };\n  } else if (courseType === 'FTBC' || courseType === 'PTBC') {\n    dateObj = {\n      ...dateObj, ...bootcampData.days[courseDay],\n    };\n  }\n  return dateObj;\n};\n\n// helper function for generating filename\nconst getFilename = (startDate, endDate, courseType, batchNum) => {\n  const displayDate = DateTime.fromFormat(startDate, 'yyyy-MM-dd');\n  const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${endDate}_${courseType}${batchNum}`;\n  return displayName;\n};\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, batchNum, courseType, input, lessonDays) => {\n  // used if we are generating batch schedule straight after making changes to main json file\n  if (input) {\n    bootcampData = input;\n  } else if (courseType === 'FTBC') {\n    bootcampData = ftbcDataJson;\n  } else if (courseType === 'PTBC') {\n    bootcampData = ptbcDataJson;\n  }\n\n  console.log('lesson days', lessonDays);\n  // used to set the time for basics course\n  let basicsTimeslots;\n  if (lessonDays) {\n    if (lessonDays[0] === 1 && lessonDays[1] === 4) {\n      basicsTimeslots = ['T19:30', 'T19:30'];\n    } else if (lessonDays[0] === 7 && lessonDays[1] === 4) {\n      basicsTimeslots = ['T19:00', 'T19:30'];\n    } else {\n      basicsTimeslots = ['T19:30', 'T13:00'];\n    }\n  }\n\n  // random times, basicsTimeslots is only used for basics course\n  if (basicsTimeslots === undefined) {\n    basicsTimeslots = ['T19:30', 'T13:00'];\n  }\n\n  let date = DateTime.fromFormat(startDate, 'yyyy-MM-dd');\n  let utc;\n  utc = getLocalDateTime(utc, 'T16:00', courseType, date);\n  let dateWeek = DateTime.fromFormat(startDate, 'yyyy-MM-dd');\n  let classDatesCount = 1;\n  let week;\n  if (courseType === 'Basics') {\n    week = 0;\n  } else {\n    week = 1;\n  }\n  let weekDay = 1;\n  let data;\n  let courseDayCount;\n  // starts from 0 because it's tracking the index of the json data file\n  let courseDay = 0;\n\n  const topLevelObject = {\n    courseType,\n    days: {},\n  };\n\n  data = generateTopLevelObject(courseType, topLevelObject, lessonDays, batchNum);\n\n  // set the number of course days based on course type\n  if (courseType === 'Basics') {\n    courseDayCount = basicsData.days.length;\n  } else if (courseType === 'FTBC') {\n    courseDayCount = ftbcDataJson.days.length;\n  } else if (courseType === 'PTBC') {\n    courseDayCount = ptbcDataJson.days.length;\n  }\n\n  const dayArray = data.daysOfWeek;\n  console.log('day array', dayArray);\n  let dayIndex = data.courseStartIndex;\n\n  while (courseDayCount > 0) {\n    const dateString = date.toFormat('dd-MM-yyyy');\n\n    // setting filename from start date, end date, courseType (FTBC/PTBC/Basics), batchNum\n    // if this condition is met, dateString will be the end date of course\n    if (courseDay + 1 === data.totalCourseDays) {\n      // start date\n      data.courseName = getFilename(startDate, dateString, courseType, batchNum);\n    }\n\n    let dateObj;\n    // if date is a public holiday\n    if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n      dateObj = generateHolidayObject(dateString, week, date, dateObj, courseType);\n      // if date is not a holiday\n    } else {\n      dateObj = generateCourseDayObject(dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n      // increase course days on days that classes are held,\n      // DO NOT increase course days on holidays\n      courseDayCount -= 1;\n      courseDay += 1;\n    }\n    data.days[dateString] = dateObj;\n\n    // used to check for first day of basics course\n    const firstDay = DateTime.fromFormat(startDate, 'yyyy-MM-dd').toFormat('dd-MM-yyyy');\n    const formattedDate = date.toFormat('dd-MM-yyyy');\n\n    if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n      date = date.plus({ weeks: 1 }).set({ weekday: 1 });\n      utc = getLocalDateTime(utc, 'T19:30', courseType, date);\n      weekDay += 1;\n      week += 1;\n\n      // checking if the last day of bootcamp is a friday, if not, we need to add days to schedule\n      // to make it end on a friday\n    } else if (courseType === 'FTBC' && data.days[date.toFormat('dd-MM-yyyy')].courseDay === 112 && date.weekday !== 2) {\n      // getting the number days to Friday\n      let differenceInDays;\n      if (date.weekday === 1) {\n        differenceInDays = 5 - date.weekday;\n      } else if (date.weekday === 5) {\n        differenceInDays = 7;\n        week += 1;\n      } else if (date.weekday === 4) {\n        differenceInDays = 8;\n      } else {\n        differenceInDays = 9;\n      }\n\n      // getting the extra dates to Friday\n      const datesToAdd = [];\n      for (let i = 1; i <= differenceInDays; i += 1) {\n        const newDate = date.plus({ days: i }).toFormat('dd-MM-yyyy');\n        const newWeekday = DateTime.fromFormat(newDate, 'dd-MM-yyyy').weekday;\n        console.log('new ', newWeekday);\n        if (newWeekday < 6) {\n          datesToAdd.push(newDate);\n        }\n      }\n\n      // put all dates we want to add to schedule in combinedDates array\n      // take into consideration possibility of public holiday occuring during those days\n      const newDateObjectsArray = [];\n      for (let k = 0; k < datesToAdd.length; k += 1) {\n        let addedCourseday;\n        if (phWithoutCh.includes(datesToAdd[k])) {\n          addedCourseday = null;\n        } else {\n          addedCourseday = 113 + k;\n        }\n        const dateInfo = {\n          date: datesToAdd[k],\n          courseday: addedCourseday,\n        };\n        newDateObjectsArray.push(dateInfo);\n      }\n      // third last courseday is feature freeze day\n      // move it forward if this day falls on a public holiday\n      let featureFreezeDay;\n      if (phWithoutCh.includes(newDateObjectsArray[newDateObjectsArray.length - 3].date)) {\n        featureFreezeDay = newDateObjectsArray[newDateObjectsArray.length - 4].date;\n      } else {\n        featureFreezeDay = newDateObjectsArray[newDateObjectsArray.length - 3].date;\n      }\n\n      // end date of course is project presentation day\n      // move it forward if this day falls on a public holiday\n      let endDate;\n      if (phWithoutCh.includes(newDateObjectsArray[newDateObjectsArray.length - 1].date)) {\n        endDate = newDateObjectsArray[newDateObjectsArray.length - 2].date;\n      } else {\n        endDate = newDateObjectsArray[newDateObjectsArray.length - 1].date;\n      }\n\n      // needed to find totalcourse days after adding days\n      let lastCourseDay;\n      // generate new dateObjs\n      for (let j = 0; j < newDateObjectsArray.length; j += 1) {\n        const targetWeekday = DateTime.fromFormat(newDateObjectsArray[j].date, 'dd-MM-yyyy').weekday;\n        const newDate = DateTime.fromFormat(newDateObjectsArray[j].date, 'dd-MM-yyyy');\n        utc = getLocalDateTime(utc, 'T13:00', courseType, newDate);\n        // helper function for adding dateObj to schedule data\n        const addDateObjToSchedule = (dateObj) => {\n          data.days[newDateObjectsArray[j].date] = dateObj;\n          data.days[newDateObjectsArray[j].date].courseDay = newDateObjectsArray[j].courseday;\n        };\n\n        if (newDateObjectsArray[j].date === featureFreezeDay) {\n          dateObj = generateCourseDayObject(dateObj, newDateObjectsArray[j].date, week, targetWeekday, newDate, utc, courseType, 113);\n          addDateObjToSchedule(dateObj);\n        } else if (newDateObjectsArray[j].date === endDate) {\n          dateObj = generateCourseDayObject(dateObj, newDateObjectsArray[j].date, week, targetWeekday, newDate, utc, courseType, 115);\n          addDateObjToSchedule(dateObj);\n          lastCourseDay = dateObj.courseDay;\n          // content is the same for all other days, except if the day is a public holiday\n        } else if (phWithoutCh.includes(newDateObjectsArray[j].date)) {\n          dateObj = generateHolidayObject(newDateObjectsArray[j].date, week, newDate, dateObj, courseType);\n          addDateObjToSchedule(dateObj);\n        } else {\n          dateObj = generateCourseDayObject(dateObj, newDateObjectsArray[j].date, week, targetWeekday, newDate, utc, courseType, 114);\n          addDateObjToSchedule(dateObj);\n        }\n      }\n      data.courseName = getFilename(startDate, endDate, courseType, batchNum);\n      data.totalCourseDays = lastCourseDay;\n      break;\n    } else {\n      // first meeting of basics is a pre-course meeting that always starts on a saturday\n      // (not included in daysOfWeek)\n      // this is the end of the dayArray (last day of the week)\n      if ((dayIndex === dayArray.length - 1)\n                || (formattedDate === firstDay && courseType === 'Basics')) {\n        weekDay = 1;\n        // return to beginning of array (return to beginning of week)\n        dayIndex = 0;\n        date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] });\n        dateWeek = dateWeek.plus({ weeks: 1 });\n        if (!companyHolidayArray.includes(dateString)) {\n          week += 1;\n        }\n        utc = getLocalDateTime(utc, basicsTimeslots[0], courseType, date);\n      } else {\n        // day within the week\n        dayIndex += 1;\n        date = date.set({ weekday: dayArray[dayIndex] });\n        if (!phWithoutCh.includes(dateString)) {\n          weekDay += 1;\n        }\n        utc = getLocalDateTime(utc, basicsTimeslots[1], courseType, date);\n      }\n    }\n    // increase classDatesCount regardless of whether it is a public holiday\n    classDatesCount += 1;\n  }\n  console.log('data', data);\n  return data;\n};\n\nexport default generateDataObject;\n","import React, { useState } from \"react\";\nimport AddItemModal from \"./main-accordion/AddItemModal\";\nimport MainAccordion from \"./main-accordion/MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../../download\";\nimport generateDataObject from \"../../generateCourseDates\";\nimport { DateTime } from \"luxon\";\nimport fulltimeDataFile from \"../../data/schedule-templates/ftbc1.0-schedule-template.json\";\nimport partTimeDataFile from \"../../data/schedule-templates/ptbc1.0-schedule-template.json\";\n\n// helper function for cpoying data to clipboard\nconst copyToClipboard = (data) => {\n  // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n  let selBox = document.createElement(\"textarea\");\n  selBox.style.position = \"fixed\";\n  selBox.style.left = \"0\";\n  selBox.style.top = \"0\";\n  selBox.style.opacity = \"0\";\n  // this copies the JSON data to clipboard with original formatting\n  selBox.value = JSON.stringify(data, undefined, 2);\n  document.body.appendChild(selBox);\n  selBox.focus();\n  selBox.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(selBox);\n};\n\n// ############################################################################\n// ############################################################################\nconst GenerateDataShiftContent = ({\n  bootcampData,\n  setBootcampData,\n  mainFile,\n  setMainFile,\n  batchFile,\n  mainDays,\n  setMainDays,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n  batchArray,\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n  // used in the close all functionality\n  const [accordionKey, setAccordionKey] = useState(1234);\n\n  const displayDataFile = (dataFile) => {\n    console.log(\"data file\", dataFile);\n\n    setMainFile(dataFile);\n    setMainDays(dataFile.days);\n  };\n\n  // function that handles download of main data file after edits\n  const handleDownloadMainClick = async () => {\n    download(mainFile, \"modified-main-data-file.json\");\n  };\n\n  // function that handles download of individual batch data file after edits\n  const handleBatchDownloadClick = () => {\n    download(batchFile, `modified-${batchFile.courseName}-file.json`);\n  };\n\n  // state set so that rerender occurs\n  const handleCloseAll = () => {\n    const newAccordionKeyValue = accordionKey + 1;\n    setAccordionKey(newAccordionKeyValue);\n  };\n\n  // copys json data file to clipboard\n  const handleEditInGithub = (data) => {\n    copyToClipboard(data);\n\n    let gitbookUrl;\n    if (data.repoUrls) {\n      gitbookUrl = mainFile.repoUrls.edit;\n    } else {\n      gitbookUrl = `https://github.com/rocketacademy/scheduler/edit/main/src/data/${batchFile.courseName}.json`;\n    }\n    // opens a new window in the browser at specified address(gitbook edit page)\n    console.log(\"gitbook url\", gitbookUrl);\n\n    window.open(gitbookUrl, \"_blank\");\n  };\n\n  const handleBatchEdit = async (index) => {\n    try {\n      const batch = batchArray[index];\n      const startDate = DateTime.fromFormat(\n        batch.content.courseName.slice(0, 10),\n        \"dd-MM-yyyy\"\n      ).toFormat(\"yyyy-MM-dd\");\n      let courseType;\n      if (batch.name.includes(\"pt\")) {\n        courseType = \"PTBC\";\n      } else {\n        courseType = \"FTBC\";\n      }\n      const courseName =\n        batch.content.courseName[batch.content.courseName.length - 1];\n      const data = await generateDataObject(\n        startDate,\n        courseName,\n        courseType,\n        mainFile\n      );\n      copyToClipboard(data);\n      window.open(\n        `https://github.com/rocketacademy/scheduler/edit/main/src/data/${data.courseName}.json`,\n        \"_blank\"\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      {/* renders batch schedule data file  */}\n      {bootcampData &&\n        bootcampData.constructor === Object &&\n        Object.keys(bootcampData).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={() => handleEditInGithub(batchFile)}\n              >\n                Edit in GitHub Repo\n              </Button>{\" \"}\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download Modified Batch File\n              </Button>\n            </div>\n            <div className=\"close-all-container\">\n              <Button onClick={handleCloseAll}>close all</Button>\n            </div>\n            {Object.keys(bootcampData).map((day, dayIndex) => {\n              return (\n                <>\n                  <div>\n                    <MainAccordion\n                      dayIndex={dayIndex}\n                      bootcampData={bootcampData}\n                      setBootcampData={setBootcampData}\n                      day={day}\n                      setShowInputModal={setShowInputModal}\n                      setCourseDate={setCourseDate}\n                      handleCloseAll={handleCloseAll}\n                      accordionKey={accordionKey}\n                      setAccordionKey={setAccordionKey}\n                      setDaysInBatchFile={setDaysInBatchFile}\n                      setDaysInMainFile={setDaysInMainFile}\n                    />\n                  </div>\n                </>\n              );\n            })}\n            {/* modal that takes in user input to create a new item in the schedule  */}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdata={bootcampData}\n                setbootcampdata={setBootcampData}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n                setDaysInBatchFile={setDaysInBatchFile}\n                setDaysInMainFile={setDaysInMainFile}\n              />\n            )}\n          </div>\n        )}\n      {/* displays fulltime or part time data file  */}\n      <div className=\"data-button-container\">\n        <Button\n          className=\"btn btn-primary\"\n          onClick={() => displayDataFile(fulltimeDataFile)}\n        >\n          Full Time\n        </Button>\n        <Button\n          className=\"btn btn-primary\"\n          onClick={() => displayDataFile(partTimeDataFile)}\n        >\n          Part Time\n        </Button>\n      </div>\n      {bootcampData && bootcampData.constructor === Array && mainFile && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <Button\n              className=\"btn btn-primary\"\n              onClick={() => handleEditInGithub(mainFile)}\n            >\n              Edit in GitHub Repo\n            </Button>\n            <Button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </Button>\n          </div>\n          <div className=\"batchfile-edit-container\">\n            {batchArray.map((batch, index) => {\n              // different batches are shown depending on whether the data file rendered is the part time or full time one\n              if (mainFile.daysOfWeek.length < 5) {\n                return (\n                  <>\n                    {batch.name.includes(\"pt\") && (\n                      <Button\n                        className=\"batch-update\"\n                        onClick={() => handleBatchEdit(index)}\n                      >\n                        Update {batch.name}\n                      </Button>\n                    )}\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    {batch.name.includes(\"ft\") && (\n                      <Button\n                        className=\"batch-update\"\n                        onClick={() => handleBatchEdit(index)}\n                      >\n                        Update {batch.name}\n                      </Button>\n                    )}\n                  </>\n                );\n              }\n            })}\n          </div>\n          <div className=\"close-all-container\">\n            <Button onClick={handleCloseAll}>Close All</Button>\n          </div>\n          {bootcampData.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampData={bootcampData}\n                setBootcampData={setBootcampData}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n                handleCloseAll={handleCloseAll}\n                accordionKey={accordionKey}\n                setAccordionKey={setAccordionKey}\n                setDaysInMainFile={setDaysInMainFile}\n                setDaysInBatchFile={setDaysInBatchFile}\n              />\n            );\n          })}\n          {showInputModal && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdata={bootcampData}\n              setbootcampdata={setBootcampData}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n              setDaysInMainFile={setDaysInMainFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\n\n// side navbar that displays links to all batch schedules in batchArray\nfunction ActiveCourses({ batchArray, setBootcampData, setBatchFile }) {\n  const handleSelectClick = (batch) => {\n     setBootcampData(\n      JSON.parse(JSON.stringify(batch.content.days))\n    )\n    setBatchFile(\n      JSON.parse(JSON.stringify(batch.content))\n    )\n  };\n\n  return (\n    <div>\n      <h4>Batches</h4>\n      <Nav variant=\"pills\" className=\"flex-column \">\n        {/* a link is rendered for each element in batchArray */}\n        {batchArray.map((batch, index) => {\n          return (\n            <Nav.Link\n              // when a link is clicked , the content of the selected batch file is rendered\n              onClick={() =>\n                handleSelectClick(batch)\n              }\n              eventKey={index}\n            >\n              {batch.name}\n            </Nav.Link>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default ActiveCourses;\n","import { DateTime } from 'luxon';\n\n// timezone is manually set to 'Asia/Singapore' because we are located here\nconst timeZoneSet = 'Asia/Singapore';\n\n// helper function , generates list for pre-class, in-class, post-class\nconst generateClassList = (classList, classType) => {\n    if (classType.mdText) {\n        classList += classType.mdText;\n    }\n\n    if ( classType.items.length > 0) {\n        for (let j = 0; j < classType.items.length; j +=1 ) {\n            if (classType.items[j].url) {\n                classList += `* [${classType.items[j].name}](${classType.items[j].url})\\n`;\n            } else {\n                classList += `* ${classType.items[j].name}\\n`;\n            }  \n        }\n        classList += '\\n';\n    }\n    return classList;\n}\n\n// helper function, generates content list for each section \nconst generateSectionList = (sectionName, sectionType) => {\n    let sectionString = '';\n    if (sectionType.items.length > 0) {\n        if (sectionName === 'preclass') {\n            sectionString = '### Pre Class\\n';\n        } else if (sectionName === 'inclass') {\n            sectionString = '### In Class\\n';\n        } else if (sectionName === 'postclass') {\n            sectionString = '### Post Class\\n';\n        } \n    }\n    \n    sectionString = generateClassList (sectionString, sectionType);\n    return sectionString;\n}\n\n// helper function to get arrays needed to generate markdown\nconst generateCourseArrays = (data) => {\n    // get all course dates\n    Object.keys(data.days).forEach((date) => {\n        dates.push(date);\n    })\n\n    // all possible day numbers that course days fall on\n    dates.forEach((date) => {\n        dayNumbers.push(data.days[date].dayNumber);\n    })\n    dayNumbers = [...new Set(dayNumbers)].sort();\n    \n    // all possible names of days of week courdays fall on (this is the table header)\n    dayNumbers.forEach((number) => {\n        daysOfWeek.push(dayNames[number]);\n    })\n\n    // getting last week of course, + 1 because course week starts at 0\n    lastWeek = data.days[dates[dates.length -1]].courseWeek + 1;\n\n    // getting the dates the coursedays fall on for each week\n    for  (let l = 0; l < lastWeek; l += 1) {\n        const week = [];\n        for (let k = 0; k < dates.length; k += 1) {\n            console.log(data.days[dates[k]].courseWeek);\n            if (data.days[dates[k]].courseWeek === weekCount) {\n                week.push(data.days[dates[k]].courseDate);\n            }\n        }\n        weekDates.push(week);\n        weekCount += 1;\n    }\n\n    // getting rows of table\n    // for each subarray in the weekDates array, displayWeek is initialised to ['-', '-', '-']\n    for (let n = 0; n < weekDates.length; n += 1) {\n        let displayWeek = [];\n        dayNumbers.forEach((day) => {\n            displayWeek.push('-');\n        })\n        \n        // each element in each subarray of weekDates is compared to the element in the same index\n        // position in dayNumbers array\n        console.log(dayNumbers);\n        for (let m = 0; m < weekDates[n].length; m += 1) {\n            for (let p = 0; p < dayNumbers.length; p += 1) {\n                console.log(data.days[weekDates[n][m]].dayNumber === dayNumbers[p])\n                // if element.dayNumber === element at the same index position in dayNumbers array \n                if (data.days[weekDates[n][m]].dayNumber === dayNumbers[p]) {\n                    if (data.days[weekDates[n][m]].dateTypes.title) {\n                        // the '-' in displayWeek is replaced by the dateString\n                        const dateString = DateTime.fromISO(data.days[weekDates[n][m]].meetingDateTimeUTC, { zone: timeZoneSet }).toFormat('d MMM');\n                        displayWeek[p] = `[${dateString}](#course-day-${data.days[weekDates[n][m]].courseDay})`;\n                    } else {\n                        // if title of the day does not exist, it means it's a public holiday\n                        console.log('public holiday', data.days[weekDates[n][m]].dateTypes.holidayType);\n                        displayWeek[p] = `${data.days[weekDates[n][m]].dateTypes.holidayType} (${data.days[weekDates[n][m]].dateTypes.location})`;\n                    }\n                }\n            }\n        }\n        tableRows.push(displayWeek);\n    }\n}\n\n// helper function that generates course days table marksown\nconst generateCourseDaysTable = (output) => {\n    // schedule table header \n    output += '| Week |';\n    for (let p = 0; p < daysOfWeek.length; p += 1) {\n        output += ` ${daysOfWeek[p]} |`;\n    }\n\n    output += '\\n| :---: |';\n    for (let r = 0; r < daysOfWeek.length; r += 1) {\n        output += ' :---: |';\n    }\n\n    output += '\\n';\n\n    // schedule table content\n    for (let q = 0; q < tableRows.length; q += 1) {\n        output += `| ${q} |`;\n        for (let r = 0; r < tableRows[q].length; r += 1) {\n            output += ` ${tableRows[q][r]} |`;\n        }\n        output += '\\n';\n    }\n    return output;\n}\n\n// helper function that produces the main content of the page (in markdown)\nconst generateCourseData = (output, data) => {\n    // loop that generates the main part of the page\n    for (let i = 0; i < Object.keys(data.days).length; i += 1) {\n        let localDate;\n        // course day\n        if (data.days[dates[i]].meetingDateTimeUTC) {\n            // getting the date/time from utc string, timezone is manually set\n            localDate = DateTime.fromISO(data.days[dates[i]].meetingDateTimeUTC, { zone: timeZoneSet });\n            const formattedDate = localDate.toFormat('EEE d MMM');\n            output += `# ${formattedDate}, Week ${data.days[dates[i]].courseWeek}, Course Day ${data.days[dates[i]].courseDay}<a href=\"course-day-${data.days[dates[i]].courseDay}\" id=\"course-day-${data.days[dates[i]].courseDay}\"></a>:`;\n            // adding title to heading\n            output += ` ${data.days[dates[i]].dateTypes.title}\\n`;\n            // getting meeting time\n            const localTime = localDate.toFormat('t');\n            output += `Meeting time: ${localTime} `;\n            const timeZone = localDate.toFormat('z');\n            // luxon does not provide abbreviated localised timezones\n            if (timeZone === 'Asia/Singapore') {\n                output += 'SGT ';\n            }\n            const timeOffset = localDate.toFormat('ZZZZ');\n            output += `(${timeOffset})\\n\\n`;\n        } else {\n            // public holiday, as public holiday has no meeting time\n            localDate = DateTime.fromFormat(data.days[dates[i]].courseDate, 'dd-MM-yyyy').toFormat('EEE, d MMM');\n            output += `# ${localDate}: `;\n            if (data.days[dates[i]].dateTypes.location === 'SG') {\n                output += `Singapore `;\n            }\n            output += `${data.days[dates[i]].dateTypes.holidayType}, ${data.days[dates[i]].dateTypes.name}`;\n        }\n\n        // generate day's course material\n        const generalDateTypes = data.days[dates[i]].dateTypes.general;\n        const projectDateTypes = data.days[dates[i]].dateTypes.projects;\n\n        if (projectDateTypes) {\n            if (projectDateTypes.projectDue.items) {\n                output += '### Project Due\\n';\n                output += `[${projectDateTypes.projectDue.items[0].name}](${projectDateTypes.projectDue.items[0].url})\\n\\n`;\n            }\n        }\n\n        if (generalDateTypes) {\n            const sectionNames = ['preclass', 'inclass', 'postclass'];\n            const sectionTypes = [generalDateTypes.preClass, generalDateTypes.inClass, generalDateTypes.postClass];\n            for (let t = 0; t < sectionNames.length; t += 1) {\n                output += generateSectionList(sectionNames[t], sectionTypes[t]);\n            }\n        };\n\n        if (projectDateTypes) {\n            if (projectDateTypes.projectStart.items) {\n                if (projectDateTypes.projectStart.items.length > 0) {\n                output += '### Project Start\\n';\n                output += `[${projectDateTypes.projectStart.items[0].name}](${projectDateTypes.projectStart.items[0].url})\\n\\n`;\n                }\n            }\n        }\n        output += '\\n\\n';\n    }\n    return output;\n}\n\nconst dayNames = {\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday',\n        7: 'Sunday'\n    }\n\n/* ###################################################\n######################################################\n################################################### */\n\nconst dates = [];\nlet dayNumbers = [];\nconst daysOfWeek = [];\nconst weekDates = [];\nlet weekCount = 0;\nlet lastWeek;\nconst tableRows = [];\n\nconst generateBasicsMarkdown = (data) => {\n  \n    // generate all arrays needed to produce markdown\n    generateCourseArrays(data);\n    \n    // initialize output\n    let output = '---\\ndescription: What and when we will learn\\n---\\n# Course Dates\\n';\n\n    // add course table to output\n    output = generateCourseDaysTable(output);\n    output += '\\n';\n\n    // add course data to output\n    output = generateCourseData(output, data);\n\n    // add further reading section to the end of page\n    output += '# Further Reading\\n### Past Projects\\n * [Drawing With Emojis](https://basics.rocketacademy.co/past-projects/drawing-with-emojis)\\n * [Guess The Word](https://basics.rocketacademy.co/past-projects/guess-the-word)';\n\n    console.log(output);\n   return output;\n}\n\nexport default generateBasicsMarkdown;\n\n","import React from \"react\";\nimport { DateTime } from \"luxon\";\n\n// helper function that generates course day header for a normal course day\nconst NormalCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  meetingTime = localDate.toFormat(\"t\");\n  timeOffset = localDate.toFormat(\"ZZZZ\");\n  timeZone = localDate.toFormat(\"z\");\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header-div\">\n          <div className=\"main-header\">\n            {!todaySectionHeader ? (\n              <h3 className=\"day-header\">\n                {formattedDate}, Week {day.courseWeek}, Course Day{\" \"}\n                {day.courseDay}\n              </h3>\n            ) : (\n              <h3 className=\"day-header\">{formattedDate}</h3>\n            )}\n          </div>\n          <p>\n            Meeting Time: {meetingTime} SGT ({timeOffset})\n          </p>\n          {day.courseDay > 0 && (\n            <p>{day.dateTypes.module}</p>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\n// helper function that generates courseday header for a holiday\nconst HolidayCourseDay = ({ day, timeZoneSet, id }) => {\n  localDate = DateTime.fromFormat(day.courseDate, \"dd-MM-yyyy\");\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  timeZone = localDate.toFormat(\"z\");\n  // depending on if the holiday is a public/company holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === \"public holiday\") {\n    holiday = `Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = `Company Holiday (${day.dateTypes.name})`;\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>\n            {formattedDate}: {day.dateTypes.location} {holiday}\n          </h2>\n        </div>\n      )}\n    </>\n  );\n};\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nconst GenerateCourseDayHeader = ({ todaySectionHeader, day, coursetype }) => {\n  // this is the timezone of the area we are in\n  const timeZoneSet = \"Asia/Singapore\";\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  } else {\n    return (\n      <HolidayCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  }\n};\n\nexport default GenerateCourseDayHeader;\n","import React, { useState } from \"react\";\nimport generateDataObject from \"../../../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../../../download.js\";\nimport generateBasicsMarkdown from \"../../../generateBasicsMarkdown.js\";\n\nconst DatePicker = ({ \n  setBootcampData, \n  setBatchFile\n }) => {\n    // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n  const [firstDay, setFirstDay] = useState(null);\n  const [secondDay, setSecondDay] = useState(null);\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = () => {\n    const data = generateDataObject(startDate, courseName, courseType, null, null);\n    download(data, `${data.courseName}.json`);\n  };\n\n  // function that generates and renders schedule data when button is clicked\n  const handleRender = () => {\n    const data = generateDataObject(startDate, courseName, courseType, null, null);\n    console.log('batch 4 data', data);\n    setBootcampData(JSON.parse(JSON.stringify(data.days)));\n    setBatchFile(JSON.parse(JSON.stringify(data)))\n  };\n\n  const addToGitHubRepo = () => {\n      const data = generateDataObject(startDate, courseName, courseType, null, null);\n      console.log('data', data);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      // this copies the JSON data to clipboard with original formatting\n      selBox.value = JSON.stringify(data, undefined, 2);\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/scheduler/new/main/src/data', \"_blank\");\n  }\n\n  const generateMarkdown = () => {\n      const dayNumbers = {\n        'Monday': 1,\n        'Tuesday': 2,\n        'Wednesday': 3,\n        'Thursday': 4,\n        'Friday': 5,\n        'Saturday': 6,\n        'Sunday': 7\n      };\n\n      const lessonDays = [dayNumbers[firstDay], dayNumbers[secondDay]];\n      let data = generateDataObject(startDate, courseName, courseType, null, lessonDays);\n      data = generateBasicsMarkdown(data);\n      console.log('data', data);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      selBox.value = data;\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/basics-docs/new/master/course-logistics', \"_blank\")\n    }\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <div className=\"input-fields\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"course-type\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"FTBC\">FTBC</option>\n                <option value=\"PTBC\">PTBC</option>\n              </Form.Select>\n            </Form.Group>\n            </div>\n            {courseType === 'Basics' && (\n              <div className=\"basics-days\">\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>1st Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-1\"\n                    onChange={(e) => setFirstDay(e.target.value)}\n                  >\n                    <option>Select day</option>\n                    <option value=\"Monday\">Monday</option>\n                    <option value=\"Tuesday\">Tuesday</option>\n                    <option value=\"Wednesday\">Wednesday</option>\n                    <option value=\"Thursday\">Thursday</option>\n                    <option value=\"Friday\">Friday</option>\n                    <option value=\"Saturday\">Saturday</option>\n                    <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>2nd Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-2\"\n                    onChange={(e) => setSecondDay(e.target.value)}\n                  >\n                  <option>Select day</option>\n                  <option value=\"Monday\">Monday</option>\n                  <option value=\"Tuesday\">Tuesday</option>\n                  <option value=\"Wednesday\">Wednesday</option>\n                  <option value=\"Thursday\">Thursday</option>\n                  <option value=\"Friday\">Friday</option>\n                  <option value=\"Saturday\">Saturday</option>\n                  <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n              </div>\n            )}\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                handleRender();\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                handleDownload();\n              }}\n            >\n              Download Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                addToGitHubRepo();\n              }}\n            >\n              Add to GitHub Repo\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                generateMarkdown();\n              }}\n            >\n              Basics Markdown\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport GenerateDataShiftContent from \"../GenerateDataShiftContent\";\nimport ActiveCourses from \"./ActiveCourses.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ \n  batchArray, \n  bootcampData, \n  setBootcampData, \n  setBatchFile, \n  batchFile, \n  setDaysInBatchFile, \n  setDaysInMainFile\n }) => {\n \n  return (\n    <>\n      <div className=\"datashift-container\">\n        <div className=\"all-courses-navbar\">\n          {/* this component contains links to indivudual batch schedules to be rendered and edited */}\n          <ActiveCourses\n            batchArray={batchArray}\n            setBootcampData={setBootcampData}\n            setBatchFile={setBatchFile}\n          />\n        </div>\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            {/* this component generates a course schedule based on start date and course type from the main json data file */}\n            <DatePicker\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              setBatchFile={setBatchFile}\n            />\n            {/* this component allows the user to edit the schedule rendered */}\n            <GenerateDataShiftContent\n              batchArray={batchArray}\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              batchFile={batchFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n              setDaysInMainFile={setDaysInMainFile}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DataShift from \"./data-shift/DataShift\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = ({ batchArray }) => {\n  const [key, setKey] = useState(\"datePicker\");\n\n  // remains empty until user picks/ generates schedule to edit. this is the days section of the batch data file\n  const [batchDays, setBatchDays] = useState({});\n  // this is the whole data file\n  const [batchFile, setBatchFile] = useState({});\n\n  // this is the main bootcamp data json file that has not been mapped onto any dates\n  const [mainFile, setMainFile] = useState();\n  // this is the course days section of the bootcamp data json file\n  const [mainDays, setMainDays] = useState();\n  // helper function for setting state (mainFile)\n  const setDaysInMainFile = (mainDays) => {\n    setMainFile({ ...mainFile, days: mainDays });\n  };\n\n  // helper function for setting state (batchFile)\n  const setDaysInBatchFile = (batchDays) => {\n    setBatchFile({ ...batchFile, days: batchDays });\n  };\n\n  return (\n    <div className=\"container\">\n      <Tabs\n        id=\"controlled-tab-example\"\n        activeKey={key}\n        onSelect={(k) => setKey(k)}\n        className=\"\"\n      >\n        {/* this tab contains the component for editing the main data file */}\n        <Tab eventKey=\"datePicker\" title=\"Main\">\n          <GenerateDataShiftContent\n            bootcampData={mainDays}\n            setBootcampData={setMainDays}\n            mainFile={mainFile}\n            setMainFile={setMainFile}\n            mainDays={mainDays}\n            setMainDays={setMainDays}\n            setDaysInBatchFile={setDaysInBatchFile}\n            setDaysInMainFile={setDaysInMainFile}\n            batchArray={batchArray}\n          />\n        </Tab>\n        {/* this tab contains the component for generating/ editing individual batch schedules */}\n        <Tab eventKey=\"dataShift\" title=\"Batch\">\n          <DataShift\n            batchArray={batchArray}\n            bootcampData={batchDays}\n            setBootcampData={setBatchDays}\n            setBatchFile={setBatchFile}\n            batchFile={batchFile}\n            setDaysInBatchFile={setDaysInBatchFile}\n            setDaysInMainFile={setDaysInMainFile}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default TabsContainer;\n","export default __webpack_public_path__ + \"static/media/4-MILK.46ae71aa.png\";","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h6 className=\"class-header\">{heading}</h6>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function of sidebar modules\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          } else if (heading === \"In Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gic-${index}`;\n          } else {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpostc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\n\n// if sections project due/ project start/ ip due exist in a course day,\n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({\n  status,\n  projectdue,\n  ipdue,\n  projectstart,\n  day,\n}) => {\n  let heading;\n\n  // generates header for the section\n  if (status) {\n    if (status.items) {\n      if (status === projectdue) {\n        heading = \"Project Due\";\n      } else if (status === projectstart) {\n        heading = \"Project Start\";\n      } else if (status === ipdue) {\n        heading = \"Inteview Prep due\";\n      }\n    }\n  }\n\n  return (\n    <>\n      {status && status.items && (\n        status.items.map((item) => {\n          return (\n            <li>\n              <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"notification-item\"><h6>{item.name}</h6></a>\n            </li>\n          )\n        })\n        // <div className=\"notifications\">\n        //   <DisplaySection\n        //     heading={heading}\n        //     sectionType={status.items}\n        //     day={day}\n        //   />\n        // </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateNotifications;\n","const generateSectionArray = (datetype, classType, sectionArray) => {\n    Object.keys(datetype).forEach((section) => {\n        let classTypeSection;\n    // classTypeSection is determined by what classType is\n        if (classType === 'preClass') {\n            classTypeSection = datetype[section].preClass;\n        } else if (classType === 'inClass') {\n            classTypeSection = datetype[section].inClass;\n        } else {\n            classTypeSection = datetype[section].postClass;\n        } \n\n        if (classTypeSection) {\n            // if there are items in classTypeSection, the items are pushed into sectionArray\n            if (classTypeSection.items) {\n                for (let x = 0; x < classTypeSection.items.length; x += 1) {\n                    sectionArray.push(classTypeSection.items[x]);\n                }\n            }\n        }\n    })\n    return sectionArray;\n}\n\nexport default generateSectionArray;","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  let projectdue;\n  let projectstart;\n  let ipdue;\n  if (!day.dateTypes.holidayType) {\n    if (day.dateTypes.projects) {\n      projectdue = day.dateTypes.projects.projectDue;\n      projectstart = day.dateTypes.projects.projectStart;\n    }\n\n    if (day.dateTypes.ip) {\n      ipdue = day.dateTypes.ip.ipDue;\n    }\n  }\n \n\n  return (\n    <>\n      {/* project due notification  */}\n      {projectdue !== undefined && (\n        <GenerateNotifications\n        status={projectdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n      {/* career prep due notification  */}\n      {ipdue !== undefined && (\n        <GenerateNotifications\n        status={ipdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      {projectstart !== undefined && (\n        <GenerateNotifications\n        status={projectstart}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../../../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from '../GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    \n    let projectdue;\n    let projectstart;\n    let ipdue;\n\n    if(!day.dateTypes.holidayType) {\n        if (day.dateTypes.projects) {\n        projectdue = day.dateTypes.projects.projectDue;\n        projectstart = day.dateTypes.projects.projectStart;\n        }\n\n        if (day.dateTypes.ip) {\n        ipdue = day.dateTypes.ip.ipDue;\n        }\n    }\n    \n    return (\n        <div className=\"table-projects\">\n            {projectdue !== undefined && (\n                <GenerateNotifications\n                status={projectdue}\n                ipdue={ipdue}\n                projectdue={projectdue}\n                projectstart={projectstart}\n                day={day}\n            />\n            )}\n            {projectstart !== undefined && (\n                <GenerateNotifications\n                status={projectstart}\n                ipdue={ipdue}\n                projectdue={projectdue}\n                projectstart={projectstart}\n                day={day}\n            />\n            )}\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction ScheduleTable({ weekNumbers, tableData, coursetype, today }) {\n  return (\n    <>\n      <Accordion.Header>\n        <h5>\n          {/* header shows different info depending on date and coursetype  */}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Current Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") !==\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Next Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"pt\" && (\n              <>Current Month's Schedule</>\n            )}\n        </h5>\n      </Accordion.Header>\n      <Accordion.Body>\n        <Table bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Projects</th>\n              <th>Pre Class</th>\n              <th>In Class</th>\n              <th>Post Class</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((date, index) => {\n              // getting the formatted date that will be shown in the table\n              const formattedDate = DateTime.fromFormat(\n                date.courseDate,\n                \"dd-MM-yyyy\"\n              ).toFormat(\"EEE d MMM\");\n              // getting the id that links formattedDate to element in main content page\n              const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n              return (\n                <tr\n                  className={\n                    today.toFormat(\"dd-MM-yyyy\") ===\n                      DateTime.now().toFormat(\"dd-MM-yyyy\") &&\n                    date.courseDate === today.toFormat(\"dd-MM-yyyy\")\n                      ? \"table-secondary\"\n                      : null\n                  }\n                >\n                  <td\n                    // library react-scroll used to scroll to an element with matching id on main page\n                    className=\"table-date\"\n                  >\n                    <h6\n                      onClick={() =>\n                        scroller.scrollTo(id, {\n                          smooth: true,\n                          offset: -70,\n                          duration: 100,\n                        })\n                      }\n                    >\n                      {formattedDate}\n                    </h6>\n                    <p>\n                      Week {date.courseWeek}\n                      <br></br>Course Day {date.courseDay}\n                    </p>\n                  </td>\n                  {/* getting data for projects section of table */}\n                  <td>\n                    <TableProjects day={tableData[index]} />\n                  </td>\n                  {/* getting data for preclass and inclass section of table */}\n                  <TableClass day={tableData[index]} sectionClass=\"preClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"inClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"postClass\" />\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Accordion.Body>\n    </>\n  );\n}\n\nexport default ScheduleTable;\n","// function that generates data required for rendering schedule table\nconst generateTableData = (scheduleData, coursetype, weekNumbers, tableData, setWeekNumbers, setTableData, today ) => {\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let firstDayMonth;\n  let lastDayMonth;\n  let moveDateMonth;\n  weekNumbers = [];\n  // shows current month for part time bootcamp\n  firstDayMonth = today.startOf(\"month\");\n  lastDayMonth = today.endOf(\"month\");\n\n  // shows current week for full time bootcamp\n  firstDay = today.startOf(\"week\");\n  lastDay = today.endOf(\"week\");\n\n  moveDate = firstDay;\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day of week inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat(\"dd-MM-yyyy\"));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  moveDateMonth = firstDayMonth;\n\n  const monthDatesArray = [];\n  if (coursetype === \"pt\") {\n    // getting all the dates between first day and last day of week inclusive and storing them in an array\n    while (moveDateMonth <= lastDayMonth) {\n      monthDatesArray.push(moveDateMonth.toFormat(\"dd-MM-yyyy\"));\n      moveDateMonth = moveDateMonth.plus({ days: 1 });\n    }\n  }\n\n  const currentWeekData = [];\n  const currentMonthData = [];\n\n  // getting the data (object) for each individual day of the month (used for pt schedule table)\n  if (coursetype === \"pt\") {\n    for (let i = 0; i < monthDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === monthDatesArray[i]) {\n          currentMonthData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentMonthData);\n  } else {\n    // getting the data (object) for each individual day of the week\n  for (let i = 0; i < weekDatesArray.length; i += 1) {\n    Object.keys(scheduleData).map((day) => {\n      if (day === weekDatesArray[i]) {\n        currentWeekData.push(scheduleData[day]);\n      }\n    });\n  }\n    setTableData(currentWeekData);\n  }\n\n  \n  // getting the week's courseWeek that the indicator will point to\n  weekDatesArray.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumbers.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumbers.push(scheduleData[date].courseWeek);\n    }\n  });\n  setWeekNumbers(weekNumbers);\n}\n\nexport default generateTableData;","import React, { useEffect, useState } from \"react\";\nimport ScheduleTable from \"./ScheduleTable\";\nimport generateTableData from \"../../../generateTableData\";\n\nconst ContentTable = ({ scheduleData, coursetype, startDay }) => {\n  const [weekNumbers, setWeekNumbers] = useState();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    generateTableData(\n      scheduleData,\n      coursetype,\n      weekNumbers,\n      tableData,\n      setWeekNumbers,\n      setTableData,\n      startDay\n    );\n  }, [scheduleData]);\n\n  return (\n    <div className=\"schedule-table\">\n      {/* table which displays current week's/ month's content based on course type */}\n      {weekNumbers && tableData && (\n        <ScheduleTable\n          weekNumbers={weekNumbers}\n          tableData={tableData}\n          coursetype={coursetype}\n          today={startDay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContentTable;\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayHeader from \"../GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"../GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"../GenerateDatetypeSections\";\nimport { DateTime } from \"luxon\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let dayBefore;\n\n  if (coursetype === \"ft\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 1) {\n      dayBefore = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      dayBefore = today.plus({ days: -2 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.plus({ days: -1 }).toFormat('dd-MM-yyyy');\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 2) {\n      dayBefore = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 2 && today.weekday <= 6) {\n      dayBefore = today.set({ weekday: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[dayBefore] && scheduleData[dayBefore].dateTypes.holidayType) {\n    dayBefore = DateTime.fromFormat(dayBefore, 'dd-MM-yyyy').minus({ days: 2 }).toFormat('dd-MM-yyyy');\n  }\n\n  return dayBefore;\n};\n\n//helper function that finds next course day\nconst findNextDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let nextDay;\n\n  if (coursetype === \"ft\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      nextDay = today.plus({ days: 1}).toFormat('dd-MM-yyyy');\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 2) {\n      nextDay = today.toFormat('dd-MM-yyyy');\n    } else if (today.weekday > 2 && today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[nextDay] && scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = DateTime.fromFormat(nextDay, 'dd-MM-yyyy').plus({ days: 1 }).toFormat('dd-MM-yyyy');\n    // console.log('next day', nextDay);\n    // nextDay = findNextDay(scheduleData, nextDay, coursetype, firstDayOfCourse);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentDaySection({ scheduleData, coursetype, today, firstDayOfCourse }) {\n\n  // indicates whether or not courseweek and course day is shown on the courseday header\n  const todaySectionHeader = true;\n  let previousDay = null;\n  let nextDay;\n  let previousDayId;\n  let currentDayId; \n\n  // finds previous course day, only applicable if course has already started\n  if (DateTime.now() > firstDayOfCourse) {\n    previousDay = findPreviousDay(scheduleData, today, coursetype, firstDayOfCourse);\n    nextDay = findNextDay(scheduleData, today, coursetype, firstDayOfCourse);\n\n    if(scheduleData[previousDay]) {\n      previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n    }\n\n    if(scheduleData[nextDay]) {\n      currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n    }\n  } else {\n    nextDay = firstDayOfCourse.toFormat('dd-MM-yyyy');\n  }\n\n  return (\n    <div>\n      <div className=\"today-date\">\n        {scheduleData[nextDay] && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"main-header-course-day\">\n              <h5>\n                Current Course Day:{\" \"}\n                {/* shows either today's content or next course day's content depending on if today's content exists  */}\n                {scheduleData[today.toFormat(\"dd-MM-yyyy\")] ? (\n                  <span>\n                    {scheduleData[today.toFormat(\"dd-MM-yyyy\")].courseDay}\n                  </span>\n                ) : (\n                  <span> {scheduleData[nextDay].courseDay}</span>\n                )}\n              </h5>\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(currentDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Current Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(previousDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Previous Course Day:\n                  </h5>\n                  <br></br>\n                  {scheduleData[previousDay] && (\n                    <GenerateDatetypeSections\n                    datetype={scheduleData[previousDay].dateTypes}\n                    classType=\"postClass\"\n                    day={scheduleData[previousDay]}\n                  />\n                  )}\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDaySection;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport ContentTable from \"./schedule-table/ContentTable\";\nimport { scroller } from \"react-scroll\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport CurrentDaySection from \"./current-day/CurrentDaySection\";\nimport { DateTime } from \"luxon\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title, today, firstDayOfCourse }) {\n  // used by scrollTo function to identify where to scroll to from the up arrow at the bottom of the screen\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  // let today = DateTime.now();\n\n  // // checking if first day of course is after today, if so today = first day of course, so that current day\n  // // section and tables and display first day/ weeks info\n  // const courseDatesArray = [];\n  // Object.keys(scheduleData).map((day) => {\n  //   courseDatesArray.push(day);\n  // });\n  // courseDatesArray.sort(function(a, b){return a-b});\n  // const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  // if (today < firstDayOfCourse) {\n  //   today = firstDayOfCourse;\n  // }\n\n  let nextToday;\n  if (coursetype === \"ft\") {\n    nextToday = today.plus({ weeks: 1 });\n  } else {\n    nextToday = today.plus({ months: 1 });\n  }\n  \n  return (\n    <div className=\"content\">\n      {/* button that takes user back to the top of the page  */}\n      <div\n        className=\"up-arrow\"\n        onClick={() =>\n          scroller.scrollTo(id, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        <ExpandLessIcon />\n      </div>\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n     \n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentDaySection\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n      <div className=\"schedule-accordion-container\">\n        <Accordion className=\"current-week-accordion\" defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <ContentTable\n              scheduleData={scheduleData}\n              coursetype={coursetype}\n              startDay={today}\n            />\n          </Accordion.Item>\n        </Accordion>\n        <Accordion className=\"current-week-accordion\">\n          {coursetype === \"ft\" && (\n            <Accordion.Item eventKey=\"0\">\n              <ContentTable\n                scheduleData={scheduleData}\n                coursetype={coursetype}\n                startDay={nextToday}\n              />\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </div>\n      <div className=\"schedule-list\">\n        <h1>Full Schedule</h1>\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { scroller } from 'react-scroll';\n\nfunction ModuleSection({ \n                    section, \n                    index, \n                    sectionNames, \n                    coursetype, \n                    scheduleData \n                }) {\n    return (\n        <>\n        {section.length > 1 && (\n        <Accordion.Item eventKey={index}>\n            <Accordion.Header>{sectionNames[index]}</Accordion.Header>\n            <Accordion.Body>\n            {section.map((info) => {\n            const id = `${coursetype}-week-${scheduleData[info.date].courseWeek}-day-${scheduleData[info.date].dayNumber}`;\n    \n                return (\n                <p onClick={() =>\n                scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                })\n                }\n                >\n                {info.name}\n                </p>\n                )\n            })}\n            </Accordion.Body>\n        </Accordion.Item>\n        )}\n        </>\n    )\n}\n\nexport default ModuleSection\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport ModuleSection from \"./ModuleSection\";\n\n// helper function for generating scheduleObjs array and moduleNameArray\nconst generatingDataArrays = (\n                              scheduleData, \n                              day, \n                              section, \n                              classtype, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes[section][classtype].items) {\n    scheduleData[day].dateTypes[section][classtype].items.map((item) => {\n      // if the item has a url\n      if(item.url && !scheduleUrls.includes(item.url)) {\n        // push the url into scheduleUrls\n        scheduleUrls.push(item.url);\n        // push item name, url and date into scheduleObjs\n        scheduleObjs.push({name: item.name, url: item.url, date: day});\n      }\n      if (item.url) {\n        const itemUrlArray = item.url.split('/');\n        // itemUrlArray[3] is used as the heading of each module section\n        // we're filtering out everythign that does not come from the gitbook \n        if (!moduleNameArray.includes(itemUrlArray[3]) && itemUrlArray[2] === 'bootcamp.rocketacademy.co') {\n          moduleNameArray.push(itemUrlArray[3]);\n        }\n      }\n    })\n  }\n}\n\n// helper finction for accessing required items (items in each class of each section of each day)\nconst accessingRequiredItems = (\n                              scheduleData, \n                              day, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes.module) {\n    Object.keys(scheduleData[day].dateTypes)\n    // filtering out module key\n    .filter(section => section !== 'module')\n    .map((section) => {\n      Object.keys(scheduleData[day].dateTypes[section])\n      // filtering out type key\n      .filter(classtype => classtype !== 'type')\n      .map((classtype) => {\n        // if there item array exists in a section, call the function that gets the required data\n        generatingDataArrays(scheduleData, \n                            day, \n                            section, \n                            classtype, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray);\n        \n      })\n    })\n  }\n}\n\nconst sortScheduleObjs = (urlObj, moduleName, general, ice, poce) => {\n  const urlModule = urlObj.url.split('/');\n  // this is the part of the url which we used to get the moduleName\n  const urlModuleName = urlModule[3];\n  // if the module name in the url is the current moduleName\n  if (urlModuleName === moduleName) {\n    const splitName = urlObj.name.split('.');\n    const dataObj = { name: urlObj.name, date: urlObj.date }\n    // push the object into the relevant array\n    if (splitName[1] === 'ICE') {\n      ice.push(dataObj);\n    } else if (splitName[1] === 'POCE') {\n      poce.push(dataObj);\n    } else {\n      general.push(dataObj);\n    }\n  }\n}\n \n// ###################################################################\n// ###################################################################\n\nfunction Modules({ scheduleData, coursetype }) {\n  const moduleNameArray = [];\n  const scheduleUrls = [];\n  const scheduleObjs = [];\n\n  // looking through entire data file \n  Object.keys(scheduleData).map((day) => {\n    accessingRequiredItems (\n                            scheduleData, \n                            day, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray\n                            );\n  })\n\n  moduleNameArray.sort();\n\n  return (\n    <div className=\"sidebar-modules\">\n      <h4>Modules</h4>\n      <Nav className=\"flex-column\">\n        {moduleNameArray.map((moduleName) => {\n          // creating array to store items of each section\n          const general = [];\n          const poce = [];\n          const ice = [];\n\n          // sort each object in scheduleObjs into one of 3 arrays, general, ice, poce\n          scheduleObjs.forEach((urlObj) => {\n            sortScheduleObjs(urlObj, moduleName, general, ice, poce);\n          })\n\n          const sectionArray = [];\n          sectionArray.push(general);\n          sectionArray.push(ice);\n          sectionArray.push(poce);\n\n          // names of each section \n          const sectionNames = ['General', 'In Class', 'Post Class'];\n\n          return (\n            <>\n            <h6 className=\"sidebar-subheading\">{moduleName}</h6>\n            <Accordion className=\"modules-accordion\">\n            {sectionArray.map((section, index) => {\n              return (\n              <ModuleSection\n                        section={section} \n                        index={index} \n                        sectionNames={sectionNames} \n                        coursetype={coursetype} \n                        scheduleData={scheduleData} \n                        />\n              )\n            })}\n            </Accordion>\n            </>\n            )\n          }\n        )}\n      </Nav>\n    </div>\n  );\n}\n\nexport default Modules;\n\n\n","import React, { useEffect, useRef } from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport Modules from './Modules';\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype, firstDayOfCourse }) {\n  const weeks = [];\n  // used to scroll to current week on page load \n  const executeScroll = () => currentWeekRef.current.scrollIntoView({ block: \"center\" });\n\n  useEffect(() => {\n    if (DateTime.now() > firstDayOfCourse) {\n      executeScroll();\n    }\n  }, []);\n\n  const CurrentWeekDiv = () => {\n    return (\n      <>\n        <div ref={currentWeekRef}></div>\n      </>\n    );\n  };\n\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf(\"week\");\n  const lastDayOfWeek = DateTime.now().endOf(\"week\");\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat(\"dd-MM-yyyy\"));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  const currentWeekRef = useRef(null);\n\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"0\"\n            // uses react-scroll library for scroll function\n            onClick={() =>\n              scroller.scrollTo(`${coursetype}-top`, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Current Day\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `${index + 1}`;\n          let id;\n          if (coursetype === 'pt') {\n            id = `${coursetype}-week-${week}-day-2`;\n          } else {\n            id = `${coursetype}-week-${week}-day-1`;\n          }\n          const sidebarId = `${coursetype}-sidebar-week-${week}`;\n      \n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                {week === weekNumber[0] && DateTime.now() > firstDayOfCourse && <CurrentWeekDiv />}\n                <div>\n                  {week === null ? \"Break\" : `Week ${week}`}\n                  {/* week indicator that indicates that a certain week is the current week  */}\n                  {weeks[index] === weekNumber[0] && (\n                    <span id={sidebarId} className=\"current-wk-indicator\">\n                      <KeyboardBackspaceIcon />\n                      {\"  \"}\n                      this week\n                    </span>\n                  )}\n                </div>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n      <Modules scheduleData={scheduleData} coursetype={coursetype} />\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype, firstDayOfCourse }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks \n        scheduleData={scheduleData} \n        coursetype={coursetype} \n        firstDayOfCourse={firstDayOfCourse}  />\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./sidebar/SideBar\";\nimport { DateTime } from 'luxon';\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"PTBC\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  let today = DateTime.now();\n\n  // checking if first day of course is after today, if so today = first day of course, so that current day\n  // section and tables and display first day/ weeks info\n  const courseDatesArray = [];\n  Object.keys(scheduleData).map((day) => {\n    courseDatesArray.push(day);\n  });\n  courseDatesArray.sort(function(a, b){return a-b});\n  const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  if (today < firstDayOfCourse) {\n    today = firstDayOfCourse;\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar \n        scheduleData={scheduleData} \n        coursetype={coursetype}  \n        firstDayOfCourse={firstDayOfCourse} \n        />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React from \"react\";\nimport { Route, Switch, Link, useRouteMatch, Redirect } from \"react-router-dom\";\nimport logo from \"../../assets/4-MILK.png\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport BatchSchedule from \"./BatchSchedule\";\n\nfunction ScheduleContainer({ batchArray }) {\n  let { path, url } = useRouteMatch();\n \n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      <Navbar variant=\"dark\" bg=\"secondary\">\n        <Navbar.Brand href=\"#home\">\n          <img src={logo} alt=\"company logo\"></img>\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          {batchArray.map((batch) => {\n            return (\n              <>\n              <Nav.Link as={Link} to={`${url}/${batch.name}`}>\n                {batch.name.toUpperCase()}\n              </Nav.Link>\n              </>\n            );\n          })}\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route exact path={path}>\n          <Redirect to={`${path}/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => {\n          return (\n            <Route path={`${path}/${batch.name}`}>\n              <BatchSchedule\n                data={batch.content}\n                title={batch.name.toUpperCase()}\n              />\n            </Route>\n          );\n        })}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React from 'react';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport TabsContainer from './components/admin/Tabs';\nimport ftbc6 from './data/10-01-2022_01-07-2022_FTBC6.json';\nimport ftbc7 from './data/28-03-2022_15-09-2022_FTBC7.json';\nimport ptbc1 from './data/17-08-2021_13-08-2022_PTBC1.json';\nimport ptbc2 from './data/16-11-2021_12-11-2022_PTBC2.json';\nimport ptbc3 from './data/12-03-2022_18-02-2023_PTBC3.json';\n\nimport ScheduleContainer from './components/schedules/ScheduleContainer';\n\nfunction App() {\n  // put all batch data files in an array to be passed into separate components for /shedule and /admin\n  const batchArray = [\n    { name: 'ptbc1', content: ptbc1 },\n    { name: 'ptbc2', content: ptbc2 },\n    { name: 'ptbc3', content: ptbc3 },\n    { name: 'ftbc6', content: ftbc6 },\n    { name: 'ftbc7', content: ftbc7 }];\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          {/* route that takes user to part of app that edits course schedules */}\n          <Route path=\"/admin\">\n            <TabsContainer batchArray={batchArray} />\n          </Route>\n          {/* route that takes user to part of app that displays batch schedules for student use */}\n          <Route path=\"/schedules\">\n            <ScheduleContainer batchArray={batchArray} />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}